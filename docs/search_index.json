[["index.html", "Quantitative Finance in R Chapter 1 Introduction 1.1 General structure 1.2 Notation", " Quantitative Finance in R Nikolas Anic 2022-02-24 Chapter 1 Introduction This markdown file serves as consortium for subjects on Quantitative Finance in R. The theory, application as well as examples are taken from numerous publicly available resources, with the main emphasis of the book being on the wonderful book Statistics and Data Analysis for Financial Engineering facilitated by David Ruppert and David S. Matteson from Cornell University, which is https://link.springer.com/book/10.1007/978-1-4939-2614-5#about, as well as on Robert H. Shunway and David S. Stoffer’s work on Time Series Analysis and Its Applications, also available https://link.springer.com/book/10.1007/978-3-319-52452-8. The book serves as interactive integration of their work and others, whereas it is the emphasis to combine theory and code in an even more direct fashion. As such, it should be regarded as addition to the original textbooks and the materials covered therein. Throughout, examples provided may be enhanced or changed, which will be indicated accordingly. Especially, there will be a deviation with regards to the data obtained, as we will mainly focus on Swiss Market data for the examples provided. 1.1 General structure In essence, this book should provide a practical guide to financial econometrics by using the programming language R. Throughout, we will cover common (and also rather specialized) topics of financial markets that are part of the daily business within the financial industry. The cover will range from risk and return characteristics of common securities and bond-like instruments, the descriptive analysis of financial data, modeling uni- and multivariate distributions, performing re-sampling strategies and a thorough discussion on copulas. Based on the first part, we then consider statistical analysis and forecasting methods in the form of regressions and work with time series data under the assumptions of constant as well as varying volatility, before diving into linear filtering and co-integration topics on time series. Based on the univariate analysis, we take a step forward and analyze portfolio definitions as well as constructions, derive famous models from the baseline portfolio construction principles (such as the CAPM or Factor Models) and use these models to create more elaborate investment structures. Having focused on the investment process, we continue by deriving ideas on financial, credit and market-based risk management which are common in quantitative risk management practices. We conclude by focusing on statistical properties which do not depend on the assumptions of parametric models and introduce both non-parametric models, general linear models as well as Bayesian models to account for data structures. The structure implies the following: In chapter 1, we cover two baseline subjects required to work within the field of empirical financial applications. The first topic covers the application environment. Therein, we cover the structure and use of the R Markdown file, on which we will write all of the subjects covered during the Lab sessions. We offer a discussion as how to create a markdown file, what makes these files so special in empirical research, how to organise and shuffle them as well as their connectivity to latex. Especially, we will consider how to write functions, how to add text-based outputs, how to construct and use coding cells as well as how to render the files. In chapter 2, we will pThe first topic covers mathematical and statistical properties that most modern finance is built upon. These properties serve as cornerstones required to comprehend the foundations of financial economics, risk management as well as asset management. ALthough widely used in many areas, their comprehension is key in identifying and retracing financial concepts in any of the afore-mentioned areas. In this chapter, we will cover the mathematical foundations and statistical properties that are often used within empirical finance contexts. Based upon the topics taught in Statistics and Mathematics courses as well as Empirical Methods, we will cover properties related to Probability Theory and Matrix Algebra. This section should serve as a repetition to the topics already discusses in baseline topics on statistics and econometrics and as such students should at least be familiar with the subjects at hand. However, as the course will rely substantially on these properties, a coherent discussion of them is a necessary prerequisite to be able to expect the baselines of empirical finance. In chapter 3, we focus on Risk and Return, one of the fundamental aspects of asset pricing. Therein, we cover the theoretical aspect behind portfolio theory, what risk metrics are, how to use performance measures, as well as how to visualise asset returns over time. Besides presenting application steps using pre-defined functions, we also cover how to calculate the metrics considered manually using matrix algebra to enhance your understanding of the respective empirical steps. 1.2 Notation Throughout the chapters, we will follow an identical notation structure to the common terms in statistical analysis. These conventions are: Lowercase letters, e.g., a and b, are used for nonrandom scalars. Lowercase boldface letters of the Roman or Greek alphabet, e.g., \\(\\textbf{a}\\) or \\(\\mathbf{\\omega}\\) are used for nonrandom vectors. Uppercase letters, e.g., X and Y , are used for random variables. Uppercase bold letters either early in the Roman alphabet or in Greek without a “hat,” e.g., \\(\\textbf{A}\\) or \\(\\mathbf{\\Omega}\\), are used for nonrandom matrices. A hat over a parameter or vector, e.g. \\(\\hat{\\omega}\\) or \\(\\mathbf{\\hat{\\omega}}\\) denotes an estimator of the corresponding parameter or parameter vector. \\(\\mathbf{I}\\) denotes the identity matrix with dimension appropriate for the context. \\(diag(d_1, \\dots, d_p)\\) denotes the diagonal matrix with elements of \\(d_1, \\dots, d_p\\). log(x) is the natural logarithm of x E(X) is the expected value of a random variable X. Var(X) and \\(\\sigma_x^2\\) are used to denote the variance of a random variable X. Cov(X,Y) and \\(\\sigma_{xy}\\) are used to denote the covariance between the random variables X and Y. Corr(X,Y) and \\(\\rho_{xy}\\) are used to denote the correlation between the random variables X and Y. A Greek letter denotes a parameter. A boldface Greek letter denotes a vector of parameters. If A is some statement, then I{A} is called the indicator function of A and is equal to 1 if A is true and equal to 0 if A is false. If \\(f_1\\) and \\(f_2\\) are two functions of a variable x, then: \\[ f_1(x) \\sim f_2(x) \\text{ as } x \\rightarrow x_0 \\] implies: \\[ \\lim_{x \\rightarrow x_0} \\frac{f_1(x)}{f_2(x)} = 1 \\] Vectors are column vectors and transposed vectors are rows: \\[ \\textbf{x} = \\begin{pmatrix} x_1 \\\\ \\dots \\\\ x_n \\end{pmatrix} \\] and \\[ \\textbf{x}^T = \\begin{pmatrix} x_1 &amp; \\dots &amp; x_n \\end{pmatrix} \\] \\(|\\textbf{A}|\\) is the determinant of a square matrix \\(\\textbf{A}\\). \\(tr(\\textbf{A})\\) is the trace (sum of the diagonal elements) of a square matrix \\(\\textbf{A}\\). "],["statistical-properties.html", "Chapter 2 Statistical Properties 2.1 Introduction to Probability 2.2 The concept of Probability: Important Notions and Definitions 2.3 Random Variables 2.4 Univariate Probability Distributions 2.5 Bivariate distributions 2.6 Multivariate Probability Distributions 2.7 Matrix Algebra: Introduction", " Chapter 2 Statistical Properties The first topic covers mathematical and statistical properties that most modern finance is built upon. These properties serve as cornerstones required to comprehend the foundations of financial economics, risk management as well as asset management. ALthough widely used in many areas, their comprehension is key in identifying and retracing financial concepts in any of the afore-mentioned areas. In this chapter, we will cover the mathematical foundations and statistical properties that are often used within empirical finance contexts. Based upon the topics taught in Statistics and Mathematics courses as well as Empirical Methods, we will cover properties related to \\(\\textbf{Probability Theory}\\) and \\(\\textbf{Matrix Algebra}\\). This section should serve as a repetition to the topics already discusses in Empirical Methods and as such students should at least be familiar with the subjects at hand. However, as the course will rely substantially on these properties, a coherent discussion of them is a necessary prerequisite to be able to expect the baselines of empirical finance. In this chapter, we will repeat the fundamentals of probability as well as probability distributions. We dive into what random variables are, how they are used in financial applications, how they can be related to probability measures, such as distributions, what the distributions tell us, how they can be related to financial concepts and how they can be calculated using R. The chapter is outlined as follows: Section 1 introduces the concept of random variables within a countable space. Next, in Section 2, we look at discrete probability distributions, such as Bernoulli, Poisson or Mutlinomials. In Section 3 we look at continuous probability distributions, before we dive into continuous distributions with appealing properties, such as normal or log-normal distributions. Lastly, we will look at continuous functions that can deal with extreme events. 2.1 Introduction to Probability 2.2 The concept of Probability: Important Notions and Definitions To understand the concept of random variables more thoroughly, we need to define some concepts first. The concepts we discuss are . For that, let’s use a dice throwing example. A dice can take up six values when being rolled, ranging from 1 to 6, with, theoretical, probability of 1/6 for each outcome. 2.2.0.1 Outcomes, Spaces and Events, Measurable and Immeasurable Spaces \\(\\textbf{Definition 2.1: Outcome}\\) Outcomes are just all possible, or feasible, values that a certain experiment can render. It is denoted by \\(\\omega\\). In the case of throwing a dice, this is just all numbers that the dice can show, e.g. 1 to 6. We write this accordingly as: \\[ \\omega_1 = 1, \\omega_2 = 2, \\omega_3 = 3, \\omega_4 = 4, \\omega_5 = 5, \\omega_6 = 6 \\] \\(\\textbf{Definition 2.2: Space}\\) The set of all feasible outcomes is called space. It is denoted by \\(\\Omega\\). In a dice experiment, this is just all values of \\(\\omega\\) defined previously. We write this as: \\[ \\Omega = [\\omega_1, \\omega_2, \\omega_3, \\omega_4, \\omega_5, \\omega_6] \\] Each Space \\(\\Omega\\) can be distributed into certain parts. For instance, in the dice example we can be interested in whether the rolled number is odd or even, defining a set of either all odd or all even numbers. In general, the \\(2^\\Omega\\) comprises of all possible subsets of a space \\(\\Omega\\), including the \\(\\emptyset\\) and the space set \\(\\Omega\\). With the aid of this power set, we are able to describe . Another neat property of the power set is that it includes each union of arbitrarily many events as well as any intersection of arbitrarily many events. The power set also contains the complements to all events. $ \\(\\sigma\\)-$ The \\(\\sigma\\)-algebra, denoted as \\(\\mathbb{A}\\), is the collection of events that are subsets of \\(\\Omega\\) with the following properties: \\[ \\text{(I) } \\Omega \\in \\mathbb{A} \\text{ and } \\emptyset \\in \\mathbb{A}\\\\ \\text{(II) }\\text{if event } E \\in \\mathbb{A} \\text{ then }\\hat{E} \\in \\mathbb{A} \\\\ \\text{(III) }\\text{If the countable sequence of events } E_1, \\dots, E_n \\in \\mathbb{A}, \\text{ then } \\cup^\\infty_{i=1}E_i \\in \\mathbb{A} \\text{ and } \\cap^\\infty_{i=1}E_i \\in \\mathbb{A} \\] Which defines that (I) both the space and the empty set, (II) the complements of any event and (III) both the intersection as well as the union of any event(s) are included. In the case of the dice rolling experiment, this would include all potential values as well as their intersections, combinations and complements. \\(\\sigma\\)- The Borel \\(\\sigma\\)-algebra is mostly used in uncountable spaces. That is, where \\(\\Omega\\) is no longer finite, or countable, implying we have uncountably many potential outcomes. Suppose that we are analyzing the daily logarithmic returns for a common stock or common stock index. Theoretically, any real number is a feasible outcome for a particular day’s return, although we might expect some capping above and below certain values. So, events are characterized by singular values as well as closed or open intervals, such as being interested if the return is at least 10 percent, and each potential outcome in the real space. To design our set of events of the uncountable space \\(\\Omega\\), we take the following approach. We first (I) include “any real number,” which is the space itself, \\(\\Omega\\), as well as the empty space \\(\\emptyset\\). Next, one includes (II) all events of the form “less than or equal to a”, for any real number a. Accordingly, we consider all possible half-open intervals given by \\((-\\infty, a]\\) for any a \\(\\in \\mathbb{R}\\). For each of these half-open intervals, we then add (III) its complement \\((a, \\infty)\\) which expresses the event “greater than a.” Lastly, we include (IV) all possible unions and intersections of everything already in the set of events as well as (V) of the resulting unions and intersections themselves. IN total, the Borel \\(\\sigma\\)-algebra consists of all these sets, intersections, unions and complements for an immeasurable space. It is denoted by \\(\\mathbb{B}\\). 2.2.0.2 Probability Measure There are some formal definitions a probability measure needs to satisfy: : A probability measure should assign each event E from our \\(\\sigma\\)-algebra a nonnegative value corresponding to the chance of this event occurring.\\ : The chance that the empty set occurs should be zero since, by definition, it is the improbable event of “no value.”\\ : The event that “any value” might occur (i.e., 1) should be 1 or, equivalently, 100% since some outcome has to be observable.\\ : If we have two or more events that have nothing to do with one another that are pairwise disjoint or , and create a new event by , the should equal the . More formally, this means: \\[ \\text{(I) } P(\\emptyset) = 0\\\\ \\text{(II) } P(\\Omega) = 1\\\\ \\text{(III) } \\text{ For a countable sequence of events } E_1, \\dots, E_n \\in \\mathbb{A} \\\\\\text{ that are mutually exclusive we have that } P(\\cup_{i=1}^\\infty E_i = \\scriptstyle\\sum_{i=1}^\\infty \\textstyle P(E_i)) \\] 2.2.0.3 Modelling Randomness and Chance: The Probability Space Now, we defined all individual constituents needed to model randomness and chance. By understanding what the space, \\(\\Omega\\), the subsets of events with certain properties, \\(\\sigma\\)-algebra, and the probability measure, P, we defined the triplet {\\(\\Omega\\), \\(\\sigma\\)-algebra, P} that forms the so called . 2.2.0.4 Modelling Randomness and Chance: Probability Measure in Countable and Uncountable Spaces Understanding the differences of P in cases of countability vs. uncountability is key in understanding the important implications for the . Suppose first a countable space \\(\\Omega\\). Here, the probability of any event E in the \\(\\sigma\\)-algebra \\(\\mathbb{A}\\) can be computed by adding the probabilities of all outcomes associated with E. That is: \\[ P(E) = \\scriptstyle\\sum_{\\omega_i \\in E}\\textstyle p(i) \\] where \\(P(\\Omega) = 1\\). In case of the dice rolling experiment, each outcome is associated with a probability of 1/6, formally: \\[ p(\\omega_i) = 1/6 \\] Now, suppose we are in an uncountably large space, given by \\(\\Omega = \\mathbb{R}\\). Here, the \\(\\sigma\\)-algebra is given by the Borel \\(\\sigma\\)-algebra \\(\\mathbb{B}\\) and we can no longer pin the probability of the events E in the space down by simply following the same approach as before. Doing so, we require the use of the : \\(\\textbf{Definition 2.6: Distribution function of P}\\) A function F is a distribution function of the probability measure P if it satisfies the following properties: : F is right-continuous\\ : F is nondecreasing\\ : \\(\\lim_{x\\rightarrow -\\infty} = 0\\) and \\(\\lim_{x\\rightarrow \\infty} = 1\\)\\ : For any \\(x \\in \\mathbb{R}\\), we have \\(F(x) = P((-\\infty, x])\\) This is exactly the foundation of the probability distributions we use in statistics and how to calculate each probability therein. Because, it follows that, for any interval (x,y], we compute the according to: \\[ F(y) - F(x) = P((x,y]) \\] So, in this case we have a function F uniquely related to P from which we derive the probability of any event in \\(\\mathbb{B}\\). Now, if we understand or define which distribution a variable follows, we can pin down the area under the distribution to understand the probability of certain events. To illustrate, the probability of the S&amp;P 500 log return being between -1% and 1% is: \\[ F(0.01) - F(-0.01) = P((–0.01,0.01]) \\] Whereas F is the function given by the probability distribution related to the probability measure, which consists of the space, all sub-spaces (Borel) as well as the probability measure, P. 2.3 Random Variables When we refer to some quantity as being a random variable, we want to express that its value is subject to uncertainty, or randomness. Strictly speaking, any random variable of interest is called stochatic. This is in contrast to a deterministic quantity whose value is determined with absolute certainty. As opposed to this, the random variable value is unknown until an outcome of an experiment is observable. A straight-forward way to think about a random variable is the following. Suppose we have a random experiment where some outcome \\(\\omega\\) from the space \\(\\Omega\\) occurs. Depending on this value, the random variables takes some value \\(X(\\omega) = x\\) where \\(\\omega\\) is an input to X. What we observe, finally, is the value x, which is only a consequence of the outcome \\(\\omega\\) of the underlying random experiment. Consequently, a random variable is a function that is completely deterministic and depends on the outcome \\(\\omega\\) of some experiment. As such, we understand random variables as . Mostly, we define random variables as measurable function. Let {\\(\\Omega\\), \\(\\mathbb{A}\\)} and {\\(\\Omega&#39;\\), \\(\\mathbb{A}&#39;\\)} be two measurable spaces and their corresponding \\(\\sigma\\)-algebrae, respectively. Then, a function \\(X: \\Omega \\rightarrow \\Omega&#39;\\) is \\(\\mathbb{A}-\\mathbb{A}&#39;\\)-measurable if, for any set \\(E&#39; \\in \\mathbb{A}&#39;\\), we have: \\[ X^{-1}(E&#39;) \\in \\mathbb{A} \\] In words, a function from one space to another is measurable if \\[ \\text{(I) you can map outcomes } \\omega \\text{ from } \\Omega \\text{ with values } X(\\omega) = x \\text{ in } \\Omega&#39;\\\\ \\text{(II) you can map events } E^{-1} \\text{ in the state space back with } \\sigma-\\text{algebra }, \\\\\\mathbb{A&#39;}, \\text{ to the corresponding origin of } E^{-1} \\text{ in } \\sigma-\\text{algebra } \\mathbb{A} \\text{ of the original probability space} \\] In essence, for each for each event in the state space \\(\\sigma\\)-algebra, \\(\\mathbb{A&#39;}\\), we have a corresponding event in the \\(\\sigma\\)-algebra of the domain space, \\(\\mathbb{A}\\). 2.3.0.1 Discrete and Continuous Random Variables Discrete Random Variables are variables that can take up a limited, or countably large, number of outcomes, \\(\\omega\\), such that \\(\\omega \\in {\\omega_1, \\dots, \\omega_n}\\). As such, with discrete random variables, we are in a countable origin space. As opposed to this, a Continuous Random Variable is a variable that can take on any real number value. That is, we understand that \\(\\omega \\in \\mathbb{R}\\). Based on the definitions from earlier, we are in an infinite, or uncountable, origin space. 2.4 Univariate Probability Distributions 2.4.1 Discrete Random Variables and Distributions We now consider the random variables in countably finite spaces and their distributions. The random variables on the countable space will be referred to as discrete random variables. 2.4.1.1 Random Variables in the countable space In cases of discrete random variables, the corresponding probability distribution function (PDF) is denoted as p(x) \\[ p(x) = \\sum_{w_i \\in E} p_i \\] whereas \\(p_i\\) is the probability of the individual outcome \\(\\omega_i\\) in E. Let’s quickly assume and recreate a potential discrete distribution. For that, let’s assume return based probabilities we generate: ret = c(-0.2, 0, 0.15, 0.35, 0.7) probabs = c(0.05, 0.14, 0.46, 0.25, 0.1) plot(ret, probabs, lwd=4, xlab=&quot;Return&quot;, ylab=&quot;Probability&quot;, xaxt=&quot;n&quot;) axis(1, at=ret) 2.4.1.2 Bernoulli Distribution Suppose, we have a random variable X with two possible outcomes. As such, the state space is \\(\\Omega&#39; \\in {x_1, x_2}\\). In general, the Bernoulli distribution is associated with random variables that assume the values \\(x_1 = 1\\) and \\(x_2 = 0\\). The distribution of X is given by the probability for the two outcomes, that is: \\[ p(X = 1) = p_1 = \\pi\\\\ p(X=0) = p_2 = (1-\\pi) \\] Having both the probability and values, we can describe the model as: \\[ p(x) = \\pi^x(1-\\pi)^{1-x} \\] Consequently, the mean of the Bernoulli Distribution is: \\[ 0*(1-\\pi) + 1*\\pi = \\pi \\] And its variance is gien by: \\[ (1-p)^2p+(0-p)^2(1-p) = p(1-p) \\] 2.4.1.3 Binomial Distribution A binomial distribution is basically n linked single Bernoulli trials. In other words, we perform a random experiment with n “independent” and identically distributed Bernoulli random variables, which we denote by B(p). We just assumed Independence and Identical Distribution. This is also known as “IID” assumption. Although we do not cover this in detail, it’s important to understand that means that the outcome of a certain item does not influence the outcome of any others. By we mean that the two random variables’ distributions are the same. This experiment is as if one draws an item from a bin and replaces it into the bin before drawing the next item. As such, we speak of . In general, a binomial random variable X counts the number of “successes” in n repeated Bernoulli trials, denoted as \\(X \\sim B(n,\\pi)\\). To define the probability of X being equal to k, we need to define two concepts. The first determines many different samples of size n are there to yield a i realizations of the outcome. It is called as the and is given by: \\[ \\begin{pmatrix} n \\\\ k \\end{pmatrix} = \\frac{n!}{(n-k)!k!} \\] The second defines the probability measure. Since in each sample the n individual B(p) distributed items are drawn independently, the probability of the sum over these n items is the product of the probabilities of the outcomes of the individual items, given by: \\[ \\pi^k(1-\\pi)^{n-k} \\] Combined, we obtain the probability under a Binomial Distribution, as product of both terms: \\[ P(x = k) = \\begin{pmatrix} n \\\\ k \\end{pmatrix} \\pi^k(1-\\pi)^{n-k} \\] The mean of a Binomial random variable is: \\[ E(x) = np \\] and its variance is: \\[ var(x) = np(1− p) \\] We can easily extend this idea to financial applications. Let’s assume that in each period the stock price can either increase or decrease by i = 10%. Here, probability of increase is given by 0.6 and probability of decline by 0.4. We start with an initial price of 20. According to this outcome, the stock price in t+1 will either be 20(1+0.1) = 22 or 20(1-0.1) = 18. In the third period, the stock price will further deviate according to the same principle and thus we will obtain: \\[ 22*1.1 = 24.20\\\\ 22*0.9 = 19.80\\\\ 18*1.1 = 19.80\\\\ 18*0.9 = 16.20 \\] At t=2, we obtain a new state space, \\(\\Omega&#39;\\), consisting of {16.2, 19.8, 24.2}. In that case, the probability distribution of \\(S_2\\) is given as follows: \\[ P(S_2 = 24.20) = \\begin{pmatrix} 2 \\\\ 2 \\end{pmatrix}\\pi^2(1-\\pi)^0 = 0.6^2 = 0.36 \\\\ P(S_2 = 19.80) = \\begin{pmatrix} 2 \\\\ 1 \\end{pmatrix}\\pi^1(1-\\pi)^{2-1} = 0.48 \\\\ P(S_2 = 16.20) = \\begin{pmatrix} 2 \\\\ 0 \\end{pmatrix}\\pi^0(1-\\pi)^{2-0} = 0.4^2 = 0.16 \\] To get the respective stock returns in t=2, we can use the formula: \\[ S_2 = S_0*1.1^n*0.9^{n-k} \\] \\[ S_t = S_0*(1+i)^k*(1-i)^{n-k} \\] 2.4.1.4 Multinomial Distribution A multinomial distribution follows the same concept as a binomial distribution, with the difference that the outcomes are more than 2. In general cases, we follow n outcomes. Formally, we have that \\(x = {x_1, \\dots, x_n}\\). Whereas the respective probabilities are denoted as \\(p(x) = {p(x_1), \\dots, p(x_n)}\\). As with the Binomial Distribution, we have two distinct components. The first is the and it is given by: \\[ \\begin{pmatrix} &amp; &amp; n\\\\ n_1 &amp; n_2 &amp; n_3 &amp; \\dots &amp; n_k \\end{pmatrix} \\] The second term is again the probability of each event occurring. However, we can no longer find the complement(s), as only one probability of events can be expressed by the others. Thus, we just work with occurrences: \\[ \\pi_1^{n_1} * \\pi_2^{n_2} * \\pi_3^{n_3} * \\dots * \\pi_k^{n_k} \\] Together, we obtain the Multinomial probability for a given event: \\[ P(x_1 = n_1, x_2 = n_2, x_3 = n_3, \\dots, x_k = n_k) = \\begin{pmatrix} &amp; &amp; n\\\\ n_1 &amp; n_2 &amp; n_3 &amp; \\dots &amp; n_k \\end{pmatrix} \\pi_1^{n_1} * \\pi_2^{n_2} * \\pi_3^{n_3} * \\dots * \\pi_k^{n_k} \\] Here, the respective Expected Value is: \\[ E(x_k) = p_k*n \\] and the correspoding Variance: \\[ var(x_k) = p_k*(1-p_k)*n \\] We can easily replicate the ideas formed in the stock price movements to multinomial perspectives. For that, let’s assume that we have now three distinct outcomes. That is, the stock can either increase by 10%, stay the same or decline by 10%. As such, we define the respective movements as \\(Y_u = 1.1, Y_s = 1.0, Y_d = 0.9\\). The respective probabilities are said to be \\(p_u = 0.25, p_s = 0.5, p_d = 0.25\\). Our new state space consists of six possible outcomes: \\[ \\Omega &#39; = [(u,s,d)] = [(2,0,0), (0,2,0), (0,0,2), (1,1,0), (1,0,1), (0,1,1)] \\] And the corresponding prices are: \\[ S_2 = S_0*p_u^{n_u}*p_s^{n_s}*p_d^{n_d} \\in [16.2, 18, 19.8, 20, 22, 24.2] \\] These are the multinomial coefficients we use for calculation of the probability for x being equal to some value. Consequently, we get the following probabilities: \\[ P(S = 24.4) = \\begin{pmatrix} &amp; 2 \\\\ 2 &amp; 0 &amp; 0\\end{pmatrix}p_up_u = 0.0625 \\\\ P(S = 22) = \\begin{pmatrix} &amp; 2 \\\\ 1 &amp; 1 &amp; 0\\end{pmatrix}p_up_s = 0.25 \\\\ P(S = 20) = \\begin{pmatrix} &amp; 2 \\\\ 0 &amp; 2 &amp; 0\\end{pmatrix}p_sp_s = 0.25 \\\\ P(S = 19.8) = \\begin{pmatrix} &amp; 2 \\\\ 1 &amp; 0 &amp; 1\\end{pmatrix}p_up_d = 0.125 \\\\ P(S = 18) = \\begin{pmatrix} &amp; 2 \\\\ 0 &amp; 1 &amp; 1 \\end{pmatrix}p_sp_d = 0.25 \\\\ P(S = 16.2) = \\begin{pmatrix} &amp; 2 \\\\ 0 &amp; 0 &amp; 2 \\end{pmatrix}p_dp_d = 0.0625 \\\\ \\] 2.4.2 Continuous Random Variables and Distributions As previously mentioned, within the scope of continuous distributions, we no longer have a countable space \\(\\Omega\\) we can rely on. That is, the different outcomes, \\(\\omega\\) are uncountable. Technically, without limitations caused by rounding to a certain number of digits, we could imagine that any real number could provide a feasible outcome, thereby the subsets is given by the Borel \\(\\sigma\\)-algebra, \\(\\mathbb{B}\\), which is based on all half-open intervals from \\((-\\infty, a]\\) for any \\(a \\in \\mathbb{R}\\). As the space set is uncountable, we need a unique way to assign a probability to a certain event. Recall that, as just described, the subsets in an uncountable space are given by all half-open intervals from \\((-\\infty, a]\\). We can make use of this property by introducing a which expresses the \\((-\\infty, a]\\) occurs. That is, the probability that a . In said case, F(a) states the . To be a little more concise, we assume that the Continuous Distribution Function, F(a), has the following properties: \\(\\lim_{x \\rightarrow -\\infty} \\rightarrow 0\\) \\ \\(\\lim_{x \\rightarrow \\infty} \\rightarrow 1\\) \\ \\(F(b) - F(a) \\geq 0 for b \\geq a\\) \\ \\(\\lim_{x \\downarrow a} F(x) = F(a)\\) These Properties state (I) Behaviour in Extremes (II) Monotonically Increasing behaviour (III) Right-Continuity As the set of events in real numbers are uncountably many, pinning down an exact number is zero. As such, we generally assign probabilities in the following way: \\[ P((a,b)) = F(b) - F(a) \\] Whereas \\(F(b) = P((-\\infty, b]))\\) and \\(F(a) = P((-\\infty, a]))\\). That is, the entire probability that an outcome of at most a occurs is subtracted from the greater event that an outcome of at most b occurs, implying: \\[ (a,b] = (-\\infty, b) / (-\\infty, a] \\] To assign probabilities in the continuous way, however, we need to define certain knowledge of the distribution function F. 2.4.2.1 Density Function: General Case The continuous distribution function F of a probability measure P on \\(\\mathbb{R}, \\mathbb{B}\\) is defined as follows: \\[ F(x) = \\int^x_{-\\infty}f(t) dt \\] where f(t) is the of the probability measure P. We interpret the density function equation accordingly: Since, at any real value x the distribution function uniquely equals the probability that an outcome of at most x is realized (\\(F(x) = P((-\\infty, x])\\)), the density function states that this probability is obtained by \\(-\\infty\\) . We interpret this function as the . This follows the subsequent logic. We know that with continuous distribution functions, the probability of exactly a value of x occurring is zero. However, the probability of observing a value between x and some very small step to the right, denoted as \\(\\triangle\\) x (i.e. [x, x+\\(\\triangle\\) x]), is necessarily zero. As such, between this increment of x and \\(\\triangle\\) x, the distribution function F increases by exactly this probability. That is, the increment is: \\[ F(x + \\triangle x) - F(x) = P(X \\in [x, x + \\triangle x)) \\] Now, dividing this equation by the width of the interval, denoted as \\(\\triangle\\) x, we obtain the per unit step on this interval. If we reduce the step size \\(\\triangle\\) x to an infinitesimally small step, \\(\\delta x\\), this average approaches the , which we denote f. This is the . \\[ \\lim_{\\triangle \\rightarrow 0} \\frac{F(x+\\triangle x) - F(x)}{\\triangle x} = \\frac{\\delta F(x)}{\\delta(x)} = f(x) \\] This equation is quite fundamental for continuous probability. Here, ee divide the probability that some realization should be inside of the small interval by that interval step. And, by letting that interval shrink to width zero, we obtain the marginal rate of growth or, equivalently, the derivative of F. Hence, we call f the probability density function or simply the density function. Commonly, it is abbreviated as pdf. From the equation above, we understand that the probability of some occurrence of at most x is given by integration of the density function f over the interval \\((-\\infty, x]\\). This follows the respective steps: For a given outcome, calculate the increment of x and \\(\\triangle\\) x, and divide this equation by the width of the interval to get the marginal rate of growth At each value t, we multiply the corresponding density f(t) by the infinitesimally small interval width dt. Finally, we integrate all values of f (weighted by dt) up to x to obtain the probability for \\((-\\infty, x]\\) In the end, the integral of this marginal rate of growth of F in the interval at x is exactly how the probability \\(P((-\\infty, x])\\) is derived through integrating the marginal rate f over the interval \\((-\\infty, x]\\) with respect to the values. The resulting total probability is then given by the area under the curve in the below figure. mean=80; sd=10 lb=60; ub=100 x &lt;- seq(-4,4,length=100)*sd + mean hx &lt;- dnorm(x,mean,sd) plot(x, hx, type=&quot;n&quot;, xlab=&quot;x&quot;, ylab=&quot;pdf&quot;) i &lt;- x &gt;= lb &amp; x &lt;= ub lines(x, hx) polygon(c(lb,x[i],ub), c(0,hx[i],0), col=&quot;red&quot;) area &lt;- pnorm(mean, sd) - pnorm(lb, mean) result &lt;- paste(&quot;P(&quot;,lb,&quot;&lt; IQ &lt;&quot;,ub,&quot;) =&quot;, signif(area, digits=3)) The area representing the value of the interval is indicated by the red block. So, the probability of some occurrence of at least a and at most b is given by the area inside red. Based on the notions above, the probability of \\(X \\in {a,b}\\) is given by: \\[ P(X \\in (a,b]) = \\int^b_{a}f(t) dt \\] 2.4.3 Moments of Probability Distributions: Location, Scale and Shape Moments of a distribution generally tell us things about the center, spread, the distribution as well as the shape behaviour of the underlying distribution. As such, they are important to understand the baseline configuration of a distribution. In our case, we will look at four moments: Expected Value (mean) Variance Skewness Kurtosis These moments can also be defined as three distinct sets of parameters: Location, Scale and Shape. Location Paremeters shift a distribution horizontally without changing the shape or variation of the distribution. Usually, this is the Mean of a distribution. Scale parameters change the dispersion of the distribution but leave the location identical. As such, they quantify the precision of the distribution. Evidently, this is best represented by the variance. Furthermore, any scale parameter is a constant multiple of the standard deviation provided that the latter is finite. This is why we have that \\(\\sigma(aX) = |a|\\sigma(X)\\). Lastly, a shape parameter is any parameter that is not changed by location and scale changes. That is, for any f(y), \\(\\mu\\) or \\(\\theta\\), the shape parameter for f(y) will equal the shape parameter of \\(\\theta^{-1}f{\\theta^{-1}(y-\\mu)}\\). These parameters are usually defined as Skewness or Kurtosis. A location parameter is a parameter that shifts a distribution to the right or left without changing the distribution’s shape or variability. Scale parameters quantify dis- persion. A parameter is a scale parameter for a univariate sample if the param- eter is increased by the amount |a| when the data are multiplied by a. T 2.4.3.1 Expected Value (Mean) The expected value of a random variable X measures the center of mass for the underlying PDF. The expected value of a random variable X is given by: \\[ \\mu_x = E[X] = \\sum x\\cdot P(X=x) \\] 2.4.3.2 Variance and Standard Deviation The variance of a random variable X measures the spread around the mean. As such, it measures the spread of the distribution. The variance and standard deviation of a random variable X are given by: \\[ \\sigma_X^2 = E[(X-\\mu_x)^2]\\\\ \\sigma_X = \\sqrt{\\sigma_X^2} \\] 2.4.3.3 Skewness The skewness of a random variable X measures the symmetry of a distribution around its mean. It is given by: \\[ skew(X) = \\frac{E[(X-\\mu_x)^3]}{\\sigma_X^3} \\] If X has a symmetric distribution, then skew(X) = 0, as values above and below the mean cancel each other out. There are two special cases: For skew(X) &gt; 0, the distribution has a long right tail. For skew(X) &lt; 0, the distribution has a long left tail. a &lt;- rsnorm(100000, mean = 0, sd = 2, xi = 2) b &lt;- rsnorm(100000, mean = 0, sd = 2, xi = -2) skew &lt;- as.data.frame(cbind(a,b)) colnames(skew) = c(&quot;Right Skewed&quot;, &quot;Left Skewed&quot;) skew_melt &lt;- melt(skew) ## No id variables; using all as measure variables #Plot skew_melt %&gt;% ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = 0.2) + theme_bw() + xlim(-15,15) 2.4.3.4 Kurtosis The Kurtosis of X measures the thickness in the tails of a distribution. It is given as: \\[ kurt(X) = \\frac{E[(X-\\mu_x)^4]}{\\sigma_x^4} \\] Kurtosis is the average of the standardized data raised to the fourth power. Any standardized values that are less than 1 (i.e., data within one standard deviation of the mean) contributes very little to the overall Kurtosis. This is due to the fact that raising a value less than 1 to the fourth power shrinks the value itself (e.g. 0.5^4 = 0.0625). However, since kurtosis is based on deviations from the mean raised to the fourth power, . Consequently, large Kurtosis values indicate that extreme values are likely to be present in the data. Consequently, there are three types of Kurtosis we need to be familiar with: Mesokurtic: This is the normal distribution Leptokurtic: This distribution has fatter tails and a sharper peak. The kurtosis is “positive” with a value greater than 3 Platykurtic: The distribution has a lower and wider peak and thinner tails. The kurtosis is “negative” with a value greater than 3 To visualise this, we need to a &lt;- rnorm(100000, mean = 0, sd = 1) b &lt;- rnorm(100000, mean = 0, sd = 1.45) c &lt;- rnorm(100000, mean = 0, sd = 0.55) df_kurt &lt;- as.data.frame(cbind(a,b,c)) colnames(df_kurt) = c(&quot;Mesokurtic&quot;, &quot;Platykurtic&quot;, &quot;Leptokurtic&quot;) df_kurt_melt &lt;- melt(df_kurt) ## No id variables; using all as measure variables #Plot df_kurt_melt %&gt;% ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = 0.2) + theme_bw() + xlim(-4,4) ## Warning: Removed 589 rows containing non-finite values (stat_density). 2.4.4 Quantile-Based Location, Scale, and Shape Parameters We showed that the moments used are sensitive to outliers. Consequently, they are undefined for distributions that suffer from heavy tails. Although we will cover heavy tails in a later part, heavy tails imply that we have substantial outliers in the data. In order to counteract this issue, we can use quantile based parameters. Quantiles are defined as \\(F^{-1}(p)\\). First, let’s understand how we can get quantile-based location parameters. This is simple. We know that: any quantile is a location parameter any positive weighted average of quantiles, given as \\(\\sum_{i=1}^I w_iF^{-1}p(i)\\) is also a location parameter, as long as the sum of the weights adds up to 1. Now, we can get a quantile-based scale parameter by: the difference between two quantiles That is: \\[ s(p_1, p_2) = \\frac{F^{-1}(p_2) - F^{-1}(p_1)}{a} \\] For instance, assuming that a = 1, then s(1/4, 3/4) is called the Inter-Quartile Range (IQR). Lastly, we can get a quantile-based shape parameter. For instance, we can get a quantile-based skewness parameter as the ratio: \\[ \\frac{s(1/2, p_2) - s(1/2, p_1)}{s(p_3, p_4)} \\] whereas the numerator is the difference between two scale parameters and the denominator is a usual scale parameter. Furthermore, and most importantly, we can quantify tail weights with the quantile-based shape parameter. This is done using the formula: \\[ \\frac{s(p_1, 1-p_1)}{p_2, 1-p_2} \\] 2.4.5 The cumulative Distribution Before we dig into distributions with appealing properties for our statistical analysis, we first define some important concepts of distribution functions. The first is related ot the cumulative distribution. In general, the cumulative distribution function (CDF) of a random variable assigns the probability of a random variable X to be smaller than or equal to a given threshold. It can be also interpreted as a half-closed interval consisting of the entire space left to a certain threshold. Formally: \\[ F_X(x) = P(X\\leq x) \\] The most important properties are: \\[ \\text{Property 1: } \\text{If } x_1 &lt; x_2, \\text{then } F(x_1) &lt; F(x_2) \\\\ \\text{Property 2: } F_X(-\\infty) = 0 \\\\ \\text{Property 3: } F_X(\\infty) = 1 \\\\ \\text{Property 4: } P(X &gt; x) = 1 - F_X(x) \\\\ \\text{Property 5: } P(x_1 &lt; X \\leq x_2) = F_X(x_2) - F_X(x_1) \\] We can easily show an example for both discrete as well as continuous distributions: d=data.frame(x=c(0,1,2,4,5,7,8,9, 10), cdf=c(0,0.1,0.2,0.3,0.5,0.6,0.7,1, 1)) ggplot() + geom_step(data=d, mapping=aes(x=x, y=cdf), direction=&quot;vh&quot;, linetype=3) + geom_point(data=d, mapping=aes(x=x, y=cdf), color=&quot;red&quot;) + ylab(&quot;CDF&quot;) + xlab(&quot;x&quot;) + ggtitle(&quot;CDF for discrete distribution&quot;) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5,lineheight=2.4), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.line = element_line(color = &quot;grey&quot;)) ggplot(data.frame(x = c(-5, 5)), aes(x = x)) + stat_function(fun = pnorm) + ylab(&quot;CDF&quot;) + xlab(&quot;x&quot;) + ggtitle(&quot;CDF for continuous distribution&quot;) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5,lineheight=2.4), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.line = element_line(color = &quot;grey&quot;)) 2.4.5.1 Quantile values of Distributions Given a random variable X with a continuous CDF F_X(x), for any \\(\\alpha\\), where 0 \\(\\leq \\alpha \\leq 1\\), the \\(100*\\alpha\\) % quantile of the distribution for X is given as the value \\(q_\\alpha\\) that satisfies: \\[ F_X(q_a) = P(X \\leq q_\\alpha) = \\alpha \\] In essence, the definition implies that the quantile distribution incorporates all values of a distribution up to a specific threshold such that exactly \\(\\alpha\\) % of the entire distribution are included within that range. Important examples that are often used in statistics include the 25% quantile, the median (50% quantile), the 75% quantile as well as minimum and maximum values. For instance, the median of the distribution, \\(q_{0.5}\\) satisfies the following: \\[ F_X(q_{0.5}) = P(X \\leq q_{0.5}) = 0.5 \\] In the case that \\(F_X\\) is invertible, then \\(q_{\\alpha}\\) can be determined as: \\[ q_\\alpha = F_X^{-1}(\\alpha) \\] That is, by using the inverse cdf \\(F_X^{-1}\\), one can determine the quantile value for a given threshold of the underlying distribution. Looking again at the median example, the 50% quantile value can be determined as: \\[ q_{0.5} = F_X^{1}(0.5) \\] This inverse is also called . Applying this in R is relatively straight-forward. Given the standard normal distribution, the quantile value can be determined by solving: \\[ q_\\alpha = \\Phi^{-1}(\\alpha) \\] Where \\(\\Phi^{-1}\\) denotes the inverse of the cdf of the standard normal distribution with the function qnorm(). Let’s use it to print the critical values of our normal distribution that we usually use for significance tests. # Define the functions critical_10 &lt;- qnorm(0.95,mean=0,sd=1) critical_5 &lt;- qnorm(0.975,mean=0,sd=1) critical_1 &lt;- qnorm(0.995,mean=0,sd=1) criticals &lt;- round(cbind(critical_10, critical_5, critical_1),2) colnames(criticals) &lt;- c(&quot;10% Significance (2 Tailed)&quot;, &quot;5% Significance (2 Tailed)&quot;, &quot;1% Significance 21 Tailed)&quot;) criticals ## 10% Significance (2 Tailed) 5% Significance (2 Tailed) 1% Significance 21 Tailed) ## [1,] 1.64 1.96 2.58 Accordingly, with the quantile function, we can obtain critical values of given distributions. 2.4.6 Continuous Distributions with Appealing Properties Next, we discuss the more commonly used distributions with appealing statistical properties that are used in finance. These are the normal distribution, the student’s t distribution, chi-2 distribution, Fisher F distribution and log-normal distribution. 2.4.6.1 The Normal Distribution The normal distribution, or Gaussian, is the most common distribution used in finance. It is defined by two parameters: its mean \\(\\mu\\) as well as its standard deviation \\(\\sigma\\). It is denoted by \\(N(\\mu, \\sigma)\\). The PDF of the normal distribution is given by: \\[ f(x) = \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-(x-\\mu)^2/2\\sigma^2} \\] We can easily print the pdf of the normal distribution using the function rnorm() dat &lt;- read.table(text = &quot;info mean sd info1 0 1 info2 1 0.5 info3 2 1 &quot;, header = TRUE) densities &lt;- apply(dat[, -1], 1, function(x) rnorm(n = 100000, mean = x[1], sd = x[2])) colnames(densities) &lt;- dat$info densities.m &lt;- melt(densities) #Plot densities.m %&gt;% ggplot(aes(x = value, fill = Var2, color = Var2)) + geom_density(alpha = 0.2) + theme_bw() + xlim(-5,5) ## Warning: Removed 144 rows containing non-finite values (stat_density). A problem is that the distribution function cannot be solved for analytically and therefore has to be approximated numerically. That is: \\[ P(a \\leq X \\leq b) = \\int^b_a \\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{1}{2}x^2}dx \\] does not have a closed form solution. In the particular case of the standard normal distribution, the values are tabulated. Standard statistical software provides the values for the standard normal distribution. Some useful approximations are: \\[ \\begin{align*} P(X \\in [\\mu \\pm \\sigma]) \\approx 0.68\\\\ P(X \\in [\\mu \\pm 2\\sigma]) \\approx 0.95\\\\ P(X \\in [\\mu \\pm 3\\sigma]) \\approx 0.99 \\end{align*} \\] The above states that approximately 68% of the probability is given to values that lie in an interval of one standard deviation around the mean of the distribution. 2.4.6.2 Chi-2 Distribution In this distribution, let Z be a standard normal random variable, in brief \\(Z \\sim N(0,1)\\), and \\(X = Z^2\\). Then X is distributed chi-square with one degree of freedom, denoted as \\(X \\sim \\chi^2(1)\\). The PDF of the Chi-2 Distribution is given as: \\[ f(X) = \\frac{1}{2^{n/2}\\Gamma(\\frac{n}{2})}e^{-\\frac{x}{2}}x^{(\\frac{n}{2}-1)} \\] for any x \\(\\geq\\) 0. Here \\(\\Gamma(z) = \\int^\\infty_0 t^{z-1}e^{-t}dt\\) denotes the gamma function. In general, Degrees of Freedom (DOF) indicate how many independently behaving standard normal random variables the resulting variable is composed of. Here, X is only composed of one, called Z. In general, this distribution is characterised by its DOF. If we have n distributed random variables that are all independent of each other, then their sum is written as: \\[ S = \\sum_{i=1}^n \\textstyle X \\sim \\chi^2(n) \\] The corresponding properties are: mean of E(x) = n and variance of Var(x) = 2n. So, the mean and variance are directly related to the degrees of freedom. An important feature of the \\(chi^2\\) distribution is the degrees of freedom equal the number of independent \\(\\chi^2 (1)\\) distributed \\(X_i\\) in the sum. Consequently, the summation of any two chi-squared distributed random variables is itself chi-square distributed. The \\(chi^2\\) distribution is drawn with the function `rchisq()`` as follows: a &lt;- rchisq(100000, df = 2) b &lt;- rchisq(100000, df = 3) c &lt;- rchisq(100000, df = 7) d &lt;- rchisq(100000, df = 10) df_chi &lt;- as.data.frame(cbind(a,b,c,d)) colnames(df_chi) = c(&quot;DOF=2&quot;, &quot;DOF=3&quot;, &quot;DOF=7&quot;, &quot;DOF=10&quot;) df_chi_melt &lt;- melt(df_chi) #Plot df_chi_melt %&gt;% ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = 0.2) + theme_bw() + xlim(0,20) 2.4.6.3 Student’s t-Distribution Basically, the Student’s t-distribution has a similar shape to the normal distribution, but thicker tails. For large degrees of freedom n, the Student’s t-distribution does not significantly differ from the standard normal distribution. If X has a Student’s t distribution with degrees of freedom parameter v, then the PDF has the form: \\[ f(x) = \\frac{\\Gamma(\\frac{v+1}{2})}{\\sqrt{v\\pi}\\Gamma(\\frac{v}{2})}\\left(1 + \\frac{x^2}{v}\\right)^{-\\frac{(v+1)}{2}} \\] where \\(\\Gamma(z) = \\int^\\infty_0 t^{z-1}e^{-t}dt\\) denotes the gamma function. Especially, it has the following properties: \\[ E[X] = 0\\\\ Var(x) = \\frac{v}{v-2}, v &gt; 2 \\\\ Skew(x) = 0, v &gt; 3 \\\\ Kurt(x) = \\frac{6}{v-4}, v &gt; 4 \\] The parameter v controls the scale and tail thickness of the distribution. If v is close to four, then the kurtosis is large and the tails are thick. In general, the lower the degrees of freedom, the heavier the tails of the distribution, making extreme outcomes much more likely than for greater degrees of freedom or, in the limit, the normal distribution. The t-distribution is displayed with the function rt()` below. Note that we also add the normal distribution to show that the tails for both t distributions are fatter, but the fattest are for the t distribution with the lowest DOF. a &lt;- rnorm(100000, mean = 0, sd = 1) b &lt;- rt(100000, df = 1) c &lt;- rt(100000, df = 5) d &lt;- rt(100000, df = 10) df_norm_t &lt;- as.data.frame(cbind(a,b,c,d)) colnames(df_norm_t) = c(&quot;N(0,1)&quot;, &quot;t, DOF=1&quot;, &quot;t, DOF=5&quot;, &quot;t, DOF=10&quot;) df_norm_t_melt &lt;- melt(df_norm_t) ## No id variables; using all as measure variables #Plot df_norm_t_melt %&gt;% ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = 0.2) + theme_bw() + xlim(-5,5) ## Warning: Removed 13044 rows containing non-finite values (stat_density). 2.4.6.4 F-Distribution The F-Distribution is similar to the \\(\\chi^2\\) distribution, but with two variables. The PDF of the F-Distribution is defined as: \\[ f(X) = \\frac{F(\\frac{n_1 + n_2}{2})}{F(\\frac{n_1}{2}) + F(\\frac{n_2}{2})}\\cdot\\left(\\frac{n_1}{n_2}\\right)^{n_1/2} \\cdot \\frac{x^{n_1/2 - 1}}{\\left[1+x\\cdot\\frac{n_1}{2}\\right]^{\\frac{n_1+n_2}{2}}} \\] for any x \\(\\geq\\) 0. Here we let both \\(X \\sim \\chi^2(n_1)\\) and \\(Y \\sim \\chi^2(n_2)\\) and then \\(F(n_1, n_2)\\) is defined as: \\[ F(n_1, n_2) = \\frac{Y/n_1}{X/n_2} \\] This ratio has an F-distribution with \\(n_1\\) and \\(n_2\\) DOF from the underlying \\(\\chi^2\\) distribution for X and Y, respectively. Also like the chi-square distribution, the F-distribution is skewed to the right. The first two moments of the F-distribution are the following: The mean is given by E(X) = \\(\\frac{n_2}{n_2 - 2}\\) for \\(n_2 &gt; 2\\), and the variance is given by Var(X) = \\(\\frac{2n_2^2(n_1 + n_2 -2)}{n_1(n_2 - 2)^2(n_2 - 4)}\\) for \\(n_2 &gt; 4\\). The F-Distribution values can be determined with the function r(f) and looks like this: a &lt;- rf(100000, df1 = 4, df2 = 4) b &lt;- rf(100000, df1 = 4, df2 = 10) c &lt;- rf(100000, df1 = 10, df2 = 4) d &lt;- rf(100000, df1 = 10, df2 = 100) df_F &lt;- as.data.frame(cbind(a,b,c,d)) colnames(df_F) = c(&quot;n1=4, n2=4&quot;, &quot;n1=4, n2=10&quot;, &quot;n1=10, n2=4&quot;,&quot;n1=10, n2=100&quot;) df_F_melt &lt;- melt(df_F) #Plot df_F_melt %&gt;% ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = 0.2) + theme_bw() + xlim(0,7) 2.4.6.5 Log-Normal Distribution The last important function we look at is the log-normal distribution. It is directly linked to the standard normal distribution. To see this, let X be a normally distributed random variable with mean \\(\\mu\\) and variance \\(\\sigma^2\\). Then the random variable \\[ X = e^Y \\] is log-normally distributed also with mean \\(\\mu\\) and variance \\(\\sigma^2\\). This distribution is denoted as \\(X \\sim Ln(\\mu, \\sigma^2)\\). The support of the log-normal distribution is on the positive half of the real line, as the exponential function can only take up positive values. Accordingly, the PDF of the log-normal distribution is given by: \\[ f(X) = \\frac{1}{x\\sigma\\sqrt{2\\pi}}e^{\\frac{(\\ln x - \\mu)^2}{2\\sigma^2}} \\] for any x &gt; 0. The density function is also similar to the normal distribution and results in the log-normal distribution function: \\[ F(x) = \\Phi\\left(\\frac{\\ln x - \\mu}{\\sigma}\\right) \\] The log-normal distribution values can be calculate using the rlnorm() function: a &lt;- rlnorm(100000, meanlog = 0, sdlog = 1) b &lt;- rlnorm(100000, meanlog = 0, sdlog = 0.5) c &lt;- rlnorm(100000, meanlog = 0, sdlog = 2) d &lt;- rlnorm(100000, meanlog = 1, sdlog = 1) df_lnorm &lt;- as.data.frame(cbind(a,b,c,d)) colnames(df_lnorm) = c(&quot;mean=0, sd=1&quot;, &quot;mean=0, sd=0.5&quot;, &quot;mean=0, sd=2&quot;,&quot;mean=1,sd=1&quot;) df_lnorm_melt &lt;- melt(df_lnorm) #Plot df_lnorm_melt %&gt;% ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = 0.2) + theme_bw() + xlim(-1,7) 2.4.6.6 Functions for distribution calculations (d, p, q, r) To create distributions of the forms above, we use distribution packages. In these distribution packages, we can make use of four distinct functions that can apply all the theory we just discussed. For that, we will look at the normal distribution. As previously, each statistical property of the distribution can be calculated using the functions dnorm(), pnorm(), qnorm() and rnorm(). We will now cover what each of these functions does. dnorm The dnorm() returns the value of of the probability density function for the distribution of interest, given the parameters x, \\(\\mu\\) and \\(\\sigma\\). That is, for a given input x with distributional moments of the mean and variance, we obtain the corresponding value on the y-axis, which indicates the density function of that value. # This is the largest density of the PDF given that we have the normal distribution with mean = 0 &amp; sd = 1 dnorm(0, mean = 0, sd = 1) ## [1] 0.3989423 pnorm The pnorm() returns the integral from \\(-\\infty\\) to q of the pdf of a certain distribution, whereas q is a z-score. That is, for a given x, pnorm() returns the value of the y axis on the cdf, also known as probability density. Consequently, with this function you obtain the cdf functional value. In general, it is the function that replaces the table of probabilities and Z-scores at the back of the statistics textbook. In general, pnorm is used to get the probability that \\(-\\infty &lt; X \\leq x\\), and, as such, it gives the p-value for a distirbution. # This is the median value of the respective distribution. As such, it comprises of exactly half the overall density of the underlying distribution. This is intuitive, given that the value -1.96 in a normal distribution with mean = 0 and sd = 1 is exactly the middle value, thereby incorporating half of the entire area under the cdf. pnorm(-1.96, mean = 0, sd = 1) ## [1] 0.0249979 We deliberately chose -1.96 b/c, in a two-sided test when assuming normal distribution, then \\(-\\infty &lt; -1.96 \\leq x\\) and \\(x \\leq -1.96 &lt; \\infty\\) constitute approximately 5% of the probability mass under the curve, or, in other words, 5% of the total probability. qnorm The qnorm() is the inverse of the pnorm() function. Looking at the quantiles part, it is the function that returns the inverse values of the cdf. You can use this function to determine the p’th quantile value of the underlying distribution (e.g. which value incorporates exactly half of the overall area under the curve). # Intuitively, pnorm() inverse for a value of 0.5 indicates what value the 50% quantile must have under the given distribution characteristics. As such, we see that the 5% quantile here must have value -1.96! qnorm(0.025, mean = 0, sd = 1) ## [1] -1.959964 Consequently, it gives us the value for a given probability. That is, here a one-sided probability mass of 2.5% would require that the corresponding value is approximately -1.96, thereby stating that -1.96 is at the 2.5’th percentile of the distribution. rnorm Lastly, the rnorm() is used to generate vector of numbers that follow a certain distribution and its characteristics. We used this function to generate an order of numbers to plot subsequently and show the plotted distributions. rnorm(10, mean = 0, sd = 1) ## [1] -0.39231096 1.32871856 0.83320545 0.94219243 -1.76040662 -0.42221624 -2.05127569 -0.25863108 -0.07634454 -0.80897710 Although we just showed the functions for the normal distribution, R offers a great amount of functions for other distributions that can be used identically as the normal case. To give you an overview: Neatly, nearly all of these functions can be used with the prefixes “d,p,q,r”. Thus, for instance, just write rlnorm to get the values of a log-normal distribution. 2.4.7 Generalized Error Distribution Besides the continuous distributions that have appealing properties, we can also consider distributions with heavier tails whose errors are not normally distributed. Generalized Error Distribution (GED) are a symmetric family of distributions used if errors aren’t normally distributed. The PDF of the GED is given by: \\[ f(X) = \\kappa(v)e^{-0.5\\times |\\frac{x}{\\lambda_v}^v|} \\] whereas \\(\\lambda_v = (\\frac{2^{-2/v}\\Gamma(v^{-1})}{\\Gamma(3/v)})^{1/2}\\) and \\(\\kappa(v) = \\frac{v}{\\lambda_v2^{1+1/v}\\Gamma(v^{-1})}\\). Further: the variance is 1 it is defined for \\(- \\infty &lt; x &lt; \\infty\\) The shape parameter v &gt; 0 determines the weight of the tails, whereas smaller values induce larger tail weights. Especially, if: v = 1: Laplace Distribution v = 2: Normal Distribution The Generalized error distribution is useful when the errors around the mean or in the tails are of special interest. This is due to the sharp form of the distribution. As discussed, the lower the weight, the sharper the function and the greater the absolute tail weights. However, the t-distribution will have, asymptotically, always greater tail weights due to its polynomial tails. The GED distribution is drawn as follows: a &lt;- rged(100000, mean = 0, sd = 1, nu = 0.8) b &lt;- rged(100000, mean = 0, sd = 1, nu = 1) c &lt;- rged(100000, mean = 0, sd = 1, nu = 2) d &lt;- rged(100000, mean = 0, sd = 1, nu = 4) df_rged &lt;- as.data.frame(cbind(a,b,c,d)) colnames(df_rged) = c(&quot;GED(0,1,0.8)&quot;, &quot;GED(0,1,1)&quot;, &quot;GED(0,1,2)&quot;, &quot;GED(0,1,4)&quot;) df_norm_ged_melt &lt;- melt(df_rged) ## No id variables; using all as measure variables #Plot df_norm_ged_melt %&gt;% ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = 0.2) + theme_bw() + xlim(-5,5) As we can observe, the smaller the shape factor, the heavier the tails. Importantly, if we increase the shape factor, we will observe a nearly uniform distribution within a given range. 2.4.8 Creating Skewed Distributions based on Symmetric Distributions In essence, we looked at distributions that are defined between \\(-\\infty\\) and \\(\\infty\\). As such they have no lower or upper bound, which is important for real-life financial assets. As long as we have symmetric data, we can use some of these distributions to model the data. However, once we don’t have any symmetric distribution, we need to take distributions such as the log-normal or gamma, which are only defined for \\(0 &lt; x &lt; \\infty\\). This is an issue, as they do not allow any negative distribution, which makes them basically useless for financial modelling. However, Fernandez and Stell (1998) describe a way for inducing skewness in symmetric distributions such as normal and t-distributions. To do so, let \\(\\beta\\) be a positive constant and f a densite symmetric around 0. Then we obtain so-called Fernandez–Steel skewed distributions: \\[ f(x|\\xi) = \\begin{cases} f(x\\beta) &amp;&amp; \\text{if } x &lt; 0\\\\ f(x/\\beta) &amp;&amp; \\text{else} \\end{cases} \\] Following the normalization, the density is given a location shift and scale change to induce a mean equal to 0 and variance of 1. The PDF of the Fernandez-Steel distribution is given as: \\[ f(X) = \\frac{2\\beta}{\\beta^2 + 1}\\frac{\\Gamma(\\frac{v+1}{2})}{\\sqrt{v\\pi}\\Gamma(\\frac{v}{2})}[1+\\frac{x^2}{v}(\\frac{1}{\\beta^2}I(x \\geq 0) + \\beta^2I(x&lt;0))]^{-\\frac{v+1}{2}} \\] This allows the following interpretation: \\(\\xi &gt; 1\\): The distribution will be right-skewed because we multiply with a constant greater than 1 and induce a higher f(x) value for x &lt; 0 and divide the f(x) for x &gt; 0 \\(\\xi &lt; 1\\): The distribution will be left-skewed If f is a t-distribution, then \\(f(x|\\xi)\\) is a skewed t-distribution. Similarly, skewed GED are formed when f is a GED. The Fernandez-Steel distribution is drawn as follows: a &lt;- rskt(100000, 10, 0.5) b &lt;- rskt(100000, 10, 1) c &lt;- rskt(100000, 10, 2) d &lt;- rskt(100000, 10, 4) df_rged &lt;- as.data.frame(cbind(a,b,c,d)) colnames(df_rged) = c(&quot;FS(10, 0.5)&quot;, &quot;FS(10,0 1)&quot;, &quot;FS(10, 2)&quot;, &quot;FS(10, 4)&quot;) df_norm_ged_melt &lt;- melt(df_rged) ## No id variables; using all as measure variables #Plot df_norm_ged_melt %&gt;% ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = 0.2) + theme_bw() + xlim(-5,5) As we can see, we are able to transform the t-distribution to a skewed FS t-distribution. Depending on the \\(\\beta\\) parameter, we may either induce left- or right-skew and transform the data accordingly. Another skewness is known as Azzalini–Capitanio skews. These distributions have a shape parameter \\(\\alpha\\) that determines the skewness. the distribution is left-skewed, symmetric, or right-skewed according to whether \\(\\alpha\\) is negative, zero, or positive. Its PDF is given by: \\[ f(X) = 2t_v(x)T_{v+1}(\\beta x\\sqrt{\\frac{v+1}{x^2 + v}}) \\] The particular case for \\(\\beta = 0\\) is the Student’s t distribution with v degrees of freedom. The Azzalini–Capitanio distribution is drawn as follows: # The xi is the location parameter # The omega the scale parameter # The alpha is the skewness parameter a &lt;- rsn(100000, xi=0, omega=1, alpha=-3) b &lt;- rsn(100000, xi=0, omega=1, alpha=0) c &lt;- rsn(100000, xi=0, omega=1, alpha=3) d &lt;- rsn(100000, xi=0, omega=2, alpha=0) df_rged &lt;- as.data.frame(cbind(a,b,c,d)) colnames(df_rged) = c(&quot;AC(0,1,-3)&quot;, &quot;AC(0,1,0)&quot;, &quot;AC(0,1,3)&quot;, &quot;AC(0,2,0)&quot;) df_norm_ged_melt &lt;- melt(df_rged) ## No id variables; using all as measure variables #Plot df_norm_ged_melt %&gt;% ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = 0.2) + theme_bw() + xlim(-5,5) 2.4.9 Kernel Density Estimation Thus far, we have considered distributions that are able to follow a parametric distribution. That is, the form and moments of the distribution can be defined in a closed form solution. Except for the skewed distribution, all the distributions allowed for a parametric type. Now, let’s consider another case of non-parametric distributions, the Kernel Density Estimation. Kernel Density Estimation (KDE) is a non-parametric method to estimate the probability density function of a random variable. It is a fundamental data smoothing problem where inferences about the population are made, based on a finite data sample. Given a sample \\(x_1, \\dots, x_n\\) from a distribution with an unknown or non determinable density function f(x), the KDE of f(x) is given as \\(\\hat f_b\\) and is defined as: \\[ \\hat f_b = \\frac{1}{nb}\\sum_{i=1}^n K (\\frac{x-x_i}{b}) \\] whereas K is a non-negative function integrating to 1 (known as Kernel) and b &gt; 0 is the bandwidth. We interpret the function as follows. At each point \\(x_i\\) that we observe in the data, we center a scaled form of the kernel function K with \\(x_i\\) as its mean. The individual Kernel can have multiple forms, which we introduce afterwards. We then superposition all these individual Kernel distributions (all the “bumps”) which sum up to one total density distribution function that we can draw. Note that the denominator of nb ensures that the mass is of the overall function will equal one (thus the integral is one). 2.4.9.1 Different Kernels We can use the KDE with the function density function. Let’s create some of the Kernel plots. # Create the data set.seed(1667493) data &lt;- rnorm(1000, mean = 3) 2.4.9.1.1 Gaussian Kernel # Kernel density estimation d &lt;- density(data) # Create DF df_gauss &lt;- as.data.frame(cbind(data, d$x, d$y)) ## Warning in base::cbind(...): number of rows of result is not a multiple of vector length (arg 2) # Create plot df_gauss %&gt;% ggplot(aes(x = data)) + geom_histogram(aes(y=..density..), position=&quot;identity&quot;, alpha=0.5, color = &quot;goldenrod&quot;) + geom_line(aes(x = df_gauss$V2, y = df_gauss$V3), color = &quot;violetred4&quot;) + ggtitle(&quot;Histogram and Gaussian Kernel Density&quot;) + ylab(&quot;Density&quot;) + xlab(&quot;Value&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) ## Warning: Use of `df_gauss$V2` is discouraged. Use `V2` instead. ## Warning: Use of `df_gauss$V3` is discouraged. Use `V3` instead. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # Kernel density estimation d &lt;- density(data, kernel = &quot;rectangular&quot;) # Create DF df_gauss &lt;- as.data.frame(cbind(data, d$x, d$y)) # Create plot df_gauss %&gt;% ggplot(aes(x = data)) + geom_histogram(aes(y=..density..), position=&quot;identity&quot;, alpha=0.5, color = &quot;goldenrod&quot;) + geom_line(aes(x = df_gauss$V2, y = df_gauss$V3), color = &quot;violetred4&quot;) + ggtitle(&quot;Histogram and Rectangular Kernel Density&quot;) + ylab(&quot;Density&quot;) + xlab(&quot;Value&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 2.4.9.1.1.1 Triangular Kernel # Kernel density estimation d &lt;- density(data, kernel = &quot;triangular&quot;) # Create DF df_gauss &lt;- as.data.frame(cbind(data, d$x, d$y)) # Create plot df_gauss %&gt;% ggplot(aes(x = data)) + geom_histogram(aes(y=..density..), position=&quot;identity&quot;, alpha=0.5, color = &quot;goldenrod&quot;) + geom_line(aes(x = df_gauss$V2, y = df_gauss$V3), color = &quot;violetred4&quot;) + ggtitle(&quot;Histogram and Triangular Kernel Density&quot;) + ylab(&quot;Density&quot;) + xlab(&quot;Value&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 2.4.9.1.1.2 Epanechnikov Kernel # Kernel density estimation d &lt;- density(data, kernel = &quot;epanechnikov&quot;) # Create DF df_gauss &lt;- as.data.frame(cbind(data, d$x, d$y)) # Create plot df_gauss %&gt;% ggplot(aes(x = data)) + geom_histogram(aes(y=..density..), position=&quot;identity&quot;, alpha=0.5, color = &quot;goldenrod&quot;) + geom_line(aes(x = df_gauss$V2, y = df_gauss$V3), color = &quot;violetred4&quot;) + ggtitle(&quot;Histogram and Epanechnikov Kernel Density&quot;) + ylab(&quot;Density&quot;) + xlab(&quot;Value&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 2.4.9.1.2 Biweight Kernel # Kernel density estimation d &lt;- density(data, kernel = &quot;biweight&quot;) # Create DF df_bi &lt;- as.data.frame(cbind(data, d$x, d$y)) # Create plot df_bi %&gt;% ggplot(aes(x = data)) + geom_histogram(aes(y=..density..), position=&quot;identity&quot;, alpha=0.5, color = &quot;goldenrod&quot;) + geom_line(aes(x = df_bi$V2, y = df_bi$V3), color = &quot;violetred4&quot;) + ggtitle(&quot;Histogram and Biweight Kernel Density&quot;) + ylab(&quot;Density&quot;) + xlab(&quot;Value&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 2.4.9.1.2.1 Cosine Kernel # Kernel density estimation d &lt;- density(data, kernel = &quot;cosine&quot;) # Create DF df_cos &lt;- as.data.frame(cbind(data, d$x, d$y)) # Create plot df_cos %&gt;% ggplot(aes(x = data)) + geom_histogram(aes(y=..density..), position=&quot;identity&quot;, alpha=0.5, color = &quot;goldenrod&quot;) + geom_line(aes(x = df_cos$V2, y = df_cos$V3), color = &quot;violetred4&quot;) + ggtitle(&quot;Histogram and Biweight Kernel Density&quot;) + ylab(&quot;Density&quot;) + xlab(&quot;Value&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 2.4.9.2 Bandwidth Selection As we said, we can also change the smoothing bandwidth. The smoothing bandwidth decides how many individual “bumps” the Kernel should have in order to represent the curve. The smaller the bandwidth, the higher the smoothness. But also here we have an issue of the bias-variance trade-off. 2.4.9.2.1 Different Bandwidths # Kernel density estimation d &lt;- density(data, kernel = &quot;rectangular&quot;, bw = 0.02) e &lt;- density(data, kernel = &quot;rectangular&quot;, bw = 1) hist(data, ,breaks=25,freq=F) lines(d$x, d$y, col = &quot;blue&quot;) lines(e$x, e$y, col = &quot;red&quot;) As we can see, the bandwidth has a clear impact on the smoothness of the Kernel. There are generally three options to choose the bandwidth if we do not wish to customise it. They are: Rule-of-thumb variation given by Scott (1992) Unbiased cross-validation Methods by Sheather &amp; Jones (1991) In order to use them, just add the respective names to the bw command. For instance, the unbiased cross-validation requires: # Kernel density estimation d &lt;- density(data, kernel = &quot;cosine&quot;, bw = &quot;ucv&quot;) # Create DF df_cos &lt;- as.data.frame(cbind(data, d$x, d$y)) # Create plot df_cos %&gt;% ggplot(aes(x = data)) + geom_histogram(aes(y=..density..), position=&quot;identity&quot;, alpha=0.5, color = &quot;goldenrod&quot;) + geom_line(aes(x = df_cos$V2, y = df_cos$V3), color = &quot;violetred4&quot;) + ggtitle(&quot;Histogram and Biweight Kernel Density&quot;) + ylab(&quot;Density&quot;) + xlab(&quot;Value&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Whereas we obtain a bandwidth of: d$bw ## [1] 0.2516141 According to the CV procedure, this leads to the lowest loss function values. 2.4.10 Heavy Tail Distributions We already considered heavy tail distributions when looking at certain continuous distributions with nice properties, such as the t-distribution or the exponential distribution. Now, we are motivated to further research these distributions, especially with regards to extreme events that can take place in financial settings. For the purpose of this illustration, we will work with actual data on the Swiss Market Index (SMI). 2.4.10.1 Motivation for Extreme Value Theory We will work with the returns of the SMI during 1990 to 2021 for this exercise. For this, we will first load and present the data. # Load the dataset SMI &lt;- read.csv(&quot;~/Desktop/Master UZH/Data/A2_dataset_03.txt&quot;, header = T, sep = &quot;\\t&quot;)[,1:2] # Create the returns SMI_ts &lt;- Return.calculate(xts(SMI[,-1], order.by = as.Date(SMI[,1]), method = &quot;log&quot;))[-1] colnames(SMI_ts) &lt;- c(&quot;SMI&quot;) There is no clear definition of what constitutes an extreme event. However, usually we define a standard deviation of more than 3 from its mean as extreme observation. This is because, if we assume a rather normal distribution, that the observation is not within the 99.9% of the probability mass of the distribution. We already stated that histograms or density plots are not quite useful for us to detect extreme values. However, Q-Q Plots can be used to account for these values. If we plot this, we obtain the following: ## [1] 0.005973709 ## [1] 0.04431329 SMI_ts %&gt;% ggplot(aes(sample = SMI)) + stat_qq(fill = &quot;black&quot;, color = &quot;goldenrod&quot;) + stat_qq_line() + annotate(&quot;text&quot;, label = &quot;Mean = 0.00597&quot;, x = 1.5, y = -0.12) + annotate(&quot;text&quot;, label = &quot;StD = 0.04431&quot;, x = 1.42, y = -0.14) + ggtitle(&quot;Q-Q Plot of the SMI Log Returns&quot; ) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) As we can observe, there is no clear normal structure. It appears as if the data is severely left-skewed, implying that we observe strong, but rare, negative events in terms of monthly returns. If we consider these downturns more closely, we can observe how many standard deviations certain observations are from the mean with the formula: \\[ x = \\frac{\\min(SMI) - \\mu(SMI)}{\\sigma(SMI)} \\] Given that, we see a deviation of: (min(SMI_ts$SMI)-mean(SMI_ts$SMI))/sd(SMI_ts$SMI) ## [1] -4.407656 approximately 4.41 standard deviations. This is quite heavy, given that we have monthly observations which are deemed to be more stable than higher frequency data. We can further elaborate on this by plotting a histogram and its respective normal distribution. colnames(SMI_ts) &lt;- c(&quot;Return&quot;) SMI_ts$Dist_Norm &lt;- rnorm(dim(SMI_ts)[1], mean = mean(SMI_ts$Return), sd = sd(SMI_ts$Return)) SMI_ts %&gt;% ggplot(aes(x = Return)) + geom_histogram(aes(y=..density..), position=&quot;identity&quot;, alpha=0.5, color = &quot;goldenrod&quot;) + geom_density(aes(x = SMI_ts$Dist_Norm), color = &quot;violetred4&quot;) + ggtitle(&quot;Histogram of Returns and Normal Distribution&quot;) + ylab(&quot;Density&quot;) + xlab(&quot;Value&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. As we can observe, the extreme returns cannot be accounted for if the Gaussian distribution is used as a model for the daily log-returns. And it especially fails if we use a standard normal Gaussian distribution. The tails of the normal distribution are too thin to produce such extreme values. Instead of using Normal distributions, we can thus focus on other distributions to model extreme events. These distributions are commonly referred to as Pareto Distributions. They are also called stable distributions 2.5 Bivariate distributions Bivariate and Multivariate distributions are important concepts in asset management settings. This is because each asset can be regarded as a random variable. In order to be able to form portfolios, we thus need to understand how different assets relate with each other and what their common covarying structure is. To do so, let’s look at the fundamental concepts and moments first. 2.5.1 Bivariate Distributions for continuous random variables The joint probability for two random variables is characterised using their (PDF), called f(x,y), such that: \\[ \\int^\\infty_{-\\infty}\\int^\\infty_{-\\infty}f(x,y)dxdy = 1 \\] Note that the joint probability distribution is plotted in a three-dimensional space. To find the joint probabilities of \\(x_1 \\leq X \\leq x_2\\) and \\(y_1 \\leq Y \\leq y_2\\), we must find the volume nder the probability surface over the grid where the intervals \\([x_1, x_2]\\) and \\([y_1, y_2]\\) are overlapping. That is: \\[ P(x_1 \\leq X \\leq x_2, y_1 \\leq Y \\leq y_2) = \\int^{x_2}_{x_1}\\int^{y_2}_{y_1}f(x,y)dxdy \\] 2.5.2 Standard bivariate normal distribution An important bivariate distribution constitutes the standard bivariate normal distribution. It has the fofm: \\[ f(x,y) = \\frac{1}{2\\pi}e^{-\\frac{1}{2}(x^2+y^2)} dx dy \\] 2.5.3 Marginal Distributions The marginal distribution treats the data as if only the one component was observed while a detailed joint distribution in connection with the other component is of no interest. In other words, the joint frequencies are projected into the frequency dimension of that particular component. The frequency of certain values of the component of interest is measured by the marginal frequency. The marginal frequency of X is calculated as sum of all frequencies of X given that Y takes on a particular value. Thus, we obtain the row sum as the marginal frequency of this component X. That is, for each value \\(X_i\\), we sum the joint frequencies over all pairs (\\(X_i\\), \\(Y_j\\)) where \\(Y_j\\) is held fix. Formally, this is: \\[ f_x(X_i) = \\sum_jf(X_i, Y_j) \\] where the sum is over all values \\(W_j\\) of the component Y. Lastly, the marginal pdf of X is found by integrating y out of the joint PDF f(X,Y): \\[ f(x) = \\int^\\infty_{-\\infty} f(x,y)dy \\] 2.5.4 Conditional Distributions The conditional probability that X = x given that Y = y is defined as: \\[ f(x|y) = f(X=x|Y=y) = \\frac{f(x,y)}{f(y)} \\] Whereas an analogous principle holds for the conditional probability of y on x. The use of conditional distributions reduces the original space to a subset determined by the value of the conditioning variable. In general, we need conditional distributions, or probability, to define what value x takes given that y takes a certain value. Consequently, we no longer are within a field of independence between two variables when we include conditional probability. Conditional moments are different to unconditional ones. As such, the conditional expectation and variance are defined as follows. For discrete random variables, X and Y, the conditional expectation is given as: \\[ E[X|Y=y] = \\sum_{x\\in S_X}x\\cdot P(X=x|Y=y) \\] For discrete random variables, X and Y, the conditional variance is given as: \\[ var(X|Y=y) = \\sum_{x\\in S_X}(x-E[X|Y=y])^2\\cdot P(X=x|Y=y) \\] To do so, we first look at the properties of covariance and correlation 2.5.5 Independence The previous discussion raised the issue that a component may have influence on the occurrence of values of the other component. This can be analyzed by comparison of the joint frequencies of x and y with the value in one component fixed, say x = X. If these frequencies vary for different values of y, then the occurrence of values x is not independent of the value of y. This is equivalent to check whether a certain value of x occurs more frequently given a certain value of y. That is, check the conditional frequency of x conditional on y, and compare this conditional frequency with the marginal frequency at this particular value of x. If the conditional frequency is not equal to the marginal frequency, then there is no independence. Formally, two random variables are independent if: \\[ f_{x|y}(x,y) = f(x)\\cdot f(y) \\] That is, the joint frequency is the mathematical product of their respective marginals. Independence is a handy feature as it allows us to compare marginal and conditional distribution properties of random variables. 2.5.6 Correlation and Covariance Covariance and correlation describe properties of the combined variation of two or more assets. As the term describes, they measure to what extent assets covary. Thereby, they quantify the level of similarity of of movements over time for different variables. The covariance between two random variables, X and Y, is given as: \\[ \\sigma_{XY} = cov(X,Y) =E[(X - E(X))(Y - E(Y))] \\] The correlation between two random variables, X and Y, is given as: \\[ \\rho_{XY} = cor(X,Y) = \\frac{\\sigma_{XY}}{\\sigma_X\\sigma_Y} \\] Covariance and Correlations have certain nice properties we can use. Important properties of the are: cov(X,X) = var(X) cov(X,Y) = cov(Y,X) cov(X,Y) = E[XY] -E[X]E[Y] cov(aX,bY) = abcov(X,Y) cov(X,Y) = 0 if X and Y independent Let’s quickly show the third and fourth property: \\[ \\begin{align} cov(X,Y) &amp;= E[(X-E(X))(Y-E(Y))] \\\\ &amp;= E[XY -E(X)Y -E(Y)X +E(X)E(Y)] \\\\ &amp;= E[XY] - E(X)E(Y) - E(X)E(Y) + E(X)E(Y)\\\\ &amp;= E[XY] - E(X)E(Y) \\end{align} \\] \\[ \\begin{align} cov(aX,bY) &amp;= E[(aX - aE(X))(bY - bE(Y))] \\\\ &amp;= a\\cdot b\\cdot E[(X-E(X))(Y-E(Y))] \\\\ &amp;= a\\cdot b\\cdot cov(X,Y) \\end{align} \\] Important properties of the are: \\(-1\\leq \\rho_{xy} \\leq 1\\) $_{xy} = 1 $: Perfect positive linear relation $_{xy} = -1 $: Perfect negative linear relation 2.5.7 Expectation and variance of the sum of two random variables Joint distributions are important when considering asset prices. They define how to compute important properties when considering multiple assets. When considering joint distributions, two important properties can be shown. The first relates to the expected value of a linear combination. Especially, it holds that, for two random variables with defined means and covariance matrices: \\[ \\begin{align} E[aX + bY] &amp;= \\sum_{x\\in S_X}\\sum_{y \\in S_Y} (ax + by)P(X=x, Y=y) \\\\ &amp;= \\sum_{x\\in S_X}\\sum_{y \\in S_Y} (ax)P(X=x, Y=y) + \\sum_{y\\in S_Y}\\sum_{x \\in S_X} (by)P(X=x, Y=y) \\\\ &amp;= a\\sum_{x\\in S_X}x\\sum_{y \\in S_Y}P(X=x, Y=y) + b\\sum_{y\\in S_Y}y\\sum_{x \\in S_X}P(X=x, Y=y)\\\\ &amp;= a\\sum_{x\\in S_X}xP(X=x) + b\\sum_{y\\in S_y}yP(Y=y) &amp;&amp; \\text{sum of all y options renders condition = 1}\\\\ &amp;= aE[X] + bE[Y] \\\\ &amp;= a\\mu_X + b\\mu_Y \\end{align} \\] This means that expectation is additive. The second result relates to the variance of a linear combination. Especially, it holds that, for two random variables with defined means and covariance matrices: \\[ \\begin{align} var(aX + bY) &amp;= E[(aX + bY - E[aX]E[bY])^2]\\\\ &amp;= E[((aX - E(aX)) + (bY - E(bY)))^2] \\\\ &amp;= E[(a(X-E(X)) + b(Y-E(Y)))^2] \\\\ &amp;= a^2E[X-E(X)]^2 + b^2(Y-E(Y))^2 + 2 ab(X-E(X))(Y-E(Y))\\\\ &amp;= a^2\\cdot var(X) + b^2\\cdot var(Y) + 2\\cdot a \\cdot b \\cdot cov(X,Y) \\end{align} \\] That is, the variance of a linear combination of random variables is itself not linear. This is due to the covariance term when computing the variance of the sum of two random variables that are not independent. This means that the variance is not additive. Both properties are inherently important when considering both portfolio return as well as risk characteristics. 2.6 Multivariate Probability Distributions We now switch into Multivariate Statistical Models. In other words, we are going to use properties from the Multivariate Distributions Within multivariate distributions, we are interested in the joint behaviour of a set of random variables. In essence, multivariate distributions generalise the bivariate distributions encountered previously. We will cover the same properties on the moments, functions and transformations as we have seen in the bivariate case. However, we will extend the results to cases with N potential random variables. To give you an introduction to each of the ideas we present, we will work with data on the big four companies in Switzerland: Novartis, Nestle, Roche and UBS. A1_bigfour &lt;- read.csv(&quot;/Users/nikolasanic/Desktop/Advanced_Empirical_Finance_Documents/Data/Risk_Return/A1_bigfour.csv&quot;, header = T, sep = &quot;,&quot;, dec = &#39;.&#39;) A1_bigfour &lt;- A1_bigfour %&gt;% mutate(Date = dmy(Date)) %&gt;% select(Date, UBS_N, Roche_Holding, Nestle_PS, Novartis_N) %&gt;% filter(Date &gt;= &quot;1996-12-31&quot;) # Here, we first assign a date format to the date variable, otherwise the xts package cannot read it. A1ts_bf &lt;- xts(x = A1_bigfour[,-1], order.by = as.Date(A1_bigfour[,1])) # Calculate the returns ret_bf &lt;- Return.calculate(A1ts_bf)[-1,] 2.6.1 Covariance and Correlation Matrices 2.6.1.1 Theroetic fudament The first generalisation relates to the covariance and correlation. First, we need to define the Expected value of all our assets. This is an \\(N \\times 1\\) vector, given by: \\[ E(\\textbf{X}) = \\begin{pmatrix} E(X_1) \\\\ \\vdots \\\\ E(X_N) \\end{pmatrix} \\] Within bivariate distributions, we had a 2 \\(\\times\\) 2 var-cov matrix, which indicated the variance and the covariances of both assets. In the multivariate case, we have an \\(N \\times N\\) matrix with \\(N(N-1)/2\\) distinct values. Based on the expected values, we can define the covariance matrix as: \\[ Cov(\\textbf{X}) = \\begin{pmatrix} Var(X_1) &amp; Cov(X_1, X_2) &amp; \\dots &amp; Cov(X_1, X_N) \\\\ Cov(X_2, X_1) &amp; Var(X_2) &amp; \\dots &amp; Cov(X_2, X_N) \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ Cov(X_N, X_1) &amp; Cov(X_N, X_2) &amp; \\dots &amp; Var(X_N) \\end{pmatrix} \\] Note that, through matrix algebra, we understand that the correlation of \\(\\textbf{X}\\) is given as \\[ Corr(\\textbf{X}) = D^{-1}Cov(\\textbf{X})D^{-1} \\] whereas D = \\(diag(\\sigma_{X_1}, \\dots, \\sigma_{X_N})\\) is the diagonal matrix of the standard deviations of \\(X_i\\). 2.6.1.2 Constructing covariance and correlation matrices To follow this through, have a look at the matrix algebra part on this. For instance, we can calculate the covariance and correlation matrix of the big four companies. cov &lt;- cov(na.omit(ret_bf)) We can easily calculate the correlation matrix with the matrix algebra: # Get the diagonal elements d &lt;- sqrt(diag(cov)) # Make the matrix multiplication step cor &lt;- d^(-1)*cov*d^(-1) round(cor, 3) ## UBS_N Roche_Holding Nestle_PS Novartis_N ## UBS_N 1.000 0.001 0.004 0.004 ## Roche_Holding 0.138 1.000 0.250 0.464 ## Nestle_PS 0.763 0.418 1.000 0.538 ## Novartis_N 0.589 0.557 0.386 1.000 2.6.1.3 Decomposing covariance and correlation matrices We can decompose any covariance and correlation matrix. To do so, we need to understand the cholesky decomposition of a covariance matrix. This states the following relationship. Let \\(\\Sigma\\) be the covariance matrix and A the Cholesky factor. The Cholesky Factor equals the lower triangular of the matrix with entries larger than zero. In this case, we get that: \\[ \\Sigma = AA^T \\] In the case of our example, we can deconstruct the matrix using the following formula: # Cholesky Decomposition A &lt;- t(chol(cov)) # Recreating the matrix Sigma &lt;- round(A%*%t(A),4) # Check if identical round(Sigma,4) == round(cov,4) ## UBS_N Roche_Holding Nestle_PS Novartis_N ## UBS_N TRUE TRUE TRUE TRUE ## Roche_Holding TRUE TRUE TRUE TRUE ## Nestle_PS TRUE TRUE TRUE TRUE ## Novartis_N TRUE TRUE TRUE TRUE As we can see, both are identical. Another option is to look directly at the Eigendecomposition of the vectors. Through this method, we understand that the Cholesky decomposition is equal to the matrix multiplication of the eigenvectors with the diagonal entries of the eigenmatrix and with the transposed eigenvectors: \\[ A_{Chol} = V\\lambda^{-\\frac{1}{2}}V^T \\] Let’s see this: # Eigendecomposition for the covariance matrix ## Get the eigenvalues and eigenvectors eig &lt;- eigen(cov) ## Get the matrix of eigenvectors V &lt;- eig$vectors ## Get the diagonal entries of the eigenmatrix Lambda &lt;- diag(pmax(eig$values, 0)) # Based on this, we can recreate the Cholesky decomposition through the following formula. ## Note that Cholesky is just the A.eig &lt;- V %*% sqrt(Lambda) %*% t(V) Sigma.eig &lt;- A.eig %*% t(A.eig) # Check if both are the same round(Sigma.eig, 4) == round(Sigma,4) ## UBS_N Roche_Holding Nestle_PS Novartis_N ## UBS_N TRUE TRUE TRUE TRUE ## Roche_Holding TRUE TRUE TRUE TRUE ## Nestle_PS TRUE TRUE TRUE TRUE ## Novartis_N TRUE TRUE TRUE TRUE round(Sigma,4) == round(cov, 4) ## UBS_N Roche_Holding Nestle_PS Novartis_N ## UBS_N TRUE TRUE TRUE TRUE ## Roche_Holding TRUE TRUE TRUE TRUE ## Nestle_PS TRUE TRUE TRUE TRUE ## Novartis_N TRUE TRUE TRUE TRUE As we can see, both are identical. 2.6.2 Linear Functions of random variables As with the bivariate case, we can find the expectation and the variance of a linear combination of random variables. Remember that a linear combination is just a weighted average of random variables (=RV). 2.6.2.1 Linear function of a single RV We define a linear combination as follows. If X is a RV and a and b are constants, then: \\[ E(aX + b) = aE(X) + b \\] Further, the variance is given as: \\[ Var(aX + b) = a^2Var(X) \\] and its standard deviation is given as: \\[ \\sigma(aX + b) = |a|\\sigma(X) \\] 2.6.2.2 Function of a linear combination of two RVs If X and Y and RVs and \\(w_1\\) and \\(w_2\\) constants, then: \\[ E(w_1X + w_2Y) = w_1E(X) + w_2E(Y) \\] and the variance is given by: \\[ Var(w_1X + w_2Y) = w_1^2Var(X) + w_2^2Var(Y) + 2w_1w_2Cov(X,Y) \\] which can also be expressed in matrix algebra as: \\[ Var(w_1X + w_2Y) = \\begin{pmatrix} w_1 &amp; w_2 \\end{pmatrix} \\begin{pmatrix} Var(X) &amp; Cov(X,Y) \\\\ Cov(X,Y) &amp; Var(Y) \\end{pmatrix} \\begin{pmatrix} w_1 \\\\ w_2 \\end{pmatrix} \\] This is the same principle as the re-formulation earlier on the covariance and correlation matrix. This is because the formula generalises well to the N specific case. 2.6.2.3 Function of a linear combination of N RVs If we have N RVs, then we also have N weights, given as \\((w_1,\\dots,w_N)^T\\), whereas \\(\\sum_{i=1}^Nw_i =1\\). In this case, the expected value is: \\[ E(w^T\\textbf{X}) = w^TE[\\textbf{X}] \\] Furthermore, the variance is calculated as: \\[ Var(w^T\\textbf{X}) = \\sum_{i=1}^N\\sum_{j=1}^Nw_iw_jCov(X_i, X_j) \\] in matrix notation, this is given as: \\[ Var(w^T\\textbf{X}) = w^TCov(\\textbf{X})w \\] We show the approach for three assets and show the proof for the general case in the linear algebra part. However, note that this is identical to the formulation for the bivariate case. The only difference is that there are now N elements in the vector instead of 2. 2.6.3 Central properties of multivariate distributions 2.6.3.1 Variance of a linear combination of random vectors Another important property are transformations with linear combinations. That is, we add an n \\(\\times\\) 1 vector called \\(\\textbf{a}\\) = \\((a_1, \\dots, a_n)\\) to the random vector \\(\\textbf{X}\\). If we assume that a random variables \\(\\textbf{Y}\\) exists which is a of the form \\(Y = \\textbf{a}&#39;\\textbf{X} = a_1X_1 + \\dots + a_nX_n\\), then the expected values is: \\[ \\mu_y = E[Y] = E[\\textbf{a}&#39;\\textbf{X}] = \\textbf{a}&#39;E[\\textbf{X}] = \\textbf{a}&#39;\\mu \\] and the corresponding variance is: \\[ var(Y) = var(\\textbf{a}&#39;\\textbf{X}) = E[(\\textbf{a}&#39;\\textbf{X} - \\textbf{a}&#39;\\mu)^2] = E[(\\textbf{a}&#39;(\\textbf{X} - \\mu))^2] \\] We can now use a simple definition from matrix algebra. If z is a scalar, then we know that \\(z&#39;z = zz&#39; = z^2\\). We know that \\(\\textbf{a}&#39;(\\textbf{X} - \\mu)\\) is a scalar, as such we can compute the variance as: \\[ \\begin{align*} var(Y) &amp;= E[z^2] = E[z \\cdot z&#39;] \\\\ &amp;= E[\\textbf{a}&#39;(\\textbf{X} - \\mu)\\textbf{a}(\\textbf{X} - \\mu)&#39;] \\\\ &amp;= \\textbf{a}&#39;E[(\\textbf{X} - \\mu)(\\textbf{X} - \\mu)&#39;]\\textbf{a} \\\\ &amp;= \\textbf{a}&#39;cov(\\textbf{X})\\textbf{a} \\\\ &amp;= \\textbf{a}&#39;\\scriptstyle\\sum\\textstyle\\textbf{a} \\end{align*} \\] Consequently, we know that the variance of a linear combination of a random variable and a constant is just the inverse of the constant multiplied with the covariance of the random variable multiplied with the constant. 2.6.3.2 Covariance between linear combination of two random vectors If we consider two different constants, \\(\\textbf{a}\\) = \\((a_1, \\dots, a_n)\\) as well as \\(\\textbf{b}\\) = \\((b_1, \\dots, b_n)\\) to the random vector \\(\\textbf{X}\\), and \\(Y = \\textbf{a}&#39;\\textbf{X} = a_1X_1 + \\dots + a_nX_n\\) as well as \\(Z = \\textbf{b}&#39;\\textbf{X} = b_1X_1 + \\dots + b_nX_n\\), we can write the covariance in matrix notation as: \\[ \\begin{align*} cov(Y,Z) &amp;= E[(Y - E[Y])(Z-E[Z])] \\\\ cov(\\textbf{a}&#39;\\textbf{X}, \\textbf{b}&#39;\\textbf{X}) &amp;= E[(\\textbf{a}&#39;\\textbf{X} - E[\\textbf{a}&#39;\\textbf{X}])(\\textbf{b}&#39;\\textbf{X}-E[\\textbf{b}&#39;\\textbf{X}])] \\\\ &amp;= E[(\\textbf{a}&#39;\\textbf{X} - \\textbf{a}&#39;\\mu])(\\textbf{b}&#39;\\textbf{X}-\\textbf{b}&#39;\\mu])] \\\\ &amp;= E[\\textbf{a}&#39;(\\textbf{X} - \\mu)\\textbf{b}&#39;(\\textbf{X} - \\mu)] \\\\ &amp;= \\textbf{a}&#39;E[(\\textbf{X} - \\mu)(\\textbf{X} - \\mu)&#39;]\\textbf{b}&#39;\\\\ &amp;= \\textbf{a}&#39;\\scriptstyle\\sum\\textstyle\\textbf{b}&#39; \\end{align*} \\] 2.6.4 The Scatterplot Matrix A scatterplot matrix plots the combination of scatterplots for each pair of assets. It is useful to find nonlinear relations between some factors, as well as the joint behavior of extreme values in a distribution. In essence, we can define a scatterplot matrix as: ggpairs(as.data.frame(ret_bf)[,1:4]) ## plot: [1,1] [======&gt;--------------------------------------------------------------------------------------------------------------] 6% est: 0s ## plot: [1,2] [==============&gt;------------------------------------------------------------------------------------------------------] 12% est: 0s ## plot: [1,3] [=====================&gt;-----------------------------------------------------------------------------------------------] 19% est: 0s ## plot: [1,4] [============================&gt;----------------------------------------------------------------------------------------] 25% est: 0s ## plot: [2,1] [====================================&gt;--------------------------------------------------------------------------------] 31% est: 0s ## plot: [2,2] [===========================================&gt;-------------------------------------------------------------------------] 38% est: 0s ## plot: [2,3] [==================================================&gt;------------------------------------------------------------------] 44% est: 0s ## plot: [2,4] [=========================================================&gt;-----------------------------------------------------------] 50% est: 0s ## plot: [3,1] [=================================================================&gt;---------------------------------------------------] 56% est: 0s ## plot: [3,2] [========================================================================&gt;--------------------------------------------] 62% est: 0s ## plot: [3,3] [===============================================================================&gt;-------------------------------------] 69% est: 0s ## plot: [3,4] [=======================================================================================&gt;-----------------------------] 75% est: 0s ## plot: [4,1] [==============================================================================================&gt;----------------------] 81% est: 0s ## plot: [4,2] [=====================================================================================================&gt;---------------] 88% est: 0s ## plot: [4,3] [=============================================================================================================&gt;-------] 94% est: 0s ## plot: [4,4] [=====================================================================================================================]100% est: 0s Here, we can encounter three things: The lower triangle shows the scatterplots The diagonal matrix the return distributions The upper triangle the correlations This is quite handy as it allows us to quickly check on all different characteristics of a multivariate distribution. Importantly, we can start checking for tail dependece. This occurs if negative and positive returns occur at the same periods for two assets. In this case, we have a positive, linear relationship. This increases the risk as two are highly correlated. In our case, Roche and Novartis have the highest correlation coefficient and thus also the highest linear relationship. This is to be expected, given that both are in the pharmaceutical industry. 2.6.5 Multivariate Normal Distribution We say that \\(\\textbf{X}\\) has a multivariate normal distribution if: \\[ \\textbf{X} = \\mu + A\\textbf{Z} \\] whereas \\(\\textbf{Z} = (Z_1, \\dots, Z_N)&#39;\\) is is a vector of IID univariate standard normal RVs. As in the univariate case we assume that the distribution is defined by its fist two moments. As such: \\(\\textbf{X} \\sim N(\\mu, \\Sigma)\\). In that case, we can transform each univariate IID RV into a multivariate normal RV through the decomposition above. The RV \\(\\textbf{X}\\) has an N-dimensional multivariate normal distribution with mean \\(\\mu\\) and covariance matrix \\(\\Sigma\\) if its probability density function is equal to: \\[ f(\\textbf{X}|\\mu, \\Sigma) = [\\frac{1}{(2\\pi)^{N/2}|\\Sigma|^{1/2}}]exp(-\\frac{1}{2}(\\textbf{X}-\\mu)^T\\Sigma^{-1}(\\textbf{X}-\\mu)) \\] This is quite similar to the univariate normal distribution PDF. The only difference is that, instead of one RV, we now have N RVs. As such, with the function above, we create a distribution of a multivariate normal RV from a univariate IID RV. The quantity in square brackets is a constant that normalizes the density so that it integrates to 1. We further say that \\((\\textbf{X}-\\mu)^T\\Sigma^{-1}(\\textbf{X}-\\mu) = c\\). In each multivariate normal distribution, we can prove that for every set of constants \\(\\textbf{c}\\) the weighted average \\(\\textbf{c}^T\\textbf{X}\\) has a normal distribution with mean\\(\\textbf{c}^T\\mu\\) and variance \\(\\textbf{c}^T\\Sigma\\textbf{c}\\). We can simulate a multivariate normal distribution with the following algorithm: # Create the Cholesky form for a covariance matrix A &lt;- matrix(c(4, 0, 2, 2), ncol = 2, byrow = TRUE) Sigma &lt;- A %*% t(A) # Define means and observations means &lt;- c(0, 0) n &lt;- 1000 Based on this, we can now create the distribution x &lt;- rmvnorm(n = n, mean = means, sigma = Sigma) d_x &lt;- data.frame(x) We can now plot either a 2-Dimensional or 3-Dimensional Plot for the simulation. # Plot the 2-Dimensional Eliptic plot p2 &lt;- ggplot(d_x, aes(x = X1, y = X2)) + geom_point(alpha = .5) + geom_density_2d() + ggtitle(&quot;Contour Plots: Simulation of a bivariate normal distribution&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) p2 We can also create a 3D perspectives plot. # Simple plotly plot dens &lt;- kde2d(d_x$X1, d_x$X2) plot_ly(x = dens$x, y = dens$y, z = dens$z) %&gt;% add_surface() In this case, \\(Z = f(x,y)\\) is the joint density of the two random variables x and y. Higher values indicate more overlap. This is the reason for the functional form of the bivariate normal distribution. This is identical to the densities we observe in the interior elipses of the first plot. The more centered, the higher the density. As such, the larger the value of z. In essence, if one would slice this distribution, one would obtain the same shape as for a univariate distribution. This shows that, as with the univariate distribution, when drawing N IID observations, the observations tend to behave according to a Gaussian distribution and thus follow a symmetric, unimodal mean. This is intuitive, and it proves that a multivariate normal distribution appears to follow the same theoretical characteristics as a univariate distribution. 2.6.5.1 Fitting a multivariate distribution onto actual data The reason we use multivariate distributions is to model multivariate relationships. That is, we attempt to understand whether data of a sample can be represented by a parametric function, in this case a normal distribution. Consequently, we may want to fit the data to the normal distribution to understand if they can represent the behaviour well. In a bivariate case, we are even able to plot the underlying relationship then. Let’s do so in the following example on the Big Four companies. # We can fit a multivariate normal distribution to X and simulate from it ## Get mean vector and covariance matrix mu &lt;- colMeans(ret_bf) Sigma &lt;- cov(ret_bf) P &lt;- cor(ret_bf) ## Get the sample size n &lt;- nrow(ret_bf) ## Get the samples scaled to the multivariate distribution - This is the transformed data. set.seed(1996) X.norm &lt;- as.data.frame(rNorm(n, loc = mu, scale = Sigma)) colnames(X.norm) &lt;- c(&quot;UBS_N_MV&quot;, &quot;Roche_Holding_MV&quot;, &quot;Nestle_PS_MV&quot;, &quot;Novartis_N_MV&quot;) ## Now, we can plot the eliptic distribution again. To do so, we take two compannies, Nestle and Roche, and plot both their actual and modelled transformations. df_MV_real &lt;- as.data.frame(cbind(ret_bf$Roche_Holding, ret_bf$Nestle_PS, X.norm$Roche_Holding_MV, X.norm$Nestle_PS_MV)) colnames(df_MV_real) &lt;- c(&quot;Roche_Holding&quot;, &quot;Nestle_PS&quot;, &quot;Roche_Holding_MV&quot;, &quot;Nestle_PS_MV&quot;) # Plot the 2-Dimensional Eliptic plot df_MV_real_plot &lt;- df_MV_real %&gt;% ggplot(aes(x = Roche_Holding, y = Nestle_PS)) + geom_point(alpha = .8, col = &quot;lightsteelblue3&quot;) + geom_density_2d(color = &quot;lightsteelblue&quot;) + geom_point(aes(x = Roche_Holding_MV, y = Nestle_PS_MV), alpha = .5, color = &quot;violetred4&quot;) + ggtitle(&quot;Contour Plots: Roche and Nestle Returns - Simulation (Pink) and Actual (Blue)&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) df_MV_real_plot As we can see, we now plotted the actual and simulated observations for the Roche and Nestle Returns. The contour lines are the elipsis for the actual observations. As we can see, there appears to be some overlap, but this is limited. 2.6.5.2 Properties of the multivariate normal distribution The assumption of multivariate normality facilitates many useful probability calculations. If the returns on a set of assets have a multivariate normal distribution, then the return on any portfolio formed from these assets will be normally distributed. This is because the return on the portfolio is the weighted average of the returns on the assets. Let’s quickly show the mean and variance property proofs. 2.6.5.2.1 Proof of mean and variance To show the properties, we define: n random variables \\(\\textbf{X_1}, \\dots, \\textbf{X_n}\\) that are \\(\\textbf{jointly normally distributed}\\). Then, we have n \\(\\times\\) 1 vectors \\(\\textbf{X}\\) = \\((X_1,\\dots,X_n)&#39;\\), \\(\\textbf{x}\\) = \\((x_1,\\dots,x_n)&#39;\\) as well as \\(\\mu = (\\mu_1,\\dots,\\mu_n)&#39;\\) and \\[ \\scriptstyle\\sum_{n \\times n} = \\begin{bmatrix} \\sigma_1^2 &amp; \\sigma_{12} &amp; \\dots &amp; \\sigma_{1n}\\\\ \\sigma_{12} &amp; \\sigma_2^2 &amp; \\dots &amp; \\sigma_{2n}\\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\sigma_{1n} &amp; \\sigma_{2n} &amp; \\dots &amp; \\sigma_n^2 \\end{bmatrix} \\] Under these properties, we show now that \\(\\textbf{X} \\sim N(\\textstyle\\mu, \\scriptstyle\\Sigma)\\), which means that the random vector \\(\\textbf{X}\\) has a \\(\\mu\\) and covariance matrix \\(\\scriptstyle \\Sigma\\), as we defined earlier. 2.6.5.2.2 Linear Combinations of Multivariate Normal Distributions Any linear combination of a multivariate normal random vectors are also multivariate normal. As such, it can be shown that: \\[ B\\textbf{X} + b \\sim N(B\\mu + B\\Sigma B&#39;) \\] This is a fact which is often used in risk management practices. Furthermore, it can be shown that \\(\\textbf{X}\\) is multivariate normal only if \\(\\textbf{a&#39;}\\textbf{X}\\) is univariate normal for all vectors \\(\\textbf{a}\\). 2.6.5.2.3 Marginal Distributions The marginal distributions of \\(\\textbf{X}\\) are also multivariate normal, given that \\(\\textbf{X} \\sim N(\\mu, \\Sigma)\\). 2.6.5.2.4 Conditional Distributions The conditional distribution of \\(\\textbf{X_2}\\) given \\(\\textbf{X_1}\\) and vice versa is also multivariate normal given that \\(\\Sigma\\) is positive definite. As an example, assume that: \\[ \\mu = \\begin{pmatrix} \\mu_1 \\\\ \\mu_2 \\end{pmatrix}, \\Sigma = \\begin{pmatrix} \\Sigma_{11} &amp; \\Sigma_{12} \\\\ \\Sigma_{21} &amp; \\Sigma_{22} \\end{pmatrix} \\] In this case, we understand that \\[ X_2 | X_1 = x_1 \\sim N(\\mu_{2.1}, \\Sigma_{22.1}) \\] whereas: \\[ \\mu_{2.1} = \\mu_2 + \\Sigma_{21}\\Sigma_{11}^{-1}(x_1-\\mu_1) \\] and \\[ \\Sigma_{22.1} = \\Sigma_{22} - \\Sigma_{21}\\Sigma_{11}^{-1}\\Sigma_{12} \\] 2.6.5.2.5 Quadratic Form We can say that the quadratic form of a multivariate normal random variable follows: \\[ (\\textbf{X} - \\mu)&#39;\\Sigma^{-1}(\\textbf{X} - \\mu) \\sim \\chi^2_d \\] a chi-squared distribution with d DOF. This is because \\(X\\times X = (\\textbf{X} - \\mu)&#39;\\Sigma^{-1/2} \\times (\\textbf{X} - \\mu)&#39;\\Sigma^{-1/2} = \\textbf{Z&#39;}\\textbf{Z} = \\chi^2_d\\) 2.6.5.2.6 Standard Random Variables in a Multivatiate Normal Distribution We can show that under the assumptions of IID (independently and identically distributed) standard normal random variables, we can create a random vector with the properties of \\(\\textbf{X} \\sim N(\\textstyle\\mu, \\scriptstyle\\Sigma)\\). For that, let’s assume that \\(\\textbf{Z} = (Z_1, \\dots, Z_n)&#39;\\). In this case, \\(\\textbf{Z} \\sim N(0, I_n)\\) where \\(I_n\\) denotes the identity matrix. Given we can create with the desired properties, if we define \\[ \\textbf{X} = \\mu + \\Sigma^{1/2}\\textstyle\\textbf{Z} \\] where \\(\\Sigma^{1/2}\\) is the upper-triangle matrix defined previously where \\(\\scriptstyle\\Sigma = \\Sigma^{1/2}&#39;\\Sigma^{1/2}\\) . In that case: \\[ E[\\textbf{X}] = E[\\mu + \\scriptstyle\\Sigma^{1/2}\\textstyle\\textbf{Z}] = \\mu + \\scriptstyle\\Sigma^{1/2}\\textstyle E[\\textbf{Z}] \\mu + \\scriptstyle\\Sigma^{1/2}\\textstyle E[\\textbf{0}] = \\mu \\] and: \\[ \\begin{align*} var(\\textbf{X}) &amp;= E[\\textbf{X} - E[\\textbf{X}]]\\\\ &amp;= E[\\mu + \\scriptstyle\\Sigma^{1/2}\\textstyle\\textbf{Z} - \\mu] \\\\ &amp;= E[\\scriptstyle\\Sigma^{1/2}\\textstyle\\textbf{Z}] \\\\ &amp;= var(\\scriptstyle\\Sigma^{1/2}\\textstyle\\textbf{Z}) \\\\ &amp;= \\scriptstyle\\sum^{1/2}&#39;var(\\textstyle\\textbf{Z})\\scriptstyle\\sum^{1/2}\\\\ &amp;= \\scriptstyle\\sum^{1/2}&#39;I_n\\scriptstyle\\sum^{1/2} \\\\ &amp;= \\scriptstyle\\sum \\end{align*} \\] Thus, \\(\\textbf{X} \\sim N(\\mu, \\Sigma)\\). Let’s look at an example. We can simulate the that \\(\\textbf{X} \\sim N(\\mu, \\scriptstyle\\sum)\\) where \\(\\mu = (1,1)&#39;\\) and \\[ \\scriptstyle\\sum = \\textstyle \\begin{bmatrix} 1 &amp; 1 \\\\ 1 &amp; 3 \\end{bmatrix} \\] mu = c(1,1) # Specify the mu vector sigma1 = 1 sigma2 = 2 # Specify both standard deviations rho12 = 0.35 # Specify the correlation coefficient sigma12 = sigma1*sigma2*rho12 # Define the covariance Sigma = matrix(c(sigma1^2, sigma12, sigma12, sigma2^2), 2, 2, byrow = TRUE) # Create the covariance matrix Sigma_0.5 = chol(Sigma) # the Cholesky factorization of the covariance matrix to only get the upper-triangular form n = 2 set.seed(123) Z = rnorm(n) # Compute the random variable Z ~ N(mu, I_2) X = mu * Sigma_0.5%*%Z # Compute X from the of 2 iid standard normal random variables X ## [,1] ## [1,] -0.7215999 ## [2,] -0.4312374 Now, the vector stems from a vector of IID standard normal random variables and has the properties of (is proportional to) \\(\\mu\\) and \\(\\Sigma\\) as first two moments (mean and variance). 2.6.5.3 Testing Multivariate Normality There are two types to test the multivariate normality. 2.6.5.3.1 Univariate Tests We understand that if \\(\\textbf{X}\\) are IID multivariate normal, then each univariate sample of the observations of the j’th components \\(\\X_{1,j}, \\dots, X_{n,j}\\) mus be IID univariate normal. This can be graphically assessed by plotting a QQ-Plot of each of the regressor variables against a standard normal reference distribution. For instance, let’s do this for the four individual stock returns. a &lt;- ret_bf %&gt;% ggplot(aes(sample = UBS_N)) + stat_qq(fill = &quot;black&quot;, color = &quot;goldenrod&quot;) + stat_qq_line() + ggtitle(&quot;Q-Q Plot of UBS Returns&quot; ) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) b &lt;- ret_bf %&gt;% ggplot(aes(sample = Roche_Holding)) + stat_qq(fill = &quot;black&quot;, color = &quot;dodgerblue4&quot;) + stat_qq_line() + ggtitle(&quot;Q-Q Plot of Roche Returns&quot; ) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) c &lt;- ret_bf %&gt;% ggplot(aes(sample = Novartis_N)) + stat_qq(fill = &quot;black&quot;, color = &quot;lightsteelblue3&quot;) + stat_qq_line() + ggtitle(&quot;Q-Q Plot of Novartis Returns&quot; ) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) d &lt;- ret_bf %&gt;% ggplot(aes(sample = Nestle_PS)) + stat_qq(fill = &quot;black&quot;, color = &quot;violetred&quot;) + stat_qq_line() + ggtitle(&quot;Q-Q Plot of Nestle Returns&quot; ) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) a + b + c + d + plot_layout(ncol = 2) 2.6.5.3.2 Multivariate Tests Graphical Tests Within multivariate tests, we need to test the joint normality. This is because we can also have multivariate distributions with normal margins that are not multivariate normal. We do so by using that the quadratic form of a multivariate normal random variable has a chi-squared distribution, as we just showed. Doing so, we again plot QQ-Plots. However, we first estimate \\(\\mu\\) and \\(\\Sigma\\) with the standard estimator formulas to consturct: \\[ D_i^2 = (\\textbf{X}_i - \\bar{\\textbf{X}})&#39;S^{-1}(\\textbf{X}_i - \\bar{\\textbf{X}}) \\] whereas \\(\\textbf{X}\\) and S are the sample mean and covariance matrix. In this case, we assume that \\(\\textbf{D}^2\\) to be an IID sample from a \\(\\chi^2_d\\) distribution. We then construct QQ-Plots where we plot the D’s against this distribution. Numerical Tests Another way is through numerical tests. These are conducted based on the skewness and kurtosis of the distribution. Suppose we define the skew as: \\[ b_d = \\frac{1}{n^2}\\sum^n\\sum^n_{j=1}D_{ij}^3 \\] as well as the kurtosis as: \\[ k_d = \\frac{1}{n}\\sum^n_{i=1}D_i^4 \\] whereas the \\(D_i = (\\textbf{X}_i - \\bar{\\textbf{X}})&#39;S^{-1}(\\textbf{X}_i - \\bar{\\textbf{X}})\\) is called Mahalanobis distance between \\(\\textbf{X}_i\\) and \\(\\bar{\\textbf{X}}\\) and \\(D_{ij} = (\\textbf{X}_i - \\bar{\\textbf{X}})&#39;\\S^{-1}(\\textbf{X}_j - \\bar{\\textbf{X}})\\) is the Mahalanobis angle between \\(\\textbf{X}_i - \\bar{\\textbf{X}}\\) and \\(\\textbf{X}_j - \\bar{\\textbf{X}}\\). In that case, we can test the hypothesis: for the Skewness: \\[ \\frac{1}{6}nb_d \\sim \\chi^2_{d(d+1)(d+2)/6} \\] and for the Kurtosis \\[ \\frac{k_d - d(d+2)}{\\sqrt{8d(d+2)/n}} \\sim N(0,1) \\] Test Examples Numerical Examples We can conduct both tests. Let’s start with the formal tests. Therein, we use four different tests which define the individual angles and distances. We start with a test for marginal normality. If the All p-values are far lower than 0.05, we state the data is not normally distributed. ## tests of marginal normality round(apply(ret_bf, 2, function(x) shapiro.test(x)$p.value),4) ## UBS_N Roche_Holding Nestle_PS Novartis_N ## 0.0000 0.1379 0.0105 0.0270 Apparently, UBS appears not to be normally distributed. Secondly, we test the squared Mahalanobis distances as being chi-squared distributed. ## Anderson--Darling test of squared Mahalanobis distances being chi_d^2 maha2_test(ret_bf) ## ## Anderson-Darling GoF Test ## ## data: D2 and pchisq ## AD = Inf, p-value = 2.069e-06 ## alternative hypothesis: NA Apparently, we reject the null hypothesis that it follows a chi-squared distribution. Third, we test the Mardia’s kurtosis test of joint normality based on squared Mahalanobis distances ## Mardia&#39;s kurtosis test of joint normality based on squared Mahalanobis distances mardia_test(ret_bf) ## ## Mardia&#39;s kurtosis test (computed with method = &#39;direct&#39;) ## ## data: ret_bf ## statistic = 330.39, p-value &lt; 2.2e-16 ## alternative hypothesis: two-sided Also here, the p-value is sufficiently low to reject the Null that the Kurtosis allows to assume a joint normality based on the distance. Lastly, we test the Mardia’s skewness test of joint normality based on Mahalanobis angles ## Mardia&#39;s skewness test of joint normality based on Mahalanobis angles mardia_test(ret_bf, type = &quot;skewness&quot;) ## ## Mardia&#39;s skewness test (computed with method = &#39;direct&#39;) ## ## data: ret_bf ## statistic = 12768, p-value &lt; 2.2e-16 ## alternative hypothesis: one-sided Also this p-value is sufficiently low to reject the Null Hypothesis that the skewness shows joint normality. Graphical Examples Secondly, we can graphically test if there is a joint normality of the variables. First, we have a visual assessment of the log returns. # visual assessment, this can also be done by the ggpairs function. pairs(as.matrix(ret_bf), gap = 0, pch = &quot;.&quot;) Next, we can conduct the squared Mahalanobis distances graphical test D2.d &lt;- mahalanobis(ret_bf, center = colMeans(ret_bf), cov = cov(ret_bf)) qq_plot(D2.d, FUN = function(p) qchisq(p, df = 4)) We can clearly see the departure from the theoretical chi-squared quantiles. As such, we can reject the Null of joint normality. Under the null hypothesis of multivariate normality these should be roughly linear. 2.6.6 Normal Mixture Models Both the numerical as well as the graphical tests showed that we need to reject the Null Hypothesis of Joint Normal Distributions. In essence, this shows that the multivariate normal distribution is not a good measure of real returns. This is due to three main caveats of this distribution: The tails of the univariate marginal distributions give too little weight to extreme events The joint tails do not assign sufficient weight to joint extremes The distribution is too symmetric (elliptic) Due to these caveats, we need to find different models which are able to address the issues under consideration. These models are also called Normal Mixture Models because they generalise the multivariate normal models. The crucial idea of Normal Mixture Models is that we introduce some randomness into the covaraiance matrix and mean vector of the normal distribution. This is done through a positive mixing variable W. Let’s quickly define the property. Any random vector \\(\\textbf{X}\\) has a multivariate normal variance mixture if it follows: \\[ \\textbf{X} = \\mu + \\sqrt{W}A\\textbf{Z} \\] whereas \\(W \\geq 0\\) and \\(\\textbf{Z) \\sim N(0,I)\\). This formula is quite identical to the multivariate normal distribution. The only difference is that we introduce W as a randomness. Such distributions are called variance mixtures. Therein, we condition on the RV W. We thus observe that \\(\\textbf{X}|W \\sim N(\\mu, w\\Sigma\\), where \\(\\Sigma\\) is the Cholesky Decomposition. The distribution of X therein is a composite constructed through a set of multivariate normal distributions with identical mean vector and covariance matrix and multiply it with a constant w. We get the mixture by drawing randomly the mean and covariance from the distribution according to the weight set W. In the context of factor returns, W represents a macroeconomic shock which occurs at t and which has an information that impacts the entire set of RVs. 2.6.6.1 Properties of Mixture Models As with the previous models, when we have a positive definite covariance matrix with full rank, we can calculate the expected value and covariance as: \\[ E(\\textbf{X}) = E(\\mu + \\sqrt{W}A\\textbf{Z}) = \\mu + E(\\sqrt{W})AE(\\textbf{Z}) = \\mu \\] and: \\[ cov(\\textbf{X}) = cov(\\mu + \\sqrt{W}A\\textbf{Z}) = E(( \\sqrt{W}A\\textbf{Z})&#39;(\\sqrt{W}A\\textbf{Z})) = E(W)AE(Z&#39;Z)A&#39; = E(W)AA&#39; \\] Assuming the PD matrix of \\(\\Sigma\\), we can derive the PDF of the normal variance mixture distribution as: \\[ f(\\textbf{X}) = \\int\\frac{w^{-d/2}}{(2\\pi)^{d/2}|\\Sigma|^{1/2}}exp(-\\frac{(\\textbf{X} - \\mu)&#39;\\Sigma^{-1}(\\textbf{X} - \\mu)}{2w})dH(w) \\] 2.6.6.2 Multivariate t-distribution As with the normal distribution, we can fit the t-distribution to model asset returns. The RV \\(\\textbf{X}\\) has a multivariate t-distribution \\(t_v(\\mu, \\Lambda)\\), if: \\[ \\textbf{X} = \\mu + \\sqrt{\\frac{\\nu}{W}}\\textbf{Z} \\] where W is chi-squared distributed with ν degrees of freedom and \\(\\textbf{Z}\\) is \\(N_d(0, \\Lambda)\\) distributed. Thus, the multivariate t-distribution is a continuous scale mixture of multivariate normal distributions. Extreme values of X occur when W is near zero. In this case, we define the covariance matrix as: \\[ \\Sigma = \\frac{\\nu}{\\nu-2}\\Lambda \\] If we assume this covariance matrix, then we can assume that, if we have \\(\\textbf{w}\\) as a vector of weights, that \\(\\textbf{w}\\textbf{X}\\) has a univariate t-distribution with mean \\(\\textbf{w}^T\\textbf{X}\\) and variance \\(\\textbf{w}^T\\Sigma\\textbf{w}\\). As such, if the returns on the assets have a multivariate t-distribution, then the return on the portfolio will have a univariate t-distribution. 2.6.6.2.1 Fitting the multivariate t-distribution with MLE In order to fit a multivariate t-distribution onto data, we use the cov.trob function of the MASS package. Doing so, we follow two steps: Estimate \\(\\nu\\) through a log-likelihood and find the value \\(\\hat\\nu\\) which maximises this likelihood Compute the MLE of \\(\\mu\\) and \\(\\Lambda\\) with the \\(\\hat\\nu\\) library(mnormt) # Define potential DOF values dof = seq(5.25, 8.75, 0.01) n = length(dof) df_log_likeli = rep(0,n) # Run for each value: for(i in 1:n){ fit = cov.trob(ret_bf, nu = dof) df_log_likeli[i] = sum(log(dmt(ret_bf, mean = fit$center, S = fit$cov, df = dof[i]))) } ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (1 + p/nu): longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in sqrt(w/sum(w)) * X: longer object length is not a multiple of shorter object length ## Warning in wt * (nu + p): longer object length is not a multiple of shorter object length ## Warning in nu + Q: longer object length is not a multiple of shorter object length ## Warning in w * x: longer object length is not a multiple of shorter object length ## Warning in cov.trob(ret_bf, nu = dof): Probable convergence failure ## Warning in sqrt(w) * X: longer object length is not a multiple of shorter object length # The maximum value of the log-likelihood nu and the respective AIC aic_t=-max(2*df_log_likeli)+ 2*(4+10+1)+64000 # Get the maximum value z1 = (2 * df_log_likeli &gt; 2 * max(df_log_likeli) - qchisq(0.95, 1)) dof_max &lt;- dof[89] # Run the program again with the maximising DOF fit_max = cov.trob(ret_bf, nu = dof[89]) # Get the respective mean and covariance values round(fit_max$center,4) ## UBS_N Roche_Holding Nestle_PS Novartis_N ## 0.0026 0.0062 0.0069 0.0040 round(fit_max$cov, 4) ## UBS_N Roche_Holding Nestle_PS Novartis_N ## UBS_N 0.0061 0.0011 0.0006 0.0009 ## Roche_Holding 0.0011 0.0023 0.0006 0.0011 ## Nestle_PS 0.0006 0.0006 0.0013 0.0008 ## Novartis_N 0.0009 0.0011 0.0008 0.0019 aic_t ## [1] 60568.8 Based on this, we fitted a t-distribution on the multivariate RV and obtained its MLE for the mean and covariance matrix. We can go a step further and plot the simulations of the multivariate t-distribution against the actual observations, as we have done it for the multivariate normal distribution. Even further, it would be interesting to compare both the multivariate and multi-t distributions in their fitting ability. ## Fitting a multivariate t distribution to X fit &lt;- fitStudent(ret_bf) # fit a multivariate t distribution X.t &lt;- as.data.frame(rStudent(290, df = fit$df, loc = fit$loc, scale = fit$scale)) ## Now, we can plot the eliptic distribution again. To do so, we take two compannies, Nestle and Roche, and plot both their actual and modelled transformations. df_MV_real_N_t &lt;- as.data.frame(cbind(ret_bf$Roche_Holding, ret_bf$Nestle_PS, X.norm$Roche_Holding_MV, X.norm$Nestle_PS_MV, X.t$Roche_Holding, X.t$Nestle_PS)) colnames(df_MV_real_N_t) &lt;- c(&quot;Roche_Holding&quot;, &quot;Nestle_PS&quot;, &quot;Roche_Holding_MV_N&quot;, &quot;Nestle_PS_MV_N&quot;, &quot;Roche_Holding_MV_t&quot;, &quot;Nestle_PS_MV_t&quot;) # Plot the 2-Dimensional Eliptic plot df_MV_real_N_t_plot &lt;- df_MV_real_N_t %&gt;% ggplot() + geom_point(aes(x = Roche_Holding, y = Nestle_PS, color = &quot;Actual Obs&quot;), alpha = .8) + geom_density_2d(aes(x = Roche_Holding, y = Nestle_PS), color = &quot;lightsteelblue&quot;) + geom_point(aes(x = Roche_Holding_MV_N, y = Nestle_PS_MV_N, color = &quot;Normal Dist&quot;), alpha = .5) + geom_point(aes(x = Roche_Holding_MV_t, y = Nestle_PS_MV_t, color = &quot;T-Dist&quot;), alpha = .5) + ggtitle(&quot;Contour Plots: Roche and Nestle Returns - Simulation and Actual&quot;) + scale_color_manual(values=c(&quot;lightsteelblue3&quot;, &quot;violetred4&quot;,&quot;goldenrod&quot;,&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;dodgerblue4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) df_MV_real_N_t_plot As we can see, the distribution related to student’s t is better equipped to portray the relationship, at least visually speaking. 2.6.6.3 Generalized Hyperbolic Distributions Another form of a mixture model is by taking W as a generalised inverse Gaussian distribution. We can obtain the family of GHD by using mean-variance mixture constructions with the mean specification of: \\[ m(W) = \\mu + W\\gamma \\] For the distribution we assume that \\(W \\sim N^{-}(\\lambda, \\chi, \\psi\\). The GH Distribution received a lot attention in univariate financial modelling, because for each GH it is possible to construct a Lévy process such that the value of the increment of the process over a fixed time interval has that distribution. We will counter these processes in later chapters. The PDF of a GH Mixture is: \\[ f(\\textbf{X}) = c\\frac{K_{\\lambda-(d/2)}(\\sqrt{(\\chi + (\\textbf{X} - \\mu)\\Sigma^{-1}(\\textbf{X} - \\mu))(\\psi + \\gamma&#39;\\Sigma^{-1}\\gamma)})e^{(\\textbf{X} - \\mu)&#39;\\Sigma^{-1}\\gamma}}{(\\sqrt{(\\chi + (\\textbf{X} - \\mu)\\Sigma^{-1}(\\textbf{X} - \\mu))(\\psi + \\gamma&#39;\\Sigma^{-1}\\gamma)}^{(d/2)-\\lambda}} \\] where c is a normalizing constant, given as: \\[ c = \\frac{(\\sqrt{\\chi\\psi})^{-\\lambda}\\psi^\\lambda(\\psi + \\gamma&#39;\\Sigma^{-1}\\gamma)^{(d/2) - \\lambda}}{(2\\pi)&#39;{d/2}|\\Sigma|^{1/2}K_\\lambda(\\sqrt{\\chi\\psi})} \\] We can derive the mean vector and covariance matrix for the GH Mixture models and get the following notion: \\[ \\textbf{X} \\sim GH_d(\\lambda, \\chi, \\psi, \\mu, \\Sigma, \\gamma) \\] The individual greek letters quantify the following: \\(K_\\lambda\\): modified Bessel function of the third kind \\(\\mu\\): Mean vector of returns \\(\\Sigma\\): Covariance Matrix of returns \\(\\lambda\\): Index parameter \\(\\gamma\\): Skewness parameter \\(\\chi, \\psi\\): non-negative constants The PDF gives us that we have a non-elliptical distribution with asymmetric margins. Using that: \\[ E(\\textbf{X}) = \\mu + E(W)\\gamma \\] and \\[ cov(\\textbf{X}) = E(W)\\Sigma + var(W)\\gamma\\gamma&#39; \\] 2.6.6.3.1 Linear Combinationss We can define that each GH class is closed under linear operations. Doing so, we propose that if \\(\\textbf{X} \\sim GH_d(\\lambda, \\chi, \\psi, \\mu, \\Sigma, \\gamma)\\) and \\(\\textbf{X} = B\\textbf{X} + b\\), then \\(\\textbf{Y} \\sim GH_k(\\lambda, \\chi, \\psi, B\\mu + b, B\\SigmaB&#39;, \\gamma)\\) The parameters inherited from the GIG mixing distribution therefore remain un- changed under linear operations. This means, for example, that margins of X are easy to calculat 2.6.6.3.2 Parameterisations The parametiration we know so far is called \\(\\chi-\\psi-\\Sigma-/gamma\\) parametarisation. There are many alternative parametarisations for the GH distributions. We list the most common ones below. They are also known as \\(\\alpha-\\delta-\\trianlg-\\beta\\) parametarization. \\(\\Sigma\\) is usually relabelled \\(\\triangle\\) and has constraint \\(|\\triangle| = 1\\) (due to the identifiability problem) \\(\\gamma\\) is replaced by \\(\\beta\\) such that: \\(\\beta = \\triangle^{-1}\\gamma\\) \\(\\delta = \\sqrt{chi}\\) \\(\\alpha = \\sqrt{\\psi + \\gamma&#39;\\triangle^{-1}\\gamma}\\) Note that in both forms \\(\\lambda, \\mu\\) are common. 2.6.6.3.3 Special Cases of the GH Mixture There are certain special cases of the GH family related to \\(\\lambda\\) and \\(\\gamma\\): \\(\\gamma = 0\\): Symmetric GH Mixture \\(\\lambda = 1\\): multivariate distribution whose univariate margins are one-dimensional hyperbolic distributions. \\(\\lambda = -1/2\\): Normal Inverse Gaussian (NIG) distribution. In the uni- variate case this model has also been used in analyses of return data; its functional form is similar to the hyperbolic distribution but with a slightly heavier tail. \\(\\lambda = -1/2\\nu, \\chi = \\nu, \\psi = 0\\): skewed t distribution 2.6.6.3.4 Comparing the GH Mixture Distributions with the Multivariate Normal Distribution: Fitting to real data For the financial modeling community, especially three forms of the GH Mixture Distributions have found to be successful: The NIG, the Generalised Hyperbolic as well as the (skewed) t-distribution. All three can be given in either a symmetric or asymmetric format. The symmetric format is non-skewed. Skewness is given by \\(\\gamma\\), so if \\(\\gamma = 0\\), we have a symmetric distribution. As such, we can have six different forms of the GH Mixture Distributions: The baseline GH Mixture model: Generalised Hyperbolic Symmetric: \\(\\lambda = 1, \\gamma = 0\\) Generalised Hyperbolic Skewed: \\(\\lambda = 1, \\gamma \\neq 0\\) The individual specifications: NIG Symmetric: \\(\\lambda = -1/2, \\gamma = 0\\) NIG Skewed: \\(\\lambda = -1/2, \\gamma \\neq 0\\) t Symmetric: \\(\\lambda = -1/2, \\chi = \\nu, \\psi = 0, \\gamma = 0\\) t Skewed: \\(\\lambda = -1/2, \\chi = \\nu, \\psi = 0, \\gamma \\neq 0\\) Hyperbolic Symmetric: \\(\\lambda = 1/2(d+1), \\gamma = 0\\) Hyperbolic Skewed: \\(\\lambda = 1/2(d+1), \\gamma \\neq 0\\) Let’s apply each of these specifications to the data on the Big Four companies. Doing so, we will compare the estimates of selected parameters and the value of the log-likelihood at the maximum for each of the companies. We can do so by using the fit. functions below. This is the code to conduct the multivariate stock returns tests. That is, we fit the data onto the four-dimensional return matrix. max.iter &lt;- 1e4 # maximal number of iterations for the fitting procedures ## First, let&#39;s fit the symmetric distributions ### General Hyperbolic (Usual form or &quot;baseline form&quot;) fit_gh_sym &lt;- fit.ghypmv(ret_bf, symmetric = T, nit = max.iter, silent = T) ### The specifications fit_h_sym &lt;- fit.hypmv(ret_bf, symmetric = T, nit = max.iter, silent = T) fit_t_sym &lt;- fit.tmv(ret_bf, symmetric = T, nit = max.iter, silent = T) fit_V_sym &lt;- fit.VGmv(ret_bf, symmetric = T, nit = max.iter, silent = T) fit_NIG_sym &lt;- fit.NIGmv(ret_bf, symmetric = T, nit = max.iter, silent = T) ### The baseline Gauss fit_Gauss &lt;- fit.gaussmv(ret_bf, na.rm = T, save.data = T) ## Now, let&#39;s create the likelihoods as well as a test to see whether each specification model improves compared to the GH model ### Likelihoods likelihoods &lt;- round(c(fit_gh_sym@llh, fit_h_sym@llh, fit_t_sym@llh, fit_V_sym@llh, fit_NIG_sym@llh, fit_Gauss@llh),4) ### Likelihood Ratio tests to see improvements #### H0: The specifications of the Mixture Models are no worse than the Gaussian model ### If the respective value is above 0.05, then we reject the Null and as such they are worse than Gaussian Stat_H_sym &lt;- 1 - pchisq(2*(fit_h_sym@llh - fit_Gauss@llh), 4) Stat_t_sym &lt;- 1 - pchisq(2*(fit_t_sym@llh - fit_Gauss@llh), 4) Stat_V_sym &lt;- 1 - pchisq(2*(fit_V_sym@llh - fit_Gauss@llh), 4) Stat_NIG_sym &lt;- 1 - pchisq(2*(fit_NIG_sym@llh - fit_Gauss@llh), 4) Stat_Gauss_sym &lt;- 1 - pchisq(2*(fit_gh_sym@llh - fit_Gauss@llh), 4) likelihood_tests &lt;- c(Stat_H_sym, Stat_t_sym, Stat_V_sym, Stat_NIG_sym, Stat_Gauss_sym) symmetric_df &lt;- round(rbind(likelihoods, likelihood_tests),6) ## Warning in base::rbind(...): number of columns of result is not a multiple of vector length (arg 2) rownames(symmetric_df) &lt;- c(&quot;log L&quot;, &quot;p-value&quot;) colnames(symmetric_df) &lt;- c(&quot;GH&quot;, &quot;H&quot;, &quot;t&quot;, &quot;V&quot;, &quot;NIG&quot;, &quot;Gauss&quot;) symmetric_df ## GH H t V NIG Gauss ## log L 1747.262 1589.477 1747.262 1632.816 1693.29 1204.569 ## p-value 0.000 0.000 0.000 0.000 0.00 0.000 As we can see, the General Hyperbolic model appears to be the best fitting. Furthermore, we cannot reject that the mixture models are better than the Gaussian model. As such, we see their statistical improvement in model fitting compared to the Gaussian case. ## Do the same for the asymmetric models, but now with GH as baseline ### General Hyperbolic (Usual form or &quot;baseline form&quot;) fit_gh_sym &lt;- fit.ghypmv(ret_bf, symmetric = T, nit = max.iter, silent = T) fit_gh_asym &lt;- fit.ghypmv(ret_bf, symmetric = F, nit = max.iter, silent = T) ### The specifications fit_h_sym &lt;- fit.hypmv(ret_bf, symmetric = F, nit = max.iter, silent = T) fit_t_sym &lt;- fit.tmv(ret_bf, symmetric = F, nit = max.iter, silent = T) fit_V_sym &lt;- fit.VGmv(ret_bf, symmetric = F, nit = max.iter, silent = T) fit_NIG_sym &lt;- fit.NIGmv(ret_bf, symmetric = F, nit = max.iter, silent = T) ### The baseline Gauss fit_Gauss &lt;- fit.gaussmv(ret_bf, na.rm = T, save.data = T) ## Now, let&#39;s create the likelihoods as well as a test to see whether each specification model improves compared to the GH model ### Likelihoods likelihoods &lt;- round(c( fit_h_sym@llh, fit_t_sym@llh, fit_V_sym@llh, fit_NIG_sym@llh),4) ### Likelihood Ratio tests to see improvements #### H0: The specifications of the Mixture Models are no worse than the Gaussian model ### If the respective value is above 0.05, then we reject the Null and as such they are worse than Gaussian Stat_H_sym &lt;- 1 - pchisq(2*(fit_h_sym@llh - fit_gh_sym@llh), 4) Stat_t_sym &lt;- 1 - pchisq(2*(fit_t_sym@llh - fit_gh_sym@llh), 4) Stat_V_sym &lt;- 1 - pchisq(2*(fit_V_sym@llh - fit_gh_sym@llh), 4) Stat_NIG_sym &lt;- 1 - pchisq(2*(fit_NIG_sym@llh - fit_gh_sym@llh), 4) Stat_GH_sym &lt;- 1 - pchisq(2*(fit_gh_asym@llh - fit_gh_sym@llh), 4) likelihood_tests &lt;- c(Stat_H_sym, Stat_t_sym, Stat_V_sym, Stat_NIG_sym, Stat_GH_sym) symmetric_df &lt;- round(rbind(likelihoods, likelihood_tests),6) ## Warning in base::rbind(...): number of columns of result is not a multiple of vector length (arg 1) rownames(symmetric_df) &lt;- c(&quot;log L&quot;, &quot;p-value&quot;) colnames(symmetric_df) &lt;- c( &quot;H&quot;, &quot;t&quot;, &quot;V&quot;, &quot;NIG&quot;, &quot;GH Asymmetric&quot;) # As we can see, none of the models has improved compared to the general mixture model. But the general mixture model is better compared to Gauss. symmetric_df ## H t V NIG GH Asymmetric ## log L 1617.557 1755.829200 1649.463 1709.93 1617.55690 ## p-value 1.000 0.001821 1.000 1.00 0.00182 Here, wed can see that the GH Mixture model still is the preferred option. Furthermore, we reject the hypotheses that the additional models deliver a statistically significant improvement compared to the original model. We now have gathered important principles on normal mixture models, which appear to improve the model fit of both univariate as well as multivariate data, compared to the original, Guassian multivariate distribution. As such, the additional parameters appear to substantially improve both economic and statistical quantities of the underlying distributions and are thus better to model the distribution. As such, we were able to show that these models can better capture the behaviour of multivariate data compared to Gaussian distributions. ## Do the same for the asymmetric models, but now with GH as baseline ### General Hyperbolic (Usual form or &quot;baseline form&quot;) fit_gh_sym &lt;- fit.ghypuv(ret_bf$UBS_N, symmetric = T,silent = T) fit_gh_asym &lt;- fit.ghypuv(ret_bf$UBS_N, symmetric = F, silent = T) ### The specifications fit_h_sym &lt;- fit.hypuv(ret_bf$UBS_N, symmetric = F, silent = T) fit_t_sym &lt;- fit.tuv(ret_bf$UBS_N, symmetric = F,silent = T) fit_V_sym &lt;- fit.VGuv(ret_bf$UBS_N, symmetric = F, silent = T) ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. fit_NIG_sym &lt;- fit.NIGuv(ret_bf$UBS_N, symmetric = F, silent = T) ### The baseline Gauss fit_Gauss &lt;- fit.gaussuv(ret_bf$UBS_N, na.rm = T, save.data = T) ## Now, let&#39;s create the likelihoods as well as a test to see whether each specification model improves compared to the GH model ### Likelihoods likelihoods &lt;- round(c( fit_h_sym@llh, fit_t_sym@llh, fit_V_sym@llh, fit_NIG_sym@llh),4) ### Likelihood Ratio tests to see improvements #### H0: The specifications of the Mixture Models are no worse than the Gaussian model ### If the respective value is above 0.05, then we reject the Null and as such they are worse than Gaussian Stat_H_sym &lt;- 1 - pchisq(2*(fit_h_sym@llh - fit_gh_sym@llh), 4) Stat_t_sym &lt;- 1 - pchisq(2*(fit_t_sym@llh - fit_gh_sym@llh), 4) Stat_V_sym &lt;- 1 - pchisq(2*(fit_V_sym@llh - fit_gh_sym@llh), 4) Stat_NIG_sym &lt;- 1 - pchisq(2*(fit_NIG_sym@llh - fit_gh_sym@llh), 4) Stat_GH_sym &lt;- 1 - pchisq(2*(fit_gh_asym@llh - fit_gh_sym@llh), 4) likelihood_tests &lt;- c(Stat_H_sym, Stat_t_sym, Stat_V_sym, Stat_NIG_sym, Stat_GH_sym) asymmetric_df &lt;- round(rbind(likelihoods, likelihood_tests),6) rownames(asymmetric_df) &lt;- c(&quot;log L&quot;, &quot;p-value&quot;) colnames(asymmetric_df) &lt;- c( &quot;H&quot;, &quot;t&quot;, &quot;V&quot;, &quot;NIG&quot;, &quot;GH Asymmetric&quot;) asymmetric_df ## H t V NIG GH Asymmetric ## log L 179.8676 265.790300 211.1309 244.8871 179.867600 ## p-value 1.0000 0.222302 1.0000 1.0000 0.229375 As we can see, none of the models has improved compared to the general mixture model. But the general mixture model is better compared to Gauss, based on the log-likelihood. Having constructed the different models to fit the data, we can now plot the best fit against the empirical distribution. Doing so, we will work with a different test parameter: The AIC. # First, let&#39;s fit the univariate models for the Big Four companies to see which model creates the best AIC ratio. fit_uv &lt;- c(apply(ret_bf, 2, fit.tuv, symmetric = T, silent = T), apply(ret_bf, 2, fit.NIGuv, symmetric = T, silent = T), apply(ret_bf, 2, fit.hypuv, symmetric = T, silent = T), apply(ret_bf, 2, fit.ghypuv, symmetric = T, silent = T), apply(ret_bf, 2, fit.VGuv, symmetric = T, silent = T), apply(ret_bf, 2, fit.tuv, symmetric = F, silent = T), apply(ret_bf, 2, fit.NIGuv, symmetric = F, silent = T), apply(ret_bf, 2, fit.hypuv, symmetric = F, silent = T), apply(ret_bf, 2, fit.ghypuv, symmetric = F, silent = T), apply(ret_bf, 2, fit.VGuv, symmetric = F, silent = T), apply(ret_bf, 2, fit.gaussuv, na.rm = T, save.data = T)) ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. ## Singularity (x-mu)==0: Interpolate with splines. # We can now summarise the results res_uv &lt;- matrix(sapply(fit_uv, function(x) x@aic), nrow = 4, ncol = 11) colnames(res_uv) &lt;- c(&quot;t.sym&quot;, &quot;NIG.sym&quot;, &quot;H.sym&quot;, &quot;GH.sym&quot;, &quot;VG.sym&quot;, &quot;t.asym&quot;, &quot;NIG.asym&quot;, &quot;H.asym&quot;, &quot;GH.asym&quot;, &quot;VG.asym&quot;, &quot;Gauss.sym&quot;) rownames(res_uv) &lt;- colnames(ret_bf) df_uv_res &lt;- as.data.frame(res_uv) df_uv_res ## t.sym NIG.sym H.sym GH.sym VG.sym t.asym NIG.asym H.asym GH.asym VG.asym Gauss.sym ## UBS_N -519.8758 -475.9265 -319.6861 -517.8758 -375.0501 -523.5806 -481.7742 -351.7352 -521.4958 -414.2619 524.7181 ## Roche_Holding -854.2938 -854.4398 -854.4867 -852.7519 -854.7520 -852.9618 -853.1728 -853.2333 -851.4418 -853.5173 -852.0004 ## Nestle_PS -1009.5448 -1009.9218 -1009.9805 -1007.9855 -1009.9518 -1007.6542 -1008.0090 -1008.0325 -1006.0201 -1007.9547 -1001.3840 ## Novartis_N -910.0819 -910.2888 -910.3143 -908.3151 -910.2695 -908.1550 -908.4382 -908.5004 -906.5279 -908.5200 -904.8963 As we can see, different models fit the data best for the individual securities. However, note that for neither of the securities the gaussian distribution is the preferred option. This further proves the cricitcal properties of any multivariate normal distribution and proves us that we need to switch to different models. Let’s now apply this to the multivariate case # First, let&#39;s fit the univariate models for the Big Four companies to see which model creates the best AIC ratio. fit_mv &lt;- c(fit.tmv(ret_bf, symmetric = TRUE, silent = TRUE), fit.NIGmv(ret_bf, symmetric = TRUE, silent = TRUE), fit.hypmv(ret_bf, symmetric = TRUE, silent = TRUE), fit.ghypmv(ret_bf, symmetric = TRUE, silent = TRUE), fit.VGmv(ret_bf, symmetric = TRUE, silent = TRUE), fit.tmv(ret_bf, symmetric = FALSE, silent = TRUE), fit.NIGmv(ret_bf, symmetric = FALSE, silent = TRUE), fit.hypmv(ret_bf, symmetric = FALSE, silent = TRUE), fit.ghypmv(ret_bf, symmetric = FALSE, silent = TRUE), fit.VGmv(ret_bf, symmetric = FALSE, silent = TRUE), fit.gaussmv(ret_bf, na.rm = T, save.data = T)) # We can now summarise the results res_mv &lt;- matrix(sapply(fit_mv, function(x) x@aic), nrow = 1, ncol = 11) colnames(res_mv) &lt;- c(&quot;t.sym&quot;, &quot;NIG.sym&quot;, &quot;H.sym&quot;, &quot;GH.sym&quot;, &quot;VG.sym&quot;, &quot;t.asym&quot;, &quot;NIG.asym&quot;, &quot;H.asym&quot;, &quot;GH.asym&quot;, &quot;VG.asym&quot;, &quot;Gauss.sym&quot;) indicator &lt;- which.min(res_mv) res_mv[indicator] ## [1] -3473.658 Here we can see that the VG Symmetric option appears to best properly fit the multivariate return structure. As such, we will continue with this distribution. We do so by extracting the fitted parameters. These parameters are then used to create an implied distribution of portfolio returns. # Extract the fitted parameters param &lt;- coef(fit_mv[[which.min(res.mv)]], type = &quot;chi.psi&quot;) lambda &lt;- param$lambda chi &lt;- param$chi psi &lt;- param$psi mu &lt;- param$mu sigma &lt;- param$sigma gamma &lt;- param$gamma Remember that we stated the linear property of GH distributions. We said that if \\(X \\sim GH_d(\\lambda, \\chi, \\psi, \\mu, \\Sigma, \\gamma)\\), then \\(b^TX ~ GH_1(\\lambda, \\chi, \\psi, b^T\\mu, b^T\\Sigma b, b^T\\gamma)\\). Hereby, b is the weight vector. As such, we can define the remaining parameters for the portfolio of returns. # The parameters to create are the following with the weight vector b = rep(1,4) mu_ew &lt;- t(b) %*% mu sigma_ew &lt;- sqrt(t(b) %*% sigma %*% b) gamma_ew &lt;- t(b) %*% gamma # Now, we can create an implied probability distribution with the ghyp function. This is NOT YET THE FIITED DATA! ew_ret_implied_dist &lt;- ghyp(lambda = lambda, psi = psi, chi = chi, mu = mu_ew, sigma = sigma_ew, gamma = gamma_ew) # To compare it, we plot the empirical distribution ew_ret_emp &lt;- ret_bf %*% b ew_ret_emp_dist &lt;- density(ew_ret_emp,n = 289) ## Get density range for the implied distribution x &lt;- sort(ew_ret_emp) ew_ret_implied_dist_applied &lt;- dghyp(x, object = ew_ret_implied_dist) ## Lastly, combine and plot the data plot(x, ew_ret_implied_dist_applied, type = &quot;l&quot;, ylim = ylim, col = &quot;royalblue3&quot;, ylab = &quot;Implied distribution portfolio returns&quot;) lines(ew_ret_emp_dist) legend(&quot;topright&quot;, bty = &quot;n&quot;, lty = c(1, 1), col = c(&quot;black&quot;, &quot;royalblue3&quot;), legend = c(&quot;Non-parametric (empirical) estimate&quot;, &quot;Fitted GH density&quot;)) As is applicable, although we were able to fit the data with the underlying distributions, we see that the fit is rather bad even for the distribution which maximises the AIC. 2.6.7 The Fisher Information Matrix Lastly, we can also look at the Fisher Information for multivariate data. Note that so far \\(\\theta\\) was assumed to be 1-dimensional. If this increases to an N-dimensional space, then we understand that the information matrix is an N \\(\\times\\) N square matrix. This is equal to the **negative, expected second-order partial derivatives of log(L(\\(\\theta\\))). That is: \\[ \\iota_{ij}(\\theta) = -E[\\frac{\\delta^2}{\\delta\\theta_i\\delta\\theta_j}\\log[L(\\theta)]] \\] The standard errors are again the square roots of the diagonal entries of the inverse of the Fisher information matrix: \\[ s_{\\hat\\theta_i} = \\sqrt{(\\iota(\\hat\\theta)^{-1})_{ii}} \\] Again, under suitable assumptions, if n is large enough, then the MLE is approximately normally distributed with mean equal to the population parameter and the covariance matrix equal to the inverse of the Fisher Information Matrix. This calculation is often computationally expensive, so we normally stick to the observed Fisher Information Matrix. Inverting the observed Fisher information matrix computed by finite differences is the most commonly used method for obtaining standard errors. We usually do so with the function fitdistr() which we also used for univariate distributions. 2.6.8 Dimensionality Reduction Techniques: Principal Component Analysis (PCA) To conclude the chapter on multivariate probability distributions, we will have a look at dimensionality reduction techniques. In essence, these are techniques which reduce the parameter span of a model, such that the model becomes approximately sparse. This is an important concept because it allows us to model complex relationships based on a small parameter space. We cover the actual modelling techniques of factor models as well as regresion-based equity return modelling in later chapters. Here, we will focus on one specific dimensionality reduction technique which is widely used in finance: Principal Component Ananlysis. The ultimate goal of a PCA strategy is to reduce the number of parameters within a model by quantifying the correlational properties of each parameter and finding the variables which account for most of the underlying variation. Consequently, it can be used as a method to construct factors. 2.6.8.1 Key element of PCA The key element of a PCA is the fact that any symmetric matrix can be written as: \\[ A = \\Gamma\\Lambda\\Gamma&#39; \\] whereas \\(\\Lambda = diag(\\lambda_1, \\dots, \\lambda_N)\\) is the ordered, diagonal matrix of eigenvalues of A, and \\(\\Lambda\\) is an orthogonal matrix with columns equal to the standardized eigenvectors of A. Based on this spectral composition principle, we can search for the principal components of any model. For instance, if we have an RV \\(\\textbf{X}\\) with a mean vector \\(\\mu\\) and a covariance matrix \\(\\Sigma\\), then we can transform the principal components of X such that: \\[ \\textbf{Y} = \\Gamma&#39;(\\textbf{X} - \\mu) \\] whereas \\(\\textbf{Y}\\) is the principal component vector of \\(\\textbf{X}\\) with \\(Y_j\\) being its j’th PC. \\(\\Lambda\\) is the Eigenvector and \\(\\lambda_j\\) constitute the j’th Eigenvalue. We can show that \\(E(\\textbf{Y)} = 0\\) and \\(cov(\\textbf{Y}) = \\Gamma&#39;\\Sigma\\Gamma = \\Gamma&#39;\\Gamma\\Lambda\\Gamma\\Gamma&#39; = \\Lambda\\). Consequently, the PC of X are uncorrelated and have variance \\(\\lambda_j\\), which is equal to the Eigenvalue. Since we order the components of \\(\\textbf{Y}\\) according to their value, we obtain an ordered variance vector. More even, we can show that each PC is the standardized linear combination of X with maximal variance among all such linear combinations that are orthogonal to (and hence uncorrelated with) the first j − 1 linear combinations. 2.6.8.2 Explanatory Power of each PC We can quantify the explanatory power of each PC by setting ist variance in relation to the overall variance by \\(\\textbf{X}\\). Doing so, we observe: \\[ \\sum_{j=1}^d var(Y_j) = \\sum_{j=1}^d \\lambda_j = trace(\\Sigma) \\] If we interpret \\(trace(\\Sigma)\\) as a measure of the total variance of \\(\\textbf{X}\\), then \\(\\sum_{j=1}^k \\lambda_j / \\sum_{j=1}^d \\lambda_j\\) is equal to the ratio of the explained variance up to factor d relative to the total variance. Similarly, and logically, we follow the exact same approach for a sample setting. 2.6.8.3 PCA in Factor Model Settings Let us assume that the first k principal components explain a large part of the total variance and we decide to focus our attention on them and ignore the further principal components. In this case, we obtain: \\[ \\textbf{X} = \\mu + \\Gamma_1\\textbf{Y}_1 + \\epsilon \\] Plugging this into a regression model, we can quickly see that the assumptions of the factor model are generally violated, since \\(\\epsilon\\) must not be correlated with \\(\\textbf{Y}\\). This is also known as biased regression and we will catch up on this issue later. However note that, for prediction purposes in which this assumption does not need to hold, we can greatly elaborate PCA to shrink the dimension of returns. Let’s quickly conduct a PCA in order to define which shares mostly influence the underlying variation of the Market Index in Switzerland. To do so, we select the SMI companies and assess their influence on the SMI. # Load the data SMI &lt;- read.csv(&quot;~/Desktop/Master UZH/Data/A2_dataset_03.txt&quot;, header = T, sep = &quot;\\t&quot;)[,1:2] SMI_comp &lt;- read.csv(&quot;~/Desktop/Master UZH/Data/A2_dataset_01.txt&quot;, header = T, sep = &quot;\\t&quot;) # Transform, select and filter SMI_time &lt;- SMI %&gt;% filter(Date &gt;= &quot;2001-12-31&quot;) SMI_comp_time &lt;- SMI_comp %&gt;% select(c(Date, ABB, Credit_Suisse_Group, Nestle_PS, Novartis_N, Compagnie_Financiere_Richemont, Roche_Holding, Swiss_Re, Swisscom, UBS_N, Zurich_Insurance_Group_N)) %&gt;% filter(Date &gt;= &quot;2001-12-31&quot;) colnames(SMI_comp_time) &lt;- c(&quot;Date&quot;, &quot;ABB&quot;, &quot;Credit Suisse&quot;, &quot;Nestle&quot;, &quot;Novartis&quot;, &quot;Richemont&quot;, &quot;Roche&quot;, &quot;Swiss Re&quot;, &quot;Swisscom&quot;, &quot;UBS&quot;, &quot;Zurich&quot;) SMI_ret &lt;- xts(SMI_time[,-1], order.by = as.Date(SMI_time$Date)) SMI_comp_ret &lt;- xts(SMI_comp_time[,-1], order.by = as.Date(SMI_comp_time$Date)) # Merge and create returns merged_SMI_comp &lt;- merge.xts(SMI_ret, SMI_comp_ret) return_df &lt;- Return.calculate(merged_SMI_comp, method = &quot;log&quot;)[-1,] Based on this data frame, we can now create a PCA. But let’s further clarify each of the steps outputs with the underlying theory. The first thing that any PCA does is to calculate the covariance matrix of the underlying variables, or components. The aim of this step is to understand how the variables of the input data set are varying from the mean with respect to each other. That is, to see if there is any relationship between them which would make certain variables redundant in their explanatory power. Note that the diagonal entries are the variances of each first component. Based on the covariance matrix, we can compute the Eigenvectors and Eigenvalues of the covariance matrix. A precise definition of the Eigenvectors and Eigenvalues is given in the next chapter. However, let’s quickly recap the basic principles. First, we need to define the following principal: \\[ Av = \\Lambda v \\] whereas A is the covariance matrix, v are the Eigenvectors and \\(\\Lambda\\) are the correspodning Eigenvalues. We can find the Eigenvalues and Eigenvectors according to the following principle. We start by finding the eigenvalue: \\[ \\begin{align} Av &amp;= \\Lambda v \\\\ Av &amp;= \\Lambda I v &amp;&amp; \\text{add identity matrix}\\\\ Av - \\Lambda I v &amp;= 0 \\\\ |A - \\Lambda I| &amp;= 0 &amp;&amp; \\text{if v is non-zero, we can solve for } \\lambda \\text{ using just the determinant} \\end{align} \\] This provides us with the vector of Eigenvalues. Based on each Eigenvalue, we can then find the Eigenvectors corresponding to the j’th Eigenvalue by a system of n linear equations for the specific Eigenvalue. Computing the eigenvectors and ordering them by their eigenvalues in descending order will allow us to find the principal components in order of significance. This is due to the following principle. Principal components are new variables that are constructed as linear combinations or mixtures of the initial variables. The linear combinations are constructed such that the new variables (= PCs) are uncorrelated with each other and each PC takes the maximum amount of underlying variation. As such, we need to find a way to quantify the variance explained. In any dataset, this is, mathematically speaking, the line which gives you the the maximum average of the squared distances of the projected points to the origin. This line is constructed through the Eigenvectors of the covariance matrix, which give you the directions of the axes with the most variance. As such, the line represented by the j’th Eigenvectors which accounts for the j’th largest amount of variance is also called the j’th Principal Component. And the Eigenvalues are simply the coefficients attached to Eigenvectors, which give the amount of variance carried in each Principal Component. Since we understand now what the Eigenvectors and Eigenvalues do, let’s get the summary of the PCA. library(stats) pca &lt;- prcomp(na.omit(return_df[,-1]), scale. = TRUE) summary(pca) ## Importance of components: ## PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 PC9 PC10 ## Standard deviation 2.0314 1.1936 0.97516 0.88576 0.84220 0.77772 0.67260 0.6213 0.57829 0.47595 ## Proportion of Variance 0.4126 0.1425 0.09509 0.07846 0.07093 0.06049 0.04524 0.0386 0.03344 0.02265 ## Cumulative Proportion 0.4126 0.5551 0.65019 0.72865 0.79958 0.86007 0.90530 0.9439 0.97735 1.00000 Here, the square root of the Standard Deviation is equal to the j’th orthogonal Eigenvalue of the covariance matrix, such that the correpsonding Eigenvectors are uncorrelated with each other. The summary shows which PC absorbs which part of the underlying variance of the model. As we can see, the first three PCs make up for approx. 90% of the entire variation. Let’s plot the variances of each principal component. # Plot the PCs pca_var &lt;- as.data.frame(pca$sdev^2) %&gt;% mutate(PC = seq(1,10,1)) colnames(pca_var) &lt;- c(&quot;Var_PC&quot;, &quot;PC&quot;) # Create the plot pca_var %&gt;% ggplot(aes(y = Var_PC, x = PC)) + geom_bar(stat = &quot;identity&quot;) + ggtitle(&quot;Variance of Principle Componants SMI&quot;) + ylab(&quot;Variance absorbed by PC&quot;) + xlab(&quot;PC&quot;) + scale_x_continuous(&quot;PC&quot;, labels = as.character(pca_var$PC), breaks = pca_var$PC) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) We can also retrieve the corresponding Eigvectors as well as their direction, which then constitute each Principal Component. Gamma &lt;- pca$rotation Gamma ## PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 PC9 PC10 ## ABB 0.2780048 0.21101879 -0.302572360 0.68544995 -0.27705423 0.236227840 -0.3436484 0.14740015 -0.132548124 -0.16382945 ## Credit.Suisse 0.3894348 0.29175808 0.051429146 0.02541878 -0.22188116 0.181578739 0.4168617 -0.11919760 0.004441501 0.69980223 ## Nestle 0.2599789 -0.47301072 0.006541717 0.43125448 0.17533649 -0.437730700 0.3445574 -0.29634184 -0.302375968 -0.04824949 ## Novartis 0.3012289 -0.46127322 -0.200068243 -0.18786910 -0.21532027 -0.005109167 0.2038093 0.71988565 0.120796452 -0.02029153 ## Richemont 0.3478409 0.18611205 0.075062082 -0.08953974 -0.23105322 -0.687595701 -0.3419612 -0.07687562 0.425806631 0.01962967 ## Roche 0.2761140 -0.37477034 -0.403110436 -0.38583099 -0.17407444 0.272877569 -0.2991391 -0.52335979 -0.060806369 0.00966946 ## Swiss.Re 0.3540635 0.13401066 -0.001025965 -0.18406110 0.61153757 -0.068012866 -0.3736694 0.25620102 -0.428962737 0.23434991 ## Swisscom 0.1572826 -0.37623063 0.776082491 0.14470455 -0.08294436 0.294375027 -0.3131605 -0.00239182 0.103860680 0.08983642 ## UBS 0.3533604 0.30222885 0.303525302 -0.30011063 -0.24762634 0.042538838 0.2402488 -0.04042693 -0.391077074 -0.57111883 ## Zurich 0.3748752 0.08885407 -0.056301685 0.08043517 0.52061476 0.281512566 0.2145569 -0.10448415 0.586210038 -0.30174655 Importantly, since they are constructed as linear combinations of the initial variables, the principal components are less interpretable and don’t have any real meaning. Rather, they are just used as measure to compose the maximum possible variance into one component. Importantly, we can also obtain the center of each factor as well as the estimated Principal Components of the Return matrix at each observation. The center is important because this is the origin from which the model computes the directions which maximise the squared distances of each projection to the origin. Based on this distance the directions of the j’th Principal Components are given as j’th Eigenvectors. Further, the estimated PCs at each observation are handy to compare the reduced with the full model in a later step. # The center of each factor mu &lt;- pca$center # The estimated principal components of X or &#39;scores&#39; at each observation. Y &lt;- pca$x As we saw, the pca function computes the Eigenvalues and orders them in descending order. Based on this order, it gives you the j’th Eigenvectors per j’th Eigenvalue per order of significance. We now need to choose which Components to keep and which to discard based on their Eigenvalues. With the remaining Eigenvalues we then form a matrix of vectors that we call Feature vector. The decision to keep and discard is usually made by a variance plot in which we aim at identifying an elbow-angle which then serves as cut-off point. # Plot the PCs pca_var &lt;- as.data.frame(pca$sdev^2) %&gt;% mutate(PC = seq(1,10,1)) colnames(pca_var) &lt;- c(&quot;Var_PC&quot;, &quot;PC&quot;) # Create the plot pca_var %&gt;% ggplot(aes(y = Var_PC, x = PC)) + geom_bar(stat = &quot;identity&quot;, alpha = 0.5) + geom_line(color = &quot;darkorange3&quot;) + geom_point(color = &quot;darkorange3&quot;) + geom_vline(xintercept = 4.5, linetype = &quot;dashed&quot;, color = &quot;grey2&quot;) + ggtitle(&quot;Variance of Principle Componants SMI&quot;) + ylab(&quot;Variance absorbed by PC&quot;) + xlab(&quot;PC&quot;) + scale_x_continuous(&quot;PC&quot;, labels = as.character(pca_var$PC), breaks = pca_var$PC) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) As we can see, the dotted vertical line indicates the elbow angle. That is the cut-off in which an additional component is not expected to add a sufficient amount of information to the underlying relationship. Based on this, we decide to keep the first four PCs. We can now first visually comprehend the variation of each PC for each specific observation in our dataset. That is, the direction of the first four Eigenvectors which maximise the variance of the projections and the origin and whose Eigenvalue corresponds to the maximised variance. ## Working with the principal components defined pc &lt;- 4 Y_pc &lt;- xts(Y[,1:pc], order.by = as.Date(SMI_comp_time$Date[-1])) plot.zoo(Y_pc, type = &quot;h&quot;, xlab = &quot;Time&quot;, ylab = paste(&quot;PC&quot;, 1:pc), main = &quot;Principal components of X&quot;) # plot of the first so-many principal components of X As we can see, the first four PCs show quire a different image regarding the direction of the Eigenvectors. However, we can see that the explanatory power is declining from the first to the fourth PC. Further, we can compare the directoin of the Eigenvector (= the first PC) with the index return of the SMI. # Plot the SMI Return and the PC1 a &lt;- return_df[,1] %&gt;% tidy() %&gt;% ggplot(aes(x = index, y = value, color = &quot;Return SMI&quot;)) + geom_line( color = &quot;lightsteelblue&quot;) + ggtitle(&quot;Rerturn SMI&quot;) + ylab(&quot;Value&quot;) + xlab(&quot;Time&quot;) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) b &lt;- Y_pc[,1] %&gt;% tidy() %&gt;% ggplot(aes(x = index, y = value, color = &quot;Return SMI&quot;)) + geom_line( color = &quot;goldenrod&quot;) + ggtitle(&quot;First Principal Component directional return&quot;) + ylab(&quot;Value&quot;) + xlab(&quot;Time&quot;) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) a + b + plot_layout(ncol = 1) As we can see there appears to be some correlation between the underlying SMI returns and the PC. As such, we can assume that they move in similar directions. Let’s quantify this: df_SMI_pca &lt;- merge.xts(return_df[,1], Y_pc[,1], Y_pc[,2], Y_pc[,3]) cor(df_SMI_pca) ## SMI_ret PC1 PC2 PC3 ## SMI_ret 1.00000000 9.567377e-01 -1.455257e-01 -5.452774e-02 ## PC1 0.95673769 1.000000e+00 -2.854824e-16 -2.136497e-16 ## PC2 -0.14552574 -2.854824e-16 1.000000e+00 1.589381e-16 ## PC3 -0.05452774 -2.136497e-16 1.589381e-16 1.000000e+00 As we can see, the first correlation is very strong while the others are weak. This makes sense because the PC only capture the orthogonal remaining variaiton in the returns. Lastly, we now want to reconstruct the returns of the SMI based on the Principal components related to the SMI. Doing so, we take the feature vector. We use this feature vector (which is the vector of retained PCs formed through the directions of the Eigenvectors of the covariance matrix) and match the data from the original axes to the ones represented by the Principal Components. This can be done by multiplying the transpose of the original data set by the feature vector: \\[ Y_{PCA} = \\Lambda_{feat}Y^T \\] Let’s do this: ## Get the discarded principal components per observation Y_non_pc &lt;- Y[,(pc + 1):ncol(Y)] ## Obtain the different Eigenvectors Gamma_1 &lt;- Gamma[,1:pc] Gamma_2 &lt;- Gamma[,(pc+1):ncol(Gamma)] ## Compute the transpose pca_vec &lt;- Gamma_1 %*% t(Y_pc) non_pca_vec &lt;- Gamma_2 %*% t(Y_non_pc) ## Compute the representation of the SMI through the first four components SMI_pca &lt;- t(mu + pca_vec + non_pca_vec) # Get the error eps &lt;- SMI_pca - return_df[,-1] # We can see the error distributions are quite small eps_df &lt;- as.data.frame(eps) eps_df %&gt;% gather() %&gt;% ggplot(aes(x = key, y = value)) + geom_boxplot() + ggtitle(&quot;Boxplot of Return Differences SMI Components - PCA&quot;) + ylab(&quot;Difference in Returns&quot;) + xlab(&quot;Components&quot;) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) As we can see, we can very well reproduce the actual variation in asset returns by the PCA. This is done using both matching procedures of the PCs with the actual data as well as their underlying error term (which is the matrix multiplication of the discarded feature vector with the remaining original dataset). Based on this, we derive that the underlying variation can be conducted through only four PCs. Thus, if we assume that the SMI components impact the SMI and show that the first four PCs account for the largest part of the underlying variation, then we can make sure that we can account for much of the underlying SMI return variation by looking at only the first four PCs 2.7 Matrix Algebra: Introduction In this chapter, we will repeat the basic matrix algebra concepts used throughout the lecture. Matrices are the simplest and most useful way to organise data sets. Using matrix algebra makes manipulation and transformation of multidimensional data sets easier, as it can summarise many steps that would be needed if we worked with each constituent individually. Especially, understanding the functioning of matrix algebra especially helps us in comprehending general concepts of the lecture. For instance, portfolio construction with either two or more assets as well as risk and return calculations can be simplified and generalised using matrix algebra. Further, systems of linear equations to define the first order conditions of mean-variance optimised portfolios can be created using matrix algebra. In general, this form of data manipulation is the most straight-forward when being applied to programming languages such as R, as the syntax of the program largely follows the syntax of textbook linear algebra discussions. Thus, copying theory into programming language is not that hard when using matrix manipulation techniques. Lastly, many R calculations can be efficiently evaluated if they are vectorized - that is, if they operate on vectors of elements instead of looping over individual elements. The chapter will be organised as follows: Section 1 introduces the basic definitions and concepts of matrix algebra, much like you have already seen in Empirical Methods. Section 2 reviews basic operations and manipulation techniques. In Section 3, we look at how to represent summation notation with matrix algebra. Section 4 presents systems of linear equations that constitute the cornerstones of portfolio math. Then, Section 5 introduces the concept of Positive Semi-Definite (PSD) matrices, before we dive into multivariate probability distribution representations using matrix algebra. We conclude the chapter by having a discusssion on portfolio mathematics using matrix algebra as well as how to use derivatives of simple matrix functions. 2.7.1 Matrices and Vectors A vector is a one-dimensional array of numbers. For instance, \\[ \\underset{n \\times 1}{\\textbf{x}} = \\begin{bmatrix} x_{1}\\\\ x_{2} \\\\ \\vdots\\\\ x_{n} \\end{bmatrix} \\] is an \\(n \\times 1\\) vector of entries x. This is also known as \\(\\textbf{Column Vector}\\) If we transpose a vector, it becomes a \\(\\textbf{row vector}\\). For instance: \\[ \\underset{n \\times 1}{\\textbf{x}&#39;} = \\begin{bmatrix} x_{1} &amp; x_2 &amp; \\dots &amp; x_n \\end{bmatrix} \\] A \\(\\textbf{matrix}\\) is a two-dimensional array of numbers. Each matrix consists of rows and columns, whereas both make up the dimension of a matrix. A general form of a matrix is the following: \\[ \\underset{n \\times k}{\\textbf{A}} = \\begin{bmatrix} a_{11} &amp; a_{12} &amp; \\dots &amp; a_{1k}\\\\ a_{21} &amp; a_{22} &amp; \\dots &amp; a_{2k} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\ a_{n1} &amp; a_{n2} &amp; \\dots &amp; a_{nk} \\end{bmatrix} \\] where \\(a_{ij}\\) denotes the element in the \\(i^{th}\\) row and \\(j^{th}\\) column of the matrix \\(\\textbf{A}\\). Just as with vectors, we can also transpose the matrix: \\[ \\underset{n \\times k}{\\textbf{A}&#39;} = \\begin{bmatrix} a_{11} &amp; a_{21} &amp; \\dots &amp; a_{n1}\\\\ a_{12} &amp; a_{22} &amp; \\dots &amp; a_{n2} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\ a_{1k} &amp; a_{2k} &amp; \\dots &amp; a_{nk} \\end{bmatrix} \\] An important concept in matrices is \\(\\textit{symmetric}\\) and \\(\\textit{square}\\). A \\(\\textit{symmetric}\\) matrix \\(\\textbf{A}\\) is defined such that \\(\\textbf{A} = \\textbf{A&#39;}\\). This can only be the case if the matrix is already \\(\\textit{square}\\), implying that the number of rows equals the number of columns. \\(\\textbf{Example: Creating Vectors and Matrices in R}\\) In R, to construct \\(\\textbf{vectors}\\), the easiest way is to use the combine function c(): xvec = c(1,2,3) xvec ## [1] 1 2 3 Vectors of numbers in R are of class numeric and do not have a dimension attribute: class(xvec) ## [1] &quot;numeric&quot; dim(xvec) ## NULL The elements of a vector can be assigned names using the names() function: names(xvec) = c(&quot;x1&quot;, &quot;x2&quot;, &quot;x3&quot;) xvec ## x1 x2 x3 ## 1 2 3 Lastly, to create a \\(\\textbf{matrix}\\) from a vector, we use the as.matrix() function as.matrix(xvec) ## [,1] ## x1 1 ## x2 2 ## x3 3 In R, matrix objects are created using the matrix() function. For example, we can create a \\(2 \\times 3\\) matrix using: matA = matrix(data=c(1,2,3,4,5,6),nrow=2,ncol=3,byrow=FALSE) matA ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 Looking for the “class” object, we can see if it’s really a matrix: class(matA) ## [1] &quot;matrix&quot; &quot;array&quot; If we want to transpose the matrix, we can use the byrow=TRUE command: matA = matrix(data=c(1,2,3,4,5,6),nrow=2,ncol=3,byrow=TRUE) matA ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 In order to get the dimension of a matrix, we use the dim() command: dim(matA) ## [1] 2 3 This indicates the \\(n \\times k\\) structure, which is \\(2 \\times 3\\). Further, we can define names of the rows and columns using the colnames() and rownames() arguments: rownames(matA) = c(&quot;row1&quot;, &quot;row2&quot;) colnames(matA) = c(&quot;col1&quot;, &quot;col2&quot;, &quot;col3&quot;) matA ## col1 col2 col3 ## row1 1 2 3 ## row2 4 5 6 Lastly, matrix manipulation starts with \\(\\textbf{slicing operations}\\). Thus, the elements of a matrix can be extracted or subsetted as follows: matA[1, 2] ## [1] 2 This defines the elements which should be extracted from the matrix. In our case, we told the program to only take the first row and second column element of the matrix. If we only want to select according to one dimension, we do so accordingly: matA[1,] ## col1 col2 col3 ## 1 2 3 This takes We can take accordingly: matA[,1] ## row1 row2 ## 1 4 Lastly, we can \\(\\textbf{transpose}\\) a matrix by using the t() function: t(matA) ## row1 row2 ## col1 1 4 ## col2 2 5 ## col3 3 6 2.7.2 Basic Matrix Operations 2.7.2.1 Addition and Subtraction Matrices are additive. That means, given the same dimensions of two matrices, you can add and subtract the respective row-column elements from each other. For instance, if we have: \\[ \\textbf{A} = \\begin{bmatrix} 3 &amp; 4\\\\ 8 &amp; 5 \\end{bmatrix}, \\textbf{B} = \\begin{bmatrix} 9 &amp; 1\\\\ 5 &amp; 2 \\end{bmatrix} \\] Then: \\[ \\textbf{A} + \\textbf{B} = \\begin{bmatrix} 3 &amp; 4\\\\ 8 &amp; 5 \\end{bmatrix} + \\begin{bmatrix} 9 &amp; 1\\\\ 5 &amp; 2 \\end{bmatrix} = \\begin{bmatrix} 3+9 &amp; 4+1\\\\ 8+5 &amp; 5+2 \\end{bmatrix} = \\begin{bmatrix} 12 &amp; 5\\\\ 13 &amp; 7 \\end{bmatrix}\\\\ \\textbf{A} - \\textbf{B} = \\begin{bmatrix} 3 &amp; 4\\\\ 8 &amp; 5 \\end{bmatrix} - \\begin{bmatrix} 9 &amp; 1\\\\ 5 &amp; 2 \\end{bmatrix} = \\begin{bmatrix} 3-9 &amp; 4-1\\\\ 8-5 &amp; 5-2 \\end{bmatrix} = \\begin{bmatrix} -6 &amp; 3\\\\ 3 &amp; 3 \\end{bmatrix} \\] In R, this is quite easily done: matA = matrix(c(3,4,8,5),2,2,byrow=TRUE) # Note that we do not indicate nrow = ... &amp; ncol = ... but just write 2 at both places. As long as the # order of the commands is correct, R automatically interprets the second entry as nrow and the third as # ncol. matB = matrix(c(9,1,5,2),2,2,byrow=TRUE) matA + matB ## [,1] [,2] ## [1,] 12 5 ## [2,] 13 7 matA - matB ## [,1] [,2] ## [1,] -6 3 ## [2,] 3 3 2.7.2.2 Scalar and Vector Multiplication Matrices are also \\(\\textbf{multiplicative}\\). That is, they can be multiplied by a scalar or by another matrix that is \\(\\textbf{conformable}\\). For instance, if we take a scalar c = 2 and use the same matrices again, we get: \\[ c * \\textbf{A} = 2* \\begin{bmatrix} 3 &amp; 4\\\\ 8 &amp; 5 \\end{bmatrix} = \\begin{bmatrix} 6 &amp; 8\\\\ 16 &amp; 10 \\end{bmatrix} \\] Matrix multiplication only applies to conformable matrices. \\(\\textbf{A}\\) and \\(\\textbf{B}\\) are said to be conformable if the \\(\\textbf{number of columns in A equals the number of rows in B}\\). If Matrix \\(\\textbf{A}\\) has the dimension of \\(n \\times k\\) and \\(\\textbf{B}\\) the dimension of \\(k \\times p\\), then they are conformable with dimension of \\(n \\times p\\). \\[ \\underset{2\\times 2}{\\textbf{A}} \\cdot\\underset{2\\times 3}{\\textbf{B}} = \\begin{bmatrix} 3 &amp; 4\\\\ 8 &amp; 5 \\end{bmatrix} \\cdot \\begin{bmatrix} 9 &amp; 1 &amp; 7\\\\ 5 &amp; 2 &amp; 3 \\end{bmatrix} = \\begin{bmatrix} 3*9 + 4*5 &amp; 3*1 + 4*2 &amp; 3*7+4*3 \\\\ 8*9+5*5 &amp; 8*1+5*2 &amp; 8*7+5*3 \\end{bmatrix}= \\begin{bmatrix} 47 &amp; 11 &amp; 33\\\\ 97 &amp; 18 &amp; 71 \\end{bmatrix} = \\underset{2\\times 3}{\\textbf{C}} \\] Here, each element of the matrix \\(\\textbf{C}\\) is the dot product of the resulting from the \\(i^{th}\\) row of \\(\\textbf{A}\\) and the \\(j^{th}\\) column of \\(\\textbf{B}\\). \\(\\textbf{Example: Matrix Multiplication in R}\\) To do this in R, we can simply use the %*% operator: matA = matrix(c(3,4,8,5),2,2,byrow=TRUE) matB = matrix(c(9,1,7,5,2,3),2,3,byrow=TRUE) matA %*% matB ## [,1] [,2] [,3] ## [1,] 47 11 33 ## [2,] 97 18 71 dim(matA %*% matB) ## [1] 2 3 As we can see, the dimensions are now \\(2 \\times 3\\). 2.7.2.3 Miscellaneous Matrix Properties Some important properties of matrices that we will use for financial applications are the \\(\\textbf{associative property}\\) as well as \\(\\textbf{transpose product property}\\). That is, if three matrices are conformable (number of columns of the first is number of rows of the latter), then: \\[ \\textbf{A}(\\textbf{B} + \\textbf{C}) = \\textbf{A}\\textbf{B} + \\textbf{A}\\textbf{C} \\] Further, the transpose of the product of two matrices is the product of the transposes in opposite order \\[ (\\textbf{A}\\textbf{B})&#39; = \\textbf{B}&#39;\\textbf{A}&#39; \\] 2.7.2.4 Identity, Diagonal as well as Lower and Upper Triangle Matrices Some pre-defined matrices are quite common in financial applications. The first is called \\(\\textbf{Identity Matrix}\\). An identity matrix is a matrix with all zero elements and only diagonal elements consisting of 1’s. In matrix algebra, pre-multiplying or post-multiplying a matrix by a conformable identity matrix gives back the matrix. Consequently, the matrix must consist of only non-zero diagonal entries. To illustrate, assume that: \\[ \\textbf{I} = \\begin{bmatrix} 1&amp;0\\\\ 0&amp;1 \\end{bmatrix} \\] is the identity matrix and \\[ \\textbf{A} = \\begin{bmatrix} a_{11}&amp;a_{12}\\\\ a_{21} &amp; a_{22} \\end{bmatrix} \\] Then, multiplying \\(\\textbf{A}\\) and \\(\\textbf{I}\\) equals: \\[ \\textbf{A} \\cdot \\textbf{I} = \\begin{bmatrix} a_{11}&amp;a_{12}\\\\ a_{21} &amp; a_{22} \\end{bmatrix} \\cdot \\begin{bmatrix} 1&amp;0\\\\ 0&amp;1 \\end{bmatrix} = \\begin{bmatrix} a_{11}*1 + a_{12} * 0 &amp; 0*a_{11}+ a_{12}*1\\\\ a_{21}*1 + a_{22} * 0 &amp; 0*a_{21}+ a_{22}*1 \\end{bmatrix} = \\begin{bmatrix} a_{11}&amp;a_{12}\\\\ a_{21} &amp; a_{22} \\end{bmatrix} = \\textbf{A} \\] In R, an identity matrix is constructed using the diag() function: matI = diag(2) matI ## [,1] [,2] ## [1,] 1 0 ## [2,] 0 1 Further, we can have a \\(\\textbf{Diagonal matrix}\\), \\(\\textbf{Upper-Triangle matrix}\\) as well as a \\(\\textbf{Lower-Triangle matrix}\\). For that, consider the following matrix: \\[ \\textbf{A} = \\begin{bmatrix} d_1 &amp; u_{12} &amp; u_{13} &amp; \\dots &amp; u_{1n} \\\\ l_{21} &amp; d_2 &amp; u_{23} &amp; \\dots &amp; u_{2n} \\\\ l_{31} &amp; l_{32} &amp; d_3 &amp; \\dots &amp; l_{3n} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ l_{n1} &amp; l_{n2} &amp; l_{n3} &amp; \\dots &amp; d_{n} \\end{bmatrix} \\] Here, d defines the diagonal, u the upper-triangle and l the lower-triangle entries. The diagonal consists of n elements, whereas both the lower- and upper-triangle consist of n(n-1)/2 entries. Then, we have the following matrices: A Diagonal Matrix \\(\\textbf{D}\\) is a \\(n \\times n\\) square matrix with \\(n \\times 1\\) vector of diagonal entries and zero else: \\[ \\textbf{D} = \\begin{bmatrix} d_1 &amp; 0 &amp; 0 &amp; \\dots &amp; 0 \\\\ 0 &amp; d_2 &amp; 0 &amp; \\dots &amp;0\\\\ 0 &amp; 0 &amp; d_3 &amp; \\dots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; 0 &amp; \\dots &amp; d_{n} \\end{bmatrix} \\] An upper-triangle matrix \\(\\textbf{U}\\) has all values below the main diagonal equal to zero: \\[ \\textbf{U} = \\begin{bmatrix} d_1 &amp; u_{12} &amp; u_{13} &amp; \\dots &amp; u_{1n} \\\\ 0 &amp; d_2 &amp; u_{23} &amp; \\dots &amp; u_{2n} \\\\ 0 &amp; l_{32} &amp; d_3 &amp; \\dots &amp; l_{3n} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; 0 &amp; \\dots &amp; d_{n} \\end{bmatrix} \\] A lower-triangle matrix \\(\\textbf{L}\\) has all values above the main diagonal equal to zero: \\[ \\textbf{L} = \\begin{bmatrix} d_1 &amp; 0 &amp; 0 &amp; \\dots &amp; 0 \\\\ l_{21} &amp; d_2 &amp; 0 &amp; \\dots &amp; 0 \\\\ l_{31} &amp; l_{32} &amp; d_3 &amp; \\dots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ l_{n1} &amp; l_{n2} &amp; l_{n3} &amp; \\dots &amp; d_{n} \\end{bmatrix} \\] We can apply these matrices easily in R: matA = matrix(c(1,2,3,4,5,6,7,8,9), 3, 3) matA ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 # Extract the lower elements from the matrix: matA[lower.tri(matA)] ## [1] 2 3 6 # Extract the upper elements from the matrix: matA[upper.tri(matA)] ## [1] 4 7 8 2.7.3 Summation Notation in Matrix Form Imagine we have the sum: \\[ \\sum^{n}_{k=1} x_k = x_1 + ... + x_n \\] Then, this sum can be represented by a matrix multiplication of a vector \\(\\textbf{x} = [x_1,..,x_n]\\) and a $n $ vector of ones: \\[ \\textbf{x&#39;}\\textbf{1} = [x_1,..,x_n] \\cdot \\begin{bmatrix} 1 \\\\ \\vdots \\\\ 1 \\end{bmatrix} = x_1 + \\dots + x_n = \\sum^{n}_{k=1} x_k \\] Next, we can have a squared sum: \\[ \\sum^{n}_{k=1} x_k^2 = x_1^2 + ... + x_n^2 \\] Then, this sum can be represented by a matrix multiplication: \\[ \\textbf{x&#39;}\\textbf{x} = [x_1,..,x_n] \\cdot \\begin{bmatrix} x_1 \\\\ \\vdots \\\\ x_n \\end{bmatrix} = x_1^2 + \\dots + x_n^2 = \\sum^{n}_{k=1} x_k^2 \\] Last, we can have cross-products: \\[ \\sum^{n}_{k=1} x_ky_k = x_1y_1 + ... + x_ny_n \\] Then, this sum can be represented by a matrix multiplication: \\[ \\textbf{x&#39;}\\textbf{y} = [x_1,..,x_n] \\cdot \\begin{bmatrix} y_1 \\\\ \\vdots \\\\ y_n \\end{bmatrix} = x_1y_1 + \\dots + x_ny_n = \\sum^{n}_{k=1} x_ky_k \\] In R, this can easily be facilitated: xvec = c(1,2,3) onevec = rep(1,3) t(xvec)%*%onevec ## [,1] ## [1,] 6 yvec = c(4,3,5) crossprod(xvec, yvec) ## [,1] ## [1,] 25 2.7.4 Systems of Linear Equations 2.7.4.1 Inverse of a Matrix Systems of linear equations and matrix algebra are indisputably linked. One of such links comes in the form of the \\(\\textbf{inverse of a matrix}\\) properties. To see how, let’s consider the two linear equations: \\[ x + y = 1\\\\ 2x - y = 1 \\] Considering both functions, we can find their intersection points as \\(x = 2/3\\) and \\(y = 1/3\\). Note that these two linear equations can also be written in terms of matrix notation: \\[ \\begin{bmatrix} 1 &amp; 1\\\\ 2 &amp; -1 \\end{bmatrix} \\begin{bmatrix} x\\\\ y \\end{bmatrix} = \\begin{bmatrix} 1\\\\ 1 \\end{bmatrix} \\] Check yourself that with matrix multiplication you would obtain the same two equations as above. In general, this implies \\(\\textbf{A}\\cdot\\textbf{z} = \\textbf{b}\\), where \\[ \\textbf{A} = \\begin{bmatrix} 1 &amp; 1\\\\ 2 &amp; -1 \\end{bmatrix}, \\textbf{z} = \\begin{bmatrix} x\\\\ y \\end{bmatrix}, \\textbf{b} = \\begin{bmatrix} 1\\\\ 1 \\end{bmatrix} \\] If, in this equation, we had a \\(2 \\times 2\\) matrix \\(\\textbf{B}\\) with elements such that \\(\\textbf{B}\\cdot\\textbf{A} = \\textbf{I_2}\\) (\\(\\textbf{I_2}\\) being the identity matrix), then we can \\(\\textbf{solve for elements in z}\\) as follows: \\[ \\begin{align*} \\textbf{B}\\cdot\\textbf{A}\\cdot\\textbf{z} &amp;= \\textbf{B}\\cdot\\textbf{b} \\\\ \\textbf{I}\\cdot\\textbf{z} &amp;= \\textbf{B}\\cdot\\textbf{b} \\\\ \\textbf{z} &amp;= \\textbf{B}\\cdot\\textbf{b} \\end{align*} \\] or, in matrix notation: $$ = $$ If such a matrix \\(\\textbf{B}\\) exists, it is called \\(\\textbf{inverse of A}\\) and is denoted as \\(\\textbf{A}^{-1}\\). This is the same as when we want to solve the system of linear equation \\(\\textbf{A}\\textbf{x} = \\textbf{b}\\), we just take the \\(\\textbf{A}\\) to the other side and get: \\(\\textbf{x} = \\textbf{A}^{-1}\\textbf{b}\\). As long as we can determine the elements in \\(\\textbf{A}^{-1}\\), then we can solve for the values of x and y in the linear equations system of the vector \\(\\textbf{z}\\). The system of linear equations has a solution as long as the \\(\\textbf{two lines intersect}\\). If the two lines are parallel, then one of the equations is a multiple of the other. In this case, we say that \\(\\textbf{A}\\) is NOT INVERTIBLE. There are general rules in R how to solve for such a system of linear equations. One is in the form of the solve() function: matA = matrix(c(1,1,2,-1), 2, 2, byrow=TRUE) vecB = c(1,1) # First we solve for the inverse of A: A^-1 matA.inv = solve(matA) # Then, we can easily solve for the vector z: z = matA.inv%*%vecB z ## [,1] ## [1,] 0.6666667 ## [2,] 0.3333333 2.7.4.2 Linear Independence and Rank of a Matrix Consider again the \\(n \\times k\\): \\[ \\underset{n \\times k}{\\textbf{A}} = \\begin{bmatrix} a_{11} &amp; a_{12} &amp; \\dots &amp; a_{1k}\\\\ a_{21} &amp; a_{22} &amp; \\dots &amp; a_{2k} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\ a_{n1} &amp; a_{n2} &amp; \\dots &amp; a_{nk} \\end{bmatrix} = [\\textbf{a}_1, \\textbf{a}_2, \\dots, \\textbf{a}_k] \\] Where each vector \\(\\textbf{a}\\) is a \\(n \\times 1\\) column vector. In that case, k vectors \\(\\textbf{a}_1, \\textbf{a}_2, \\dots \\textbf{a}_k\\) are \\(\\textbf{linearily independent}\\) if \\(\\textbf{a}_1c_1 + \\textbf{a}_2c_2 + \\dots + \\textbf{a}_kc_k = 0\\). That is, no vector can be expressed as a \\(\\textbf{non-trivial linear combination}\\) of the other vectors. For us of importance is the \\(\\textbf{Rank of a Matrix}\\). The column rank of matrix, denoted \\(\\textbf{rank()}\\), is equal to the \\(\\textbf{maximum number of linearly independent columns}\\). If rank(A) = m, then we say the matrix has \\(\\textbf{full rank}\\). In R, we figure the rank of a matrix accordingly with the rankMatrix() function: library(Matrix) Amat = matrix(c(1,3,5,2,4,6), 2, 3, byrow=TRUE) as.numeric(rankMatrix(Amat)) ## [1] 2 2.7.5 Positive Definite (PD) Matrix Another important concept in matrix algebra is positive definiteness. We consider a matrix to be if for any \\(n \\times 1\\) x \\(\\neq\\) 0: \\[ \\begin{equation} \\textbf{x}&#39;\\textbf{A}\\textbf{x} &gt; 0 \\end{equation} \\] Therein, we consider a matrix \\(\\textbf{A}\\) to be \\(\\textbf{positive semi-definite}\\) if for any \\(n \\times 1\\) x \\(\\neq\\) 0: \\[ \\begin{equation} \\textbf{x}&#39;\\textbf{A}\\textbf{x} \\geq 0 \\end{equation} \\] Hence, if a matrix is positive semi-definite then there exists some vector x such that \\(\\textbf{A}\\textbf{x} = 0\\), which implies that . 2.7.6 Portfolio Construction and Mathematical Properties using Matrix Algebra As we now covered the main baseline principles of matrix algebra, we can utilise this knowledge and combine it with the fundamentals of portfolio theory. For that, we assume that we have a portfolio consisting of . These all are with means, variances and covariances: \\[ E[R_i] = \\mu_i \\\\ var(R_i) = \\sigma_i^2\\\\ cov(R_i, R_j) = \\sigma_{ij} \\] Furthermore, we consider portfolio weights \\(x_i\\) within our setting, whereas \\(\\sum x_i = 1\\). That is, the entire portfolio consists of only these three assets. . As such, the is given as: \\[ R_{p,x} = x_1\\mu_1 + x_2\\mu_2 + x_3\\mu_3 \\] And the portfolio variance is given as: \\[ \\begin{align*} \\sigma_{p,x}^2 &amp;= \\sigma_1^2x_1^2 + \\sigma_2^2x_2^2 + \\sigma_3^2x_3^2 + 2\\sigma_{1,2}x_1x_2 + 2\\sigma_{2,3}x_2x_3 + 2\\sigma_{13x_1x_3} \\\\ &amp;= \\sigma_1^2x_1^2 + \\sigma_2^2x_2^2 + \\sigma_3^2x_3^2 + 2\\sigma_1\\sigma_2\\rho_{1,2}x_1x_2 + 2\\sigma_2\\sigma_3\\rho_{2,3}x_2x_3 + 2\\sigma_1\\sigma_3\\rho_{13}x_1x_3 \\end{align*} \\] Please remember that \\(\\sigma_{i,j} = \\sigma_i\\sigma_j\\rho_{i,j}\\). We can now substantially simplify this expression by using matrix algebra: \\[ \\textbf{R} = \\begin{bmatrix} R_1 \\\\ R_2 \\\\ R_3 \\end{bmatrix}, \\textbf{x} = \\begin{bmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{bmatrix} \\] As all of the variables are perfectly characterised, by assumptions, through their mean, variance and covariance structures, we can easily characterise them by using: \\[ E[\\textbf{R}] = E\\left(\\begin{bmatrix} R_1 \\\\ R_2 \\\\ R_3 \\end{bmatrix}\\right) = \\begin{bmatrix} \\mu_1 \\\\ \\mu_2 \\\\ \\mu_3 \\end{bmatrix} = \\mu \\] \\[ var(R) = \\begin{bmatrix} \\sigma_1^2 &amp; \\sigma_{12} &amp; \\sigma_{13}\\\\ \\sigma_{21} &amp; \\sigma_2^2 &amp; \\sigma_{23}\\\\ \\sigma_{31} &amp; \\sigma_{32} &amp; \\sigma_3^2 \\end{bmatrix} = \\scriptstyle\\sum \\] Here, the covariance is per definition. That is, upper-left triangle values equal lower-left triangle values and the matrix transposed is identical to the original matrix. We can easily see how to write the portfolio expected returns and variances in matrix notation. The expected return of the portfolio is given by: \\[ E[R_{pf}] = \\begin{bmatrix} x_1 &amp; x_2 &amp; x_3 \\end{bmatrix} \\begin{bmatrix} \\mu_1 \\\\ \\mu_2 \\\\ \\mu_3 \\end{bmatrix} = x_1\\mu_1 + x_2\\mu_2 + x_3\\mu_3 \\] And the portfolio variance is given by: \\[ \\begin{align*} var(R_{p,x}) &amp;= var(\\textbf{x}&#39;\\textbf{R}) \\\\ &amp;=\\textbf{x}&#39; \\textbf{R} \\textbf{x}\\\\ &amp;= \\begin{bmatrix} x_1, &amp; x_2, &amp; x_3 \\end{bmatrix} \\begin{bmatrix} \\sigma_1^2 &amp; \\sigma_{12} &amp; \\sigma_{13}\\\\ \\sigma_{21} &amp; \\sigma_2^2 &amp; \\sigma_{23}\\\\ \\sigma_{31} &amp; \\sigma_{32} &amp; \\sigma_3^2 \\end{bmatrix} \\begin{bmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{bmatrix} \\\\ &amp;= \\begin{bmatrix} x_1\\sigma_1^2 + x_2\\sigma_{21} + x_3\\sigma_{31}, &amp; x_1\\sigma_{12} + x_2\\sigma_2^2 + x_3\\sigma_{32}, &amp; x_1\\sigma_{13} + x_2\\sigma_{23} + x_3\\sigma_3^2 \\end{bmatrix} \\begin{bmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{bmatrix} \\\\ &amp;= \\sigma_1^2x_1^2 + \\sigma_2^2x_2^2 + \\sigma_3^2x_3^2 + 2\\sigma_{1,2}x_1x_2 + 2\\sigma_{2,3}x_2x_3 + 2\\sigma_{13}x_1x_3 \\end{align*} \\] This is a very easy expression. Accordingly, we can also compute the covariance between the return on portfolio \\(\\textbf{x}\\) and \\(\\textbf{y}\\) using matrix algebra: \\[ \\begin{align*} \\sigma_{xy} = cov(R_{p,x},R_{p,y}) &amp;= cov(\\textbf{x}&#39;\\textbf{R}, \\textbf{y}&#39;\\textbf{R}) \\\\ &amp;= E[(\\textbf{x}&#39;\\textbf{R} - E[\\textbf{x}&#39;\\textbf{R}]), (\\textbf{y}&#39;\\textbf{R} - E[\\textbf{y}&#39;\\textbf{R}])] \\\\ &amp;= E[(\\textbf{x}&#39;\\textbf{R} - \\textbf{x}&#39;\\mu_x)(\\textbf{y}&#39;\\textbf{R} - \\textbf{y}&#39;\\mu_y)] \\\\ &amp;= E[\\textbf{x}&#39;(\\textbf{R} - \\mu_x)(\\textbf{R} - \\mu_y)&#39;\\textbf{y}] \\\\ &amp;= \\textbf{x}&#39;E[(\\textbf{R} - \\mu_x)(\\textbf{R} - \\mu_y)]\\textbf{y}\\\\ &amp;= \\textbf{x}&#39;\\scriptstyle\\sum_{xy}\\textstyle\\textbf{y} \\end{align*} \\] "],["resampling-distributions.html", "Chapter 3 Resampling Distributions 3.1 Estimating the Moments with Bootstraping 3.2 Bootstrap Confidence Intervals 3.3 Summary on Data", " Chapter 3 Resampling Distributions In this chapter, we will look more closely at Resampling. We understand that each distribution has location, spread and shape parameters. Location parameters defined the actual estimate of the distribution, such as the mean or median. However, we also require spread parameters which quantify the certainty about the estimates. As such, we need to find reasonable quantities that define the certainty of any parameter estimate. This is usually done through the estimation of standard errors. Through their estimation, we are able to draw confidence intervals and conclude statistical properties, as we have encountered in the previous chapter on inductive statistics. The usual issue with finding such parameters is that they may rely on the specific components of the sample. Thus, they are random variables. For instance, if we obtain the mean from a sample A, then this estimate is just one of many potential samples. It does not need to match the mean from sample B or C. Since each different sample will most likely provide a different estimate, the mean was chosen from a random sample given the possible combinations of samples. As such, A is definitively a random variable. Thus, if we assume that the sample has specific properties which may not be generalised well to the population set, then the standard errors retrieved may not be generally applicable metrics. We usually assume that the randomly generated coefficient is the long run average which covers the parameter, by the law of large numbers. This is only possible if we assume certain properties of the population function, such as their moments. However, often exact probability calculations cannot be conducted. In these cases, we replace the theoretical formulas by Monte Carlo simulations and sample from the population. However, what if we do not know anything about the population? That is, we work with an unknown population? This is where resampling, or bootstrap, methods come into play. In this case, we simply sample from the sample. This is known as resampling. By bootstrap approximation we understand the approximation of the sampling process by resampling. They involve repeatedly drawing samples from a sample set and refitting a model of interest on each sample in order to obtain additional information about the fitted model. Such an approach may allow us to obtain information that would not be available from fitting the model only once using the original training sample. In essence, we have two forms of resampling methods: Non-Parametric: Model Free Parametric: Model Based In Non-Parametric Bootstraps, one takes resamples with replacement and assumes no pre-defined form of the density function. We need replacement because replacement gives us IID observations. In Parametric Bootstraps, we don’t take a sample, but assume that the original sample is IID and follows a parametric family distribution. That is, we have \\(f(x|\\theta): \\theta \\in \\Theta\\). As such, any unknown value of \\(\\theta\\) is the population density. Then, the resamples are IID draws from the density with an estimated \\(\\hat\\theta\\). 3.1 Estimating the Moments with Bootstraping Let’s consider first the theoretical concepts on how to bootstrap the most central statistical properties of a sample. To do so, we assume the following. Let \\(\\theta\\) be a parameter and \\(\\hat\\theta\\) be the estimate of the sample. Further, \\(\\hat\\theta_1*, \\dots, \\hat\\theta_B*\\) are the estimates from resamples 1 to B. Further, \\(\\tilde{\\hat\\theta}\\) is the mean of \\(\\hat\\theta_1*, \\dots, \\hat\\theta_B*\\). Then, we obtain the Bias of the bootstrap as: \\[ Bias_{boot}(\\hat\\theta) = \\tilde{\\hat\\theta} - \\hat\\theta \\] The Standard Error of the bootstrap is the sample standard deviation of \\(\\hat\\theta_1*, \\dots, \\hat\\theta_B*\\): \\[ s_{boot}(\\hat\\theta) = \\sqrt{\\frac{1}{B-1}}\\sum_{b=1}^B(\\hat\\theta_b* - \\tilde{\\hat\\theta})^2 \\] Further, the MSE is given as: \\[ MSE_{boot}(\\hat\\theta) = \\frac{1}{B}\\sum_{b=1}^B(\\hat\\theta_b* - \\tilde{\\hat\\theta}) \\] This MSE represents, as always, bot the bias and variance of the samples, and is given as: \\[ MSE_{boot}(\\hat\\theta) \\approx Bias^2_{boot}(\\hat\\theta) + s^2_{boot}(\\hat\\theta) \\] We can apply the bootstrap method directly to calculate the estimates. Doing so, we again use the data on the SMI. # Load the dataset SMI &lt;- read.csv(&quot;~/Desktop/Master UZH/Data/A2_dataset_03.txt&quot;, header = T, sep = &quot;\\t&quot;)[,1:2] # Create the returns SMI_ts &lt;- Return.calculate(xts(SMI[,-1], order.by = as.Date(SMI[,1]), method = &quot;log&quot;))[-1] colnames(SMI_ts) &lt;- c(&quot;Return&quot;) SMI_df &lt;- as.data.frame(SMI_ts)$Return We use the bootstrap method with the bootstrap package. This function has three arguments: Data Value of the Bootstrap repetitions B Function computing the statistic to be bootstrapped Then, we compute the Bootstrap Mean and Standard Errors as well as the sample MLE and its Standard Errors with the fitdistr() function of the MASS package. This function takes especially two arguments: Data densfun densfun is an argument which uses the density function that we define. In this case, we will take the t-statistics density function. Others include “beta”, “cauchy”, “chi-squared”, “exponential”, “gamma”, “geometric”, “log-normal”, “lognormal”, “logistic”, “negative binomial”, “normal”, “Poisson”, or “weibull”. Based on this density function, we define the MLE distribution used in the bootstrap and the sample. # First, we calculate the set.seed(19960531) # Create the bootstrap nboot = 1000 mle = function(x){as.vector(fitdistr(x, &quot;t&quot;)$estimate)} # This function now conducts 1000 bootstraps by taking 1000 random samples and calculating the mean, the standard deviation and the DOF res = bootstrap(SMI_df, nboot, mle) # Compute the estimates and SE of the bootstrap ## Here, we take the mean values of each row. The rows are ### (I) Estimates ### (II) Standard errors ### (III) DOF mean_bs &lt;- rowMeans(res$thetastar[,]) # Then, we calculate the standard deviations se_bs &lt;- apply(res$thetastar[,], 1, sd) # Compute the estimates and SE of the MLE larger sample mean_mle &lt;- fitdistr(SMI_df, densfun = &quot;t&quot;)$estimate sd_mle &lt;- fitdistr(SMI_df, densfun = &quot;t&quot;)$sd # Combine all to show the similarities mle_bs &lt;- rbind(mean_mle, mean_bs, sd_mle, se_bs) rownames(mle_bs) &lt;- c(&quot;Estimate&quot;, &quot;Estimate BS n = 1000&quot;, &quot;SE&quot;, &quot;SE BS n = 1000&quot;) # Plot mle_bs ## m s df ## Estimate 0.008248028 0.035654368 5.411859 ## Estimate BS n = 1000 0.008160442 0.035886503 6.354277 ## SE 0.002111809 0.002342880 1.594899 ## SE BS n = 1000 0.002183371 0.002556044 2.589372 We can calculate the Bias as the difference between the estimate and bootstrap estimate mean. Further, the variability is calculated through the difference in standard errors. This is given as: Bias_BS = mle_bs[1,1] - mle_bs[1,2] Bias_BS ## [1] -0.02740634 Both are rather small, although the bias is smaller than the variability. We can also increase the certainty by taking different density functions we deem to better fit the data. Importantly, we can also plot the density of the bootstraps to understand for which values of n the MLE is quasi normally distributed. In order to do so, we can do the following: dof &lt;- as.data.frame(res$thetastar[3,]) colnames(dof) &lt;- &quot;DOF&quot; # Create plot dof %&gt;% ggplot(aes(x = DOF)) + geom_density(aes(y=..density..), position=&quot;identity&quot;, alpha=0.5, color = &quot;goldenrod&quot;) + ggtitle(&quot;Kernel density estimates of 1000 bootstrap estimates on the DOF&quot;) + ylab(&quot;Density&quot;) + xlab(&quot;DOF&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) This shows importantly that the SMI returns, when considered at a monthly interval, do not follow a unimodal, normal distribution. Rather, it is bimodal with severe right skewed properties. This has important implications on the distribution assumption. We understand that, in a normal distribution, the DOF is \\(\\infty\\). However, in this bootstrapped example, we can see that the DOF is likely to be less than approximately 13. As such, even the most extreme DOF are unlikely to satisfy the condition needed for normal distribition. As such, n = 392 is not enough to assume a normal distribution of the returns. As such, the t-distribution is better suited. 3.2 Bootstrap Confidence Intervals Besides the mean, standard error and DOF to infer on the properties of a sample distribution and its empirical validity, we can also use bootstrap to construct confidence intervals (CI). In the case of bootstraps, we take an approximation of the population probability distribution using individual samples. When CIs use approximations, then there are two coverage probabilities: Nominal and Actual. We can calculate both and show their discrepancies from the bootstrap. This is needed to calculate the accuracy of a bootstrapped CI, which is the difference between the two. 3.2.1 Bootstrap of Normal CI We again define \\(\\hat\\theta\\) as estimate and \\(s_{boot}(\\hat\\theta\\) as its standard deviation. Then, the CI is just calculated in the usual way as: \\[ \\hat\\theta \\pm s_{boot}(\\hat\\theta)z_{\\alpha/2} \\] Then the CI can be calculated in the original way. Please also note that we do not assume that the population is normally distributed. Rather, \\(\\hat\\theta\\) follows a normal distribution according to the CLT. 3.2.2 Bootstrap of t-CI If we have a standard error of \\(\\hat\\theta\\) available, we can use the Bootstrap-t method where we obtain more accurate CIs. We can easily show how the bootstrap-t and the usual t CI method are related. To do so, we use the usual t-statistic given by: \\[ t = \\frac{\\mu - \\bar Y }{s/\\sqrt{n}} \\] For normally distributed data, we understand that the probability distribution of t has n-1 degrees of freedom. Consequently, \\(t_{\\alpha/2, n-1}\\) quantifies the \\(\\alpha/2\\) upper and lower quantile values of the distribution. Therefore, we get: that the probability is \\(1-\\alpha\\) for: \\[ -t_{\\alpha/2, n-1} \\leq t \\leq t_{\\alpha/2, n-1} \\] and further: \\[ 1-\\alpha = P[\\bar Y - t_{\\alpha/2, n-1}\\frac{s}{\\sqrt{n}} \\leq \\mu \\leq \\bar Y + t_{\\alpha/2, n-1}\\frac{s}{\\sqrt{n}}] \\] and finally: \\[ \\bar Y \\pm \\frac{s}{\\sqrt{n}} t_{\\alpha/2, n-1}\\frac{s}{\\sqrt{n}} \\] is a \\(1-\\alpha\\) CI for \\(\\mu\\) if we assume a normal distribution. Please revisit the chapter on inductive statistics to have a more elaborate discussion on this. If we are not sampling from a normal distribution, we can no longer conduct this type of inference for the CIs. This is because we do not know the probability distribution. Further, even if we knew it, we could mathematically not precisely transform the distribution into a t-distribution. However, we can do so by using the bootstrap. In this case, we just calculate: \\[ t_{boot,b} = \\frac{\\bar Y - \\bar Y_{boot,b}}{s_{boot,b}/\\sqrt{n}} \\] Here we just replaced the mean and sd MLE with the bootstrapped alternatives. Since all observations are independent of each other, the bootstrap estimates can be treated as a random sample from the distribution of the t-statistic. After we calculate B values of the t-statistic, we can find the \\(\\alpha/2\\) upper and lower quantiles of these values. They can be calculated independent of each other. Based on this, we then have the CI given as: \\[ CI = (\\bar Y - t_L\\frac{s}{\\sqrt{n}}, \\bar Y + t_U\\frac{s}{\\sqrt{n}}) \\] where we just replaced the usual t-values by the bootstrapped forms called \\(t_L\\) and \\(t_U\\). As such, by creating an empirical distribution from the sample where we have an equally weighted resampling, we can create a probability distribution used for CIs. Of course, we can expand the use of the t-bootstrapped CI to obtain CIs of other parameters, such as the standard deviation or further moments. To do so, we can take the usual function and apply it onto another bootstrapped parameter: \\[ t_{boot,b} =\\frac{\\hat\\theta - \\hat\\theta_b*}{s_b(\\hat\\theta)} \\] Then, the CI will again be: \\[ CI = (\\hat\\theta - t_Ls(\\hat\\theta), \\hat\\theta + t_Us(\\hat\\theta)) \\] Now, let’s look at an example for the CI calculation again. We know from the chapter on qunatile-based location, scale and shape parameters that a quantile-based parameter representing the tail weight is defined as the ration of two scale parameters: \\[ \\frac{s(p_1, 1-p_1)}{s(p_2, 1-p_2)} \\] whereas: \\[ s(p_1, 1-p_1) = \\frac{F^{-1}(1-p_1) - F^{-1}(p_1)}{a} \\] Now, we can retrieve the mean of the respective tail weights. However, obtaining a CI is easily possible with a bootstrap as we will show. We will calculate \\(BC_a\\) CIs. These are CIs which are bias corrected and accelerated. They are a form of sophisticated percentile methods which correct for bias and heteroskedasticity in bootstrapping methods. This method estimates the bias and the rate of change of the variance. This is done with the bcanon() function of the bootstrap package. Let’s apply this to the SMI returns. We essentially follow the same process as earlier. But now, instead of the mean from the t-distribution, we calculate the CI for the tail distribution. This is done by defining a function we call “heavy_t”. Then, we use the bias corrected bootstrap method and run the usual formula to obtain the CIs. # First, define a function which calculates the shape parameter: heavy_t = function(x, p1 = 0.02, p2 = 0.25){ q = quantile(x, c(p1,p2,1-p2,1-p1)) (q[4] - q[1]) / (q[3] - q[2]) } # Then, calculate the bootstrap as before, but bias corrected. Doing so, you need the bcanon function bca_ht = bcanon(SMI_df, 2000, heavy_t) bca_ht$confpoints ## alpha bca point ## [1,] 0.025 3.141040 ## [2,] 0.050 3.216642 ## [3,] 0.100 3.315608 ## [4,] 0.160 3.390420 ## [5,] 0.840 4.032531 ## [6,] 0.900 4.140335 ## [7,] 0.950 4.291562 ## [8,] 0.975 4.438047 As such, we can see that the 90% CI is between (3.19, 4.25). Note that this is the formula for \\((\\bar Y - t_L\\frac{s}{\\sqrt{n}}, \\bar Y + t_U\\frac{s}{\\sqrt{n}})\\). In any purely normal distribution, the value would be approximately 2.91. Consequently, we expect higher tail risk, which could not be approximated by normal distributions. 3.3 Summary on Data In the next chapter, we will look at certain general methods that we used in the previous sub-chapters. Doing We now look at the Walmart stock prices to define the data we are working with # Get walmart and transform to xts object WMT &lt;- tq_get(&quot;WMT&quot;, from = &quot;1990-01-01&quot;, to = &quot;2022-02-01&quot;, get = &quot;stock.prices&quot;) WMT_ts &lt;- xts(WMT[,8], order.by = as.Date(WMT$date)) # Calculate returns WMT_ts_ret &lt;- WMT_ts %&gt;% Return.calculate(method = &quot;log&quot;) WMT_ts_ret &lt;- WMT_ts_ret[-1] Based on this, we now follow certain tests to ensure that we understood the bootstrap principles. For instance, we said that sometimes the data may not follow a normal distribution. This can be the case if we assume a skewed distribution with heavy tails. Consequently, we may wonder what a skewed t-distribution actually looks like. To do so, we can take the help of the qsstd function. # First, we define the function for the parameter distribution, as with all common distributions before. a &lt;- rsstd(100000, mean = 0, sd = 1, nu = 5, xi = 3) b &lt;- rsstd(100000, mean = 2, sd = 1, nu = 5, xi = 1.5) c &lt;- rsstd(100000, mean = 0, sd = 2, nu = 5, xi = 1.5) d &lt;- rsstd(100000, mean = 0, sd = 1, nu = 10, xi = 1.5) e &lt;- rsstd(100000, mean = 0, sd = 1, nu = 10, xi = -1.5) df_rsstd &lt;- as.data.frame(cbind(a,b,c,d,e)) colnames(df_rsstd) = c(&quot;Skew-T(0,1,5,3)&quot;, &quot;Skew-T(2,1,5,1.5)&quot;, &quot;Skew-T(0,2,5,1.5)&quot;, &quot;Skew-T(0,2,10,1.5)&quot;, &quot;Skew-T(0,2,10,-1.5)&quot;) df_rsstd_melt &lt;- melt(df_rsstd) ## No id variables; using all as measure variables #Plot df_rsstd_melt %&gt;% ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = 0.2) + theme_bw() + xlim(-5,5) ## Warning: Removed 3924 rows containing non-finite values (stat_density). As we can see, we can define four parameters. We find the following: The mean just shifts the location of the distribution The standard deviation increases the spread of the distribution The nu parameter is the shape parameter. The larger, the more tail weights The xi parameter is the skewness parameter. The higher, the more right-skewed (positive right skewed, negative left skewed) Since we stated that many returns may not be normally distributed, it is interesting to see how the different distributions can fit onto the data at hand. To do so, we can plot two distinct QQ-Plots on the data and compare their fit. # First, we calculate the dataframe WMT_df &lt;- as.data.frame(WMT_ts_ret)[,1] # Fit skewed t-distribution fit_skew_t = sstdFit(WMT_df) # Then we define a grid onto which we will employ the skewed t-values. n = length(WMT_df) q.grid = (1:n) / (n+1) # Then we create Skew Student-t Distribution and Parameter Estimation values to to compute the quantiles of distribution function. This is the same approach as we would use to simulate a skewed t-distribution (for instance, with F/S or A/C skewness). Here, we calculate the quantile values to plot them against the actual observations. q_skew &lt;- qsstd(q.grid, mean = fit_skew_t$estimate[1], sd = fit_skew_t$estimate[2], nu = fit_skew_t$estimate[3], # Shape parameter xi = fit_skew_t$estimate[4]) # skewness parameter # Create DF qq &lt;- qqplot(WMT_df, q_skew, ylab = &quot;skewed-t quantiles&quot; ) qq_df &lt;- as.data.frame(cbind(qq$x, qq$y)) colnames(qq_df) &lt;- c(&quot;skewed-t quantiles&quot;, &quot;Return Walmart&quot;) # Plot the qqplot qq_df %&gt;% ggplot(aes(x = `skewed-t quantiles`, y = `Return Walmart`)) + geom_point(color = &quot;goldenrod&quot;) + ggtitle(&quot;Q-Q Plot of Walmart Returns&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) Given the QQ-Plot, we can observe that it fits the data with certain outliers on both sides. As such, we can observe that the data can fit approximately the t-skewed distribution. However, there still are some discrepancies. But given the normal distribution, we have seen improvements in the resampling. Next on, we are interested in finding out about the Kurtosis. Note that we can create a kurtosis with the fourth moment order. Based on this kurtosis, we then implement both a parametric and non-parametric resampling technique, also based on the skewness of the t-distribution to account for heavy tails. quKurt = function(y, p1 = 0.025, p2 = 0.25){ Q = quantile(y, c(p1, p2, 1 - p2, 1 - p1)) k = (Q[4] - Q[1]) / (Q[3] - Q[2]) k } nboot = 5000 ModelFree_kurt = rep(0, nboot) ModelBased_kurt = rep(0, nboot) set.seed(&quot;5640&quot;) for (i in 1:nboot){ samp_ModelFree = sample(WMT_df, n, replace = TRUE) samp_ModelBased = rsstd(n, fit_skew_t$estimate[1], fit_skew_t$estimate[2], fit_skew_t$estimate[3], fit_skew_t$estimate[4]) ModelFree_kurt[i] = quKurt(samp_ModelFree) ModelBased_kurt[i] = quKurt(samp_ModelBased) } dens &lt;- density(ModelFree_kurt) # Create DF dF_qk &lt;- as.data.frame(cbind(ModelFree_kurt, dens$x, dens$y)) ## Warning in base::cbind(...): number of rows of result is not a multiple of vector length (arg 2) # Create plot a &lt;- dF_qk %&gt;% ggplot(aes(x = ModelFree_kurt)) + geom_histogram(aes(y=..density..), position=&quot;identity&quot;, alpha=0.5, color = &quot;goldenrod&quot;) + geom_line(aes(x = dF_qk$V2, y = dF_qk$V3), color = &quot;violetred4&quot;) + ggtitle(&quot;Histogram and Gaussian Kernel Density&quot;) + ylab(&quot;Density&quot;) + xlab(&quot;Value&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) # Create DF dens_param &lt;- density(ModelBased_kurt) dF_qk_param &lt;- as.data.frame(cbind(ModelBased_kurt, dens_param$x, dens_param$y)) ## Warning in base::cbind(...): number of rows of result is not a multiple of vector length (arg 2) b &lt;- dF_qk_param %&gt;% ggplot(aes(x = ModelBased_kurt)) + geom_histogram(aes(y=..density..), position=&quot;identity&quot;, alpha=0.5, color = &quot;goldenrod&quot;) + geom_line(aes(x = dF_qk_param$V2, y = dF_qk_param$V3), color = &quot;violetred4&quot;) + ggtitle(&quot;Histogram and Gaussian Kernel Density&quot;) + ylab(&quot;Density&quot;) + xlab(&quot;Value&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) a + b + plot_layout(ncol = 1, heights = c(5, 5)) ## Warning: Use of `dF_qk$V2` is discouraged. Use `V2` instead. ## Warning: Use of `dF_qk$V3` is discouraged. Use `V3` instead. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## Warning: Use of `dF_qk_param$V2` is discouraged. Use `V2` instead. ## Warning: Use of `dF_qk_param$V3` is discouraged. Use `V3` instead. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. "],["inductive-statistics-and-regression-analysis-fundamentals.html", "Chapter 4 Inductive Statistics and Regression Analysis Fundamentals 4.1 Inductive Statistics 4.2 Introduction to Regression Analysis", " Chapter 4 Inductive Statistics and Regression Analysis Fundamentals The third chapter covers Inductive Statistics and Regression modeling. Therein, we cover inductive properties of statistical distributions, such as confidence intervals and hypothesis tests, and dig into univariate Linear Regression based on correlation &amp; covariance properties we learned throughout the first weeks. Further, we introduce the connection of equity and \\(\\beta\\) in form of the equity risk premium, define certain options to calculate a \\(\\beta\\) factor, and use the concept of \\(\\beta\\) within a regression setting. 4.1 Inductive Statistics We now covered the theoretical founding stones of statistical analysis. Now, it is time to dig deeper into one of the major applications of these properties in inferential analysis. To do so, we will introduce the concept of inductive statistics. Inductive statistics is the branch of statistics dealing with conclusions, generalizations, predictions, and estimations based on data from samples. In essence, inductive statistics takes information from a representative sample and attempts to generalise it to a general population. Representative here means that we can assume that the population follows the same distributional properties as the sample, thereby implying that all properties that show to hold in a sample can be generalised to the true population. Consequently, we use the term inductive because we “induce” something from a given sample. Inductive statistics are very applied since it is generally infeasible or simply too involved to analyze the entire population in order to obtain full certainty as to the true environment. For instance, we can never rely on the entire time-series of observations to define a return. Consequently, to obtain insight about the true but unknown parameter value, we draw a sample from which we compute statistics or estimates for the parameter. In this chapter, we will cover three main parts: Point Estimators, Confidence Intervals and Hypotheses Testing. When considering Point Estimators, we learn about samples, statistics, and estimators. Most of the topics are built on the statistical properties used earlier.In particular, we present the linear estimator, explain quality criteria (such as the bias, mean-square error, and standard error) and the large-sample criteria. Related to the large-sample criteria, we present the fundamental theorem of consistency, for which we need the definition of convergence in probability and the law of large numbers. As another large-sample criterion, we introduce the unbiased efficiency, explaining the best linear unbiased estimator (BLUE) or, alternatively, the minimum variance linear unbiased estimator. We then discuss the maximum likelihood estimation technique, one of the most powerful tools in the context of parameter estimation. When using Confidence Intervals, we present the confidence interval. We then present the probability of error in the context of confidence intervals, which is related to the confidence level. We then conclude the chapter by performing hypotheses testing. To test for these, we develop a test statistic for which we set up a decision rule. For a specific sample, this test statistic then either assumes a value in the acceptance region or the rejection region, regions that we describe in this chapter. Furthermore, we see the two error types one can incur when testing. We see that the hypothesis test structure allows one to control the probability of error through what we see to be the test size or significance level. We discover that each observation has a certain p-value expressing its significance. As a quality criterion of a test, we introduce the power from which the uniformly most powerful test can be defined. 4.1.1 Point Estimators We use the information obtained from the sample, or better, the statistic, to infer about a point estimator of a certain parameter \\(\\theta\\). Formally, if we do this, we refer to the estimation function as an estimator and denote it by: \\[ \\hat{\\theta} : X \\rightarrow \\Theta \\] This means we take the sample space X and map it into the set space \\(\\Theta\\) (if you don’t know any more the distinction between these values, go to the book in Chapter 3.1). But, in general, this just means that we create an estimator of a parameter, that we usually denote with a “hat” sign, \\(\\hat{}\\), from a sample we observe and that this estimator is valid for an unobservable population because we assume that we can “map” or “generalise” this sample to this population (set space) (b/c we assume it has the same attributes). The exact structure of the estimator is predetermined before the sample is realized. After the estimator has been defined, we simply need to enter the sample values accordingly. Due to the estimator’s dependence on the random sample, the estimator is itself random. A particular value of the estimator based on the realization of some sample is called an estimate. We will show you in simulation studies that, if we repeat the same draw multiple times, we will always receive slightly different moments of a probability distribution (but, if repeated sufficient times, the variance between these draws will diminish). For instance, if we realize 1000 samples of given length n, we obtain 1000 individual estimates. Sorting them by value—and possibly arranging them into classes—we can compute the distribution function of these realizations, which is similar to the empirical cumulative distribution function 4.1.1.1 Estimators for the mean As an illustration, let’s create normally distributed returns with parameters \\(\\mu\\) and \\(\\sigma^2\\) such that \\(Y = N(\\mu, \\sigma^2)\\). Let’s define that we have 10, 100, 1’000 and 10’000 individual samples for IID draws of X. Then, we compute the mean as: \\[ \\hat{x_i} = \\frac{1}{n}\\sum_{i=1}^nX_i \\] # Set a random seed set.seed(124) # Draw 10, 100, 1000 and 10000 distributions with random numbers x_10 &lt;- as.data.frame(rnorm(10)) colnames(x_10) &lt;- &quot;x&quot; x_100 &lt;- as.data.frame(rnorm(100)) colnames(x_100) &lt;- &quot;x&quot; x_1000 &lt;- as.data.frame(rnorm(1000)) colnames(x_1000) &lt;- &quot;x&quot; x_10000 &lt;- as.data.frame(rnorm(10000)) colnames(x_10000) &lt;- &quot;x&quot; # Create plots p10 &lt;- x_10 %&gt;% ggplot(aes(x=x)) + geom_histogram(bins = 100) + ggtitle(&quot;n = 10&quot;) p100 &lt;- x_100 %&gt;% ggplot(aes(x=x)) + geom_histogram(bins = 100) + ggtitle(&quot; n = 100&quot;) p1000 &lt;- x_1000 %&gt;% ggplot(aes(x=x)) + geom_histogram(bins = 100) + ggtitle(&quot;n = 1000&quot;) p10000 &lt;- x_10000 %&gt;% ggplot(aes(x=x)) + geom_histogram(bins =100) + ggtitle(&quot;n = 10000&quot;) # Merge plots Rmisc::multiplot( p10 + theme_fivethirtyeight(), p1000 + theme_fivethirtyeight(), p100 + theme_fivethirtyeight(), p10000 + theme_fivethirtyeight(), cols = 2) We see that the distribution of the sample means copy quite well the appearance of the theoretical sample distribution density function if we increase n. This is the first intuition behind what we call sampling statistics. As you’ve seen in earlier courses, this is one of the fundamental ideas behind inductive statistics. 4.1.1.2 Linear Estimators Let’s start introducing linearity into the concept of inductive statistics. To do so, we introduce the linear estimator. Suppose we have a sample of size n such that \\(X = (X_1, X_2, \\dots, X_n)\\). The linear estimator then has the following form: \\[ \\hat{\\theta} = \\sum^n_{i=1}a_iX_i \\] Where each draw of \\(X_i\\) is weighted by some real number, \\(a_i\\). We know that the linear estimator is normally distributed. This understanding is based on two important properties introduced in basic statistics, if we assume independent and identically distributed draws (IID). Property 1 - location-scale invariance property: If we multiply X by b and add a where a and b are real numbers, the resulting \\(a + b\\cdotX\\) is again normally distributed with other units of measurement: \\(N(a+\\mu, b\\sigma)\\) Property 2 - stability under summation: The sum of an arbitrary number n of normal random variables (\\(X_1,\\dots,X_n\\)) is again normally distributed Thus, any linear estimator will be normal. This is an extremely attractive feature of the linear estimator, as it allows us to draw inference based on Gaussian distribution properties. This is also the reason why we normally assume linearity in empirical, econometric models. As such, even if the underlying distribution is not the normal distribution, according to the Central Limit Theorem, the sample mean will be approximately normally distributed as the sample size increases within linear settings. This is what we have seen before when we have drawn multiple sample means and plotted them as a histogram. This result facilitates parameter estimation for most distributions. So, even though the exact value of the point estimator, with \\((\\mu, \\sigma^2)\\), is unknown, we observe the distribution of the sample means and try to find the location of the center. For instance, if we have a Bernoulli Distribution with \\(\\mu = 0\\), we can use the formula for the sample mean and draw a large number of individual samples, calculate the mean from each sample and plot its distribution as a histogram. Accordingly, we then take the distributional properties and understand that it will follow an approximately normal distribution with \\((\\mu, \\sigma^2)\\) and thus can infer that the “true” sample mean is at the location center of the distribution of the sample means. This is also known as Law of Large Numbers and will be introduced shortly. p10000_normal_dist &lt;- x_10000 %&gt;% ggplot(aes(x=x)) + geom_histogram(aes(y = ..density..),bins =100) + stat_function(fun = dnorm, colour = &quot;red&quot;, size = 1, linetype = &quot;dashed&quot;, args = list(mean = mean(x_10000$x), sd = sd(x_10000$x))) p10000_normal_dist 4.1.1.3 Quality Criteria of Estimators The question related to each estimation problem should be what estimator would be best suited for the problem at hand. Estimators suitable for the very same parameters can vary quite substantially when it comes to quality of their estimation. Here we will explain some of the most commonly employed quality criteria. Bias An important consideration in the selection of an estimator is the average behavior of that estimator over all possible scenarios. Depending on the sample outcome, the estimator may not equal the parameter value and, instead, be quite remote from it. This is a natural consequence of the variability of the underlying sample. However, the average value of the estimator is something we can control. For that, we first consider the sampling error. This is the difference between the estimate and the population parameter. The expected value of the sampling error is defined as Bias and is given as: \\[ E(\\hat{\\theta} - \\theta) \\] If the expression is equal to zero, then we say this is an unbiased estimator. Let’s illustrate the concept of bias in the case of our sample mean and sample variance. Sample Mean Whenever a population mean has to be estimated, a natural estimator of choice is the sample mean. Let us examine its bias. This is given by: \\[ \\begin{align*} E(\\bar{X} - \\mu) &amp;= E(\\frac{1}{n}\\sum_{i=1}^nX_i - \\mu) \\\\ &amp;= \\frac{1}{n}\\sum_{i=1}^nE(X_i) - \\mu &amp;&amp; \\text{the expected value of } \\mu \\text{ is } \\mu \\\\ &amp;= \\frac{1}{n}\\sum_{i=1}^n\\mu - \\mu &amp;&amp; \\text{the expected value is } \\mu \\\\ &amp;= \\frac{1}{n}n\\mu - \\mu \\\\ &amp;= 0 \\end{align*} \\] So the sample mean is unbiased. Sample Variance The sample variance is given as: \\[ s^2 = \\frac{1}{n}\\sum^n_{i=1}(x_i - \\bar{x})^2 \\] Then, we compute, but not show, the bias of the sample variance, as: \\[ \\begin{align*} E(s^2-\\sigma^2) &amp;= \\sigma^2 - \\frac{n-1}{n}\\sigma^2 \\\\ &amp;= \\frac{1}{n}\\sigma^2 \\end{align*} \\] That is, the bias of the sample variance is negligible if n is sufficiently large. Mean Squared Error As just explained, bias as a quality criterion tells us about the expected deviation of the estimator from the parameter. However, the bias fails to inform us about the variability or spread of the estimator. For a reliable inference for the parameter value, we should prefer an estimator with rather small variability or, in other words, high precision. The Mean Squared Error incorporates both properties. It includes both a term to account for the bias, the expected deviation of the estimator, as well as the precision, the variability (variance) of the estimator. The sampling distribution provides us with both a theoretical measure of the mean as well as the spread of the estimator, that is its variance. The suqare root of the variance is also called standard error and is given as: \\[ \\sqrt{Var(\\hat{\\theta_n})} \\] This value constitutes the spread, or variability, of the sample distribution. We use the mean squared error because, although we stated the bias as an ultimately preferable quality criterion, a bias of zero may be too restrictive a criterion if an estimator is only slightly biased but has a favorably small variance compared to all possible alternatives, biased or unbiased. So, we need some quality criterion accounting for both bias and variance. Taking squares rather than the loss itself incurred by the deviation, the MSE is defined as the expected square loss: \\[ MSE(\\hat{\\theta}) = E[(\\theta - \\hat{\\theta})^2] \\] If we reformulate this expression, we retrieve a very famous expression used in Machine Learning and Econometrics. This term is also known as the Bias-Variance Trade-Off and is derived as follows: \\[ \\begin{align} E[(\\theta - \\hat{\\theta})^2] &amp;= E[(\\theta + \\epsilon - \\hat{\\theta})^2] \\\\ &amp;= E[(\\theta + \\epsilon - \\hat{\\theta} + E[\\hat{\\theta}] - E[\\hat{\\theta}])^2] \\\\ &amp;= E[(\\theta - \\hat{\\theta})^2] + E[\\epsilon^2] + E[(E[\\hat{\\theta}]- \\hat{\\theta})^2] + 2E[(\\theta - E[\\hat{\\theta}])\\epsilon] 2E[(E[\\hat{\\theta}]- \\hat{\\theta})\\epsilon] + 2E[(E[\\hat{\\theta}]- \\hat{\\theta})(\\hat{\\theta} - E[\\hat{\\theta}])] \\\\ &amp;= (\\theta - \\hat{\\theta})^2 + E[\\epsilon^2] + E[(E[\\hat{\\theta}]- \\hat{\\theta})^2] + \\underbrace{2(\\theta - E[\\hat{\\theta}])E[\\epsilon] + 2E[(E[\\hat{\\theta}]- \\hat{\\theta})]E[\\epsilon] + 2E[(E[\\hat{\\theta}]- \\hat{\\theta})](\\hat{\\theta} - E[\\hat{\\theta}])}_{\\text{if written out, this will all cancel each other out, thereby = 0}} \\\\ &amp;= \\underbrace{(\\theta - \\hat{\\theta})^2}_{\\text{Bias term}} + E[\\epsilon^2] + \\underbrace{E[(E[\\hat{\\theta}]- \\hat{\\theta})^2]}_{\\text{Variance term}} \\\\ &amp;= Bias[\\hat{\\theta}]^2 + Var[\\hat{\\theta}] + Var[\\epsilon] \\end{align} \\] So, we see that the mean-square error is decomposed into the variance of the estimator and a transform (i.e., square) of the bias, including a general, systematic bias term. This is a general dilemma of each estimation strategy. In the end, we want to minimise the MSE, implying that we want a model that is unbiased but not too variable, as an increased variation induces noise. 4.1.1.4 Large Sample Criteria Now, we have seen the properties of linear estimators and derived two important notions to define the accuracy of a sample estimator related to its population counterpart. However, another important characteristic in inductive statistics are asymptotic properties. That is, the behavior of the estimator if the sample size approaches infinity. The two most important concepts in this field are consistency and efficiency (unbiasedness) consistency In order to think about consistency, we need to understand some aspects of the Central Limit Theorem. The asymptotic properties may facilitate deriving the large sample behavior of more complicated estimators. One of these aspects is given as convergence in probability. That means we consider whether the distribution of an estimator approaches some particular probability distribution as the sample sizes increase. To proceed, we state the following definition. \\[ \\lim_{n \\rightarrow \\infty}P(|\\hat{\\theta}_n - c|&gt; \\epsilon) = 0 \\] This property states that as the sample size becomes arbitrarily large, the probability that our estimator will assume a value that is more than \\(\\epsilon\\) away from c will become increasingly negligible, even as \\(\\epsilon\\) becomes smaller. That is, we say that \\(\\hat{\\theta}_n\\) converges in probability to c: \\[ plim\\hat{\\theta}_n = c \\] Convergence in probability does not mean that an estimator will eventually be equal to c, and hence constant itself, but the chance of a deviation from it will become increasingly unlikely. Suppose now that we draw several samples of size n. Let the num- ber of these different samples be N. Consequently, we obtain N estimates, \\(\\hat{\\theta}_n^{(i)}\\). Utilizing the prior definition, we formulate the following law. \\[ plim \\frac{1}{N}\\sum_{i=1}^N \\hat{\\theta}_n^{(i)} = E(\\hat{\\theta}_n) \\] This is a valuable property since when we have drawn many samples, we can assert that it will be highly unlikely that the average of the observed estimates will be a realization of a remote parameter. An important aspect of the convergence in probability becomes obvious now. Even if the expected value of \\(\\hat{\\theta}_n\\) is not equal to \\(\\theta\\) in finite samples, it can still be that \\(plim \\hat{\\theta}_n = \\theta\\). That is, the expected value may gradually become closer to and eventually indistinguishable from \\(\\theta\\), as the sample size n increases. To account for these and all unbiased estimators, we introduce the definition of Consistency. \\[ plim\\hat{\\theta}_n = \\theta \\] This is exactly what we were able to portray in the histograms above. That is if we have a linear estimator and we draw N IID samples from this estimator, then we know that, as N approaches infinity, the estimator will (I) follow a Normal distribution property (=asymptotically normal) and (II) the average of all sample means will approach the expected value of the population mean (=consistent), implying that, even if we have bias in finite samples, this bias will diminish in large samples. Unbiased Efficiency In the previous discussions in this section, we tried to determine where the estimator tends to. This analysis, however, left unanswered the question of how fast the estimator gets there. For this purpose, we introduce the notion of unbiased efficiency. For that, let us suppose we have two unbiased estimators, \\(\\hat{\\theta}\\) and \\(\\hat{\\theta}^*\\). Then, we say that \\(\\hat{\\theta}\\) is a more efficient estimator than \\(\\hat{\\theta}^*\\) if it has a smaller variance; that is: \\[ Var_\\theta(\\hat{\\theta}) &lt; Var_\\theta(\\hat{\\theta}^*) \\] Consequently, no matter what the true parameter value is, the standard error for the first estimator will always be smaller. In general, both properties are highly important in understanding the precision and pace of sample distribution convergence. 4.1.1.5 Maximum Likelihood Estimator The method we discuss next provides one of the most essential tools for parameter estimation. Due to its structure, it is very intuitive. For that, we first suppose that the distribution of some variable Y is characterised by \\(\\theta\\). Then, we usually draw a random sample of n IID observations. Consequently, as we have seen, the joint probability distribution function of the random sample X is given by: \\[ f_X(x_1,\\dots,x_n) = f_Y(x_1)\\cdot \\dots f_Y(x_n) \\] This is known as the likelihood function. This basically indicates that the distribution of the sample X is governed by the parameter \\(\\theta\\) and is given by: \\[ L_X(\\theta) = f_X(x) \\] Usually, we write this as the log likelihood function due to its additivity principle, which makes computation easier: \\[ l_X(\\theta) = \\ln f_X(x) \\] That means we now defined that the distribution of X is given by the parameter space in \\(\\theta\\). Suppose we observe a particular value \\(x = (x_1, x_2, \\dots, x_n)\\) in our sample. The fundamental question here is which parameter values of \\(\\theta\\) best represent the observed relationship. Formally, that means we need to determine the very parameter value that maximizes the probability of the realized density function at x (if the distribution is continuous). That is, we need maximize the log-likelihood function with respect to all possible values of \\(\\theta\\). From baseline analysis, we know that we derive a maximum value of a parameter in a function by taking the first derivative of the function w.r.t. that parameter and set them equal to zero. In our case, this means for the log-likelihood function: \\[ \\frac{\\delta l_X(\\theta)}{\\delta \\theta} = 0 \\] The resulting estimater of \\(\\theta\\) is then defined as the Maximum Likelihood Estimator (MLE), because it yields the parameter value with the greatest likelihood (probability if discrete, and density function if continuous) of the given observation x. The MLE method is extremely attractive since it often produces estimators that are consistent, asymptotically normally distributed, and asymptotically efficient, which means that, as the sample size increases, the estimators derived become unbiased and have the smallest variance. Let’s now look at the practical application of MLE’s related to specific distributions. MLE of the Poisson Distribution The likelihood function of the Poisson distribution is: \\[ L_x(\\lambda) = \\prod_{i=1}^n\\frac{\\lambda^{x_i}}{x_i!}e^{-\\lambda} \\] Then, the log-likelihood function is given as: \\[ \\begin{align*} l_x(\\lambda) &amp;= ln[e^{-n\\lambda}\\prod_{i=1}^n\\frac{\\lambda^{x_i}}{x_i!}e^{-\\lambda}] \\\\ &amp;= -n\\lambda + ln[\\prod_{i=1}^n\\frac{\\lambda^{x_i}}{x_i!}e^{-\\lambda}] \\\\ &amp;= -n\\lambda + ln(\\prod_{i=1}^n\\lambda^{x_i}) - ln(\\prod_{i=1}^n x_i!) \\\\ &amp;= -n\\lambda + \\sum_{i=1}^n(x_iln(\\lambda)) - \\sum_{i=1}^n(ln(x_i!)) &amp;&amp; \\text{product in ln transforms to sum, the rest is simple log rules} \\end{align*} \\] Now, differentiating w.r.t \\(\\lambda\\) and setting it equal to zero gives us: \\[ \\begin{align} \\frac{\\delta l_x(\\lambda)}{\\lambda} = 0 &amp;= -n + \\sum_{i=1}^n\\frac{x_i}{\\lambda} \\\\ \\lambda &amp;= \\frac{1}{n}\\sum_{i=1}^nx_i = \\bar{x} \\end{align} \\] So, we see that the MLE of the Poisson parameter equals the sample mean. MLE of the Normal Distribution We follow the same approach as before. For that, we first define the usual likelihood function of the normal distribution as: \\[ \\begin{align*} L_x(\\mu, \\sigma^2) &amp;= \\prod_{i=1}^nf_Y(x_i) \\\\ &amp;= Y(x_1) * \\dots * Y(x_n) \\\\ &amp;= \\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-(x_1 - \\mu)^2 / 2\\sigma^2} * \\dots * \\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-(x_n - \\mu)^2 / 2\\sigma^2} \\\\ &amp;= (\\frac{1}{\\sqrt{2\\pi\\sigma^2}})^n\\cdot e^{-\\sum_{i=1}^n(x_i - \\mu)^2 / 2\\sigma^2} \\end{align*} \\] Now, taking the logarithm, we get: \\[ \\begin{align*} l_x(\\mu, \\sigma^2) &amp;= n \\ln(\\frac{1}{\\sqrt{2\\pi\\sigma^2}}) -\\sum_{i=1}^n(x_i - \\mu)^2 / 2\\sigma^2 \\end{align*} \\] Again, if we take the derivative of it w.r.t \\(\\mu\\), we get: \\[ \\begin{align*} \\frac{l_x(\\mu, \\sigma^2)}{\\mu} = 0 &amp;= \\sum_{i=1}^n(x_i - \\mu) / \\sigma^2 \\\\ \\hat{\\mu} &amp;= \\sum_{i=1}^nx_i = \\bar{x} \\end{align*} \\] And w.r.t \\(\\sigma^2\\), we get: \\[ \\begin{align*} \\frac{l_x(\\mu, \\sigma^2)}{\\mu} = 0 &amp;= -\\frac{n}{2\\sigma^2} + \\frac{\\sum_{i=1}^n(x_i-\\mu)^2}{2\\sigma^4} \\\\ n &amp;= \\frac{\\sum_{i=1}^n(x_i-\\mu)^2}{\\sigma^2} \\\\ \\hat{\\sigma}^2 &amp;= \\frac{1}{n}\\sum_{i=1}^n(x_i-\\mu)^2 \\end{align*} \\] which, as we know, is unbiased for the population variance. 4.1.1.6 Fisher Information and the Central Limit Theorem (CLT) We can calculate the SE of an MLE estimator using the Fisher Information. Doing so, we assume that \\(\\theta\\) is again a one-dimensional vector of distribution characters. The Fisher Information is defined as the negative expected second derivative of the log-likelihood function. That is: \\[ \\iota(\\theta) = -E[\\frac{d^2}{d\\theta^2}\\log(L(\\theta))] \\] The SE of \\(\\hat\\theta\\) is then the invesrse of the square root of the Fisher Information: \\[ s_{\\hat\\theta} = \\frac{1}{\\sqrt{\\iota(\\hat\\theta)}} \\] We can make an example for the normal distribution mean. In this case, we assume IID \\(N(0\\sigma^2)\\) known variance. Then, we elaborated that the log-likelihood for \\(\\mu\\) is given as: \\[ \\begin{align*} l_x(\\mu, \\sigma^2) &amp;= n \\ln(\\frac{1}{\\sqrt{2\\pi\\sigma^2}}) -\\sum_{i=1}^n(x_i - \\mu)^2 / 2\\sigma^2 \\end{align*} \\] Again, if we take the derivative of it w.r.t \\(\\mu\\), we get: \\[ \\begin{align*} \\frac{l_x(\\mu, \\sigma^2)}{\\mu} &amp;= \\sum_{i=1}^n(x_i - \\mu) / \\sigma^2 \\end{align*} \\] Taking the second derivative, we get that: \\[ \\frac{l_x^2(\\mu, \\sigma^2)}{\\mu^2} = -\\frac{n}{\\sigma^2} \\] Consequently, the negative expected value for the Fisher Information is: \\[ \\iota(\\hat\\mu) = \\frac{n}{\\sigma^2} \\] and the standard error of \\(\\hat\\mu\\) is given as: \\[ s_{\\hat\\theta} = \\frac{\\sigma}{\\sqrt{n}} \\] We may notice this relation as being the denominator of any statistical property to infer the quantile values of a distribution. This will be further elaborated in a later sub-chapter. Given this result, it can be shown that, for large enough samples, the MLE is approximately normally distributed with mean of the population parameter and variance equal to the inverse of the Fisher Information. As such, we can create test statistics which are assumed to behave similar to the population probability distribution. As such, we can define the following CI: \\[ \\hat\\theta \\pm s_{\\hat\\theta}z_{\\alpha/2} \\] 4.1.2 Confidence Intervals In the previous chapter, we dealt with the problem of unobservable true estimators by estimating the unknown parameter with a point estimator to obtain a single number from the information provided by a sample. It will be highly unlikely, however, that this estimate — obtained from a finite sample — will be exactly equal to the population parameter value even if the estimator is consistent. The reason is that estimates most likely vary from sample to sample. However, for any realization, we do not know by how much the estimate will be off. To overcome this uncertainty, one might think of computing an interval or, depending on the dimensionality of the parameter, an area that contains the true parameter with high probability. That is, we concentrate in this chapter on the construction of confidence intervals. 4.1.2.1 Confidence Levels and Confidence Interval When inferring on an unknown parameter, we previously resorted to a single estimate. The likelihood of exactly getting this true parameter may be very small in these cases. However, by estimating an interval, which we may denote by \\(I_{\\theta}\\), we use a greater portion of the parameter space, that is, \\(I_\\theta \\in \\Theta\\), and not just a single number. This may increase the likelihood that the true parameter is one of the many values included in the interval. Choosing an appropriate interval is subject to a trade-off between a high probability of the interval containing the true parameter and the precision of gained by narrow intervals. To construct these intervals, we should use the information provided by the sample. Thus, the interval bounds depend on the sample. This, technically, allows us to state that each interval bound is a function that maps the sample space, denoted by X, into the parameter space since the sample is some outcome in the sample space and the interval bound transforms the sample into a value in the parameter space representing the minimum or maximum parameter value suggested by the interval. Formally, we define l(x) as lower and u(x) as upper bound of some samples contained in x. Now comes an important notion. We can derive the probability of the interval lying beyond the true parameter (i.e., either completely below or above) from the sample distribution. These two possible errors occur exactly if either \\(u(x) &lt; \\theta\\) or \\(\\theta &lt; l(x)\\). Our objective is then to construct an interval so as to minimize the probability of these errors occurring. That is: \\[ P(\\theta \\notin[l(X)u(X)]) = P(\\theta &lt; l(X)) + P(u(X) &lt; \\theta) = \\alpha \\] Mostly, we want this probability of error to be equal to a given parameter, \\(\\alpha\\). We commonly know this from the distributional value of \\(\\alph = 0.05\\), such that in 5 % of all outcomes, the true parameter will not be covered by the interval. Definition of a Confidence Level For some parameter \\(\\theta\\), let the probability of the interval not containing the true parameter value be given by the probability of error \\(\\alpha\\). Then, with probability \\(1 - \\alpha\\), the true parameter is covered by the interval [l(X), u(X)]. This is called the confidence level. and is given by the probability: \\[ P(\\theta \\in [l(X) , u(X)]) \\geq 1 − \\alpha \\] Definition of a Confidence Interval If the confidence level probability holds, we can refer to an interval [l(X), u(X)] as \\(1-\\alpha\\) confidence interval (CI) no matter what is the true but unknown parameter value \\(\\theta\\). The interpretation of the confidence interval is that if we draw an increasing number of samples of constant size n and compute an interval from each sample, \\(1-\\alpha\\) of all intervals will eventually contain the true parameter value \\(\\theta\\). This is then directly related to the baseline statistical notions you heard about that 95 % of all CIs will contain the true parameter (or, conversely, we have an \\(\\alpha\\) error rate of 5%, meaning that in 5 100 CIs, we won’t contain the true parameter value \\(\\theta\\)) (PS: This is exactly how hypotheses testing is conducted, but more on this later). As we will see in the examples, the bounds of the confidence interval are often determined by some standardized random variable composed of both the parameter and point estimator, and whose distribution is known (e.g. mean and variance). Furthermore, for a symmetric density function such as that of the normal distribution, it can be shown that with given \\(\\alpha\\), the confidence interval is the tightest if we have \\(p_l = \\alpha/2\\) and \\(p_u = \\alpha/2\\). That corresponds to bounds l and u with distributions that are symmetric to each other with respect to the the true parameter \\(\\theta\\). 4.1.2.2 Confidence Interval for the mean of a Normal Random Variable We will only cover the CI for the Normal Distribution, as this distribution is by far the most commonly known. For that we first start with the normal random variable Y with known variance is known but whose mean is unknown. For the inference process, we draw a sample X of n IID observations. A sufficient and unbiased estimator for \\(\\mu\\) is given by the sample mean, which is distributed as: \\[ \\bar{X} = \\sum_{i=1}^n X_i \\sim N(\\mu, \\frac{\\sigma^2}{n}) \\] If we standardize the sample mean, we obtain the standard normally distributed random variable: \\[ Z = \\sqrt{n}\\frac{\\bar{X}-\\mu}{\\sigma} \\sim N(0,1) \\] For this Z, it is true that: \\[ \\begin{align} P(q_{a/2} \\leq Z \\leq q_{1-\\alpha/2}) &amp;= P(q_{a/2} \\leq \\sqrt{n}\\frac{\\bar{X}-\\mu}{\\sigma} \\leq q_{1-\\alpha/2}) \\\\ &amp;= P(\\frac{\\sigma}{\\sqrt{n}}q_{a/2} \\leq \\bar{X} -\\mu \\leq \\frac{\\sigma }{\\sqrt{n}}q_{1-\\alpha/2}) \\\\ &amp;= P(\\frac{\\sigma}{\\sqrt{n}}q_{a/2} \\leq \\mu - \\bar{X} \\leq \\frac{\\sigma }{\\sqrt{n}}q_{1-\\alpha/2}) \\\\ &amp;= P(\\bar{X} + \\frac{\\sigma}{\\sqrt{n}}q_{a/2} \\leq \\mu \\leq \\bar{X} + \\frac{\\sigma }{\\sqrt{n}}q_{1-\\alpha/2}) \\\\ &amp;= P(\\bar{X} - \\frac{\\sigma}{\\sqrt{n}}q_{1-a/2} \\leq \\mu \\leq \\bar{X} + \\frac{\\sigma }{\\sqrt{n}}q_{1-\\alpha/2}) \\\\ &amp;= P(l(X) \\leq \\mu \\leq u(X)) = 1 - \\alpha \\end{align} \\] Where \\(q_{\\alpha/2}\\) and \\(q_{1- \\alpha/2}\\) are the \\(\\alpha/2\\) and \\(1-\\alpha/2\\) quantiles of the standard normal distribution, respectively That is, by standardizing the distribution of the IID samples, we obtain the probability that the true mean parameter, \\(\\mu\\), will be within the upper and lower bound of the CI when we repeatedly draw n samples is equal to \\(1-\\alpha\\). In other words, in \\(1-\\alpha\\) percent of cases, the CI drawn will include the true parameter. That is: \\[ I_{1-\\alpha} = [\\bar{X} + \\frac{\\sigma}{\\sqrt{n}}q_{1-a/2}, \\bar{X} + \\frac{\\sigma}{\\sqrt{n}}q_{1-a/2}] \\] 4.1.2.3 Confidence Interval for the mean of a Normal Random Variable with unknown Variance Let us once again construct a confidence interval for a normal random variable Y but this time we assume that the variance and the mean are unknown. If we again take n IID samples, take their mean values and standardize the variables with an unknown variance and mean term, then we obtain the new standardized random variable as a student’s t distribution with n-1 DOF: \\[ t = \\sqrt{n}\\frac{\\bar{X} - \\mu}{s} \\] Where \\(s^2 = 1/(n-1)\\sum_{i=1}^n(X_i - \\bar{X})^2\\). Therefore, we can state: \\[ P(t_{\\alpha/2}(n-1) \\leq t \\leq t_{1 - \\alpha/2}(n-1)) = 1-\\alpha \\] Where \\(t_{\\alpha/2}\\) and \\(t_{1- \\alpha/2}\\) are the \\(\\alpha/2\\) and \\(1-\\alpha/2\\) quantiles of the t-distribution with n-1 DOF, respectively. Using the same approach as before, we can derive the Confidence Interval of this distribution again as: \\[ \\begin{align} P(t_{a/2}(n-1) \\leq t \\leq t_{1-\\alpha/2}(n-1)) &amp;= P(t_{a/2}(n-1) \\leq \\sqrt{n}\\frac{\\bar{X} - \\mu}{s} \\leq t_{1-\\alpha/2}(n-1)) \\\\ &amp;= P(\\frac{s}{\\sqrt{n}}t_{a/2}(n-1) \\leq \\bar{X} -\\mu \\leq \\frac{s }{\\sqrt{n}}t_{1-\\alpha/2}(n-1)) \\\\ &amp;= P(\\frac{s}{\\sqrt{n}}t_{a/2}(n-1) \\leq \\mu - \\bar{X} \\leq \\frac{s}{\\sqrt{n}}t_{1-\\alpha/2}(n-1)) \\\\ &amp;= P(\\bar{X} + \\frac{s}{\\sqrt{n}}t_{a/2}(n-1) \\leq \\mu \\leq \\bar{X} + \\frac{s}{\\sqrt{n}}t_{1-\\alpha/2}(n-1)) \\\\ &amp;= P(\\bar{X} - \\frac{s}{\\sqrt{n}}t_{1-a/2}(n-1) \\leq \\mu \\leq \\bar{X} + \\frac{s}{\\sqrt{n}}t_{1-\\alpha/2}(n-1)) \\\\ &amp;= P(l(X) \\leq \\mu \\leq u(X)) = 1 - \\alpha \\end{align} \\] That is: \\[ I_{1-\\alpha} = [\\bar{X} - \\frac{s}{\\sqrt{n}}t_{1-a/2}(n-1), \\bar{X} + \\frac{s}{\\sqrt{n}}t_{1-a/2}(n-1)] \\] 4.1.3 Hypothesis Testing Inference on some unknown parameter meant that we had no knowledge of its value and therefore we had to obtain an estimate. This could either be a single point estimate or an entire confidence interval. However, sometimes, one already has some idea of the value a parameter might have or used to have. Thus, it might not be important to obtain a particular single value or range of values for the parameter, but instead gain sufficient information to conclude that the parameter more likely either belongs to a particular part of the parameter space or not. So, instead we need to obtain information to verify whether some assumption concerning the parameter can be supported or has to be rejected. This brings us to the field of hypothesis testing. Next to parameter estimation that we covered in the last two parts, it constitutes the other important part of statistical inference; that is, the procedure for gaining information about some parameter. In essence, we use hypothesis testing to determine whether a certain parameter of interest, given its statistical properties and distribution, is, with a sufficient probability, equal to a pre-defined, or hypothesized, value of the parameter space. 4.1.3.1 Hypotheses Setting up the hypotheses Before we can test any hypothesis, we first need to understand what the term actually means. In the case of hypothesis testing, we have two competing statements to decide upon. These statements are the hypotheses of the test. Since in statistical inference we intend to gain information about some unknown parameter \\(\\theta\\), the possible results of the test should refer to the parameter space \\(\\Theta\\) containing all possible values that \\(\\theta\\) can assume. More precisely, to form the hypotheses, we divide the parameter space into two disjoint sets, namely \\(\\Theta_0\\) and \\(\\Theta_1\\). We assume that the unknown parameter is either in \\(\\Theta_0\\) and \\(\\Theta_1\\). Now, with each of the two subsets we associate a hypothesis: Null Hypothesis - \\(H_0\\): States that the parameter \\(\\theta\\) is in \\(\\Theta_0\\) Alternative Hypothesis - \\(H_1\\): States that the parameter \\(\\theta\\) is in \\(\\Theta_2\\) The null hypothesis may be interpreted as the assumption to be maintained if we do not find material evidence against it. Decision Rule The task of hypothesis testing is to make a decision about these hypotheses. So, we either cannot reject the null hypothesis and, consequently, have to reject the alternative hypothesis, or we reject the null hypothesis and decide in favor of the alternative hypothesis. A hypothesis test is designed such that the null hypothesis is maintained until evidence provided by the sample is so significant that we have to decide against it. This leads us to the two common ways of using the test. In general, the decision rule of any hypothesis test, and ergo the main idea behind hypotheses testing is the following. We want to test whether a sample estimate is equal to a true parameter. Since we can only observe the sample distribution, we need to make assumptions on the distribution and the asymptotic behavior of the parameters. We have seen how to ensure for consistency, asymptotic normality and efficiency under linear estimators. For these estimators, we now define a Null Hypothesis stating that they are equal to a true population parameter which we define individually (for instance, we usually state that the true parameter is 0 in a regression model). Then, we draw the n IID samples with the properties discussed above and we look at their parameter statistics (or moments), mostly in terms of their expected estimate and their variation. Based on both parameter statistics, we then draw the respective distribution and obtain the probability density curve. If the probability mass of this density curve is lower than the defined \\(\\alpha\\) benchmark, then we say can state with a sufficient certainty that, given the distributional characteristics, the hypothesized true value is incorrect and, thus, the Null Hypothesis that the true value is equal to the hypothesized value (e.g. 0) can be rejected. #### Error Types We have to be aware that no matter how we design our test, we are at risk of committing an error by making the wrong decision. In general we run risk of making two distinct errors. Type 1 and Type 2 Error Type 1 Error: The error resulting from rejection of the null hypothesis given that it is actually true. This is known as False Negative Type 2 Error: The error resulting from failing to reject the null hypothesis given that the alternative holds. This is known as False Positive The probability of a type I error is the probability of incorrectly rejecting a correct null hypothesis, which is also the size of the test (this is just the threshold \\(\\alpha\\)). To understand this, note that the size of a test tells you how likely it is that this or a more extreme outcome would have arisen just out of pure chance. That is, in \\(\\alpha\\) percent of the cases one would reject the the Null Hypothesis although the result was created purely by chance, and should, thus, have been failed to reject. Another important piece of terminology in this area is the power of a test. The power of a test is defined as the probability of (appropriately) rejecting an incorrect null hypothesis. The power of the test is also equal to one minus the probability of a type II error. Note that there is no chance for a free lunch (i.e. a cost-less gain). What happens if the size of the test is reduced (e.g. from a 5% test to a 1% test)? The chances of making a type I error would be reduced, but so would the probability that the null hypothesis would be rejected at all, so increasing the probability of a type II error. So there always exists, therefore, a direct trade-off between type I and type II errors when choosing a significance level. The only way to reduce the chances of both is to increase the sample size or to select a sample with more variation, thus increasing the amount of information upon which the results of the hypothesis test are based. In practice, up to a certain level, type I errors are usually considered more serious and hence a small size of test is usually chosen (5% or 1% are the most common). 4.1.3.2 One- and Two-Tailed Test for the Parameter \\(\\mu\\) of the Normal Distribution When \\(\\sigma^2\\) Is Known The most famous quantification for hypothesis testing results in the Normal Distribution. Therein, we can test two hypotheses. The second considers a one-tailed test. Therein, we test the hypothesis that the parameter of interest, \\(\\mu_0\\), assumes some defined value which is less than or equal to a true, underlying, benchmark called \\(\\mu\\). As such, we say that \\(H_0: \\mu_0 \\leq \\mu\\) \\(H_1: \\mu_0 &gt; \\mu\\) The second considers a two-tailed test. Therein, we test the hypothesis that the parameter of interest, \\(\\mu_0\\), assumes some defined value which is equal to a true, underlying benchmark, called \\(\\mu\\). As such, we say that \\(H_0: \\mu_0 = \\mu\\) \\(H_1: \\mu_0 \\neq \\mu\\) To infer in both settings, we draw a setting of n IID samples of X (\\(X_1,\\dots,X_n\\)). As we know, if we have a set of n IID samples, we can model it as a normal random variable Y with known variance \\(\\sigma^2\\). Consequently, we can take the following test statistic: \\[ t(X) = \\frac{\\bar{X} - \\mu}{\\sigma / \\sqrt{n}} \\] whereas \\(\\sigma / \\sqrt{n}\\) is also called the Standard Error (SE). Note that this is the formula to test for standard normal variables with \\(N(\\mu, \\sigma^2)\\), where we need to define the two parameters first, but where the \\(\\sigma^2\\) value is known. Let’s go over the t-statistic example for a two-tailed test. Remember that the t-statistic follows a standard normal distribution which assigns a probability density to each value of t, based on the mean and variance values of the underlying sample of random variables. In order to test whether a given sample mean now deviates enough from the assumed true, underlying, benchmark called \\(\\mu\\), we follow these steps: Calculate the t-statistic from the given sample mean, sample variance and number of observations (mostly we assume that the true \\(\\mu\\) equals 0, thereby having no effect in a framework) Define a test size benchmark \\(\\alpha\\) (e.g. 0.1, 0.05, 0.01) Get the percentile or quantile values of \\(\\alpha\\) for the standard normal distribution, \\(q_{\\alpha/2}\\) and \\(q_{1-\\alpha/2}\\), for which the density of the t-statistic comprises of exactly \\(\\alpha\\) % of the entire probability density Compare the t-value with the percentile values for the respective \\(\\alpha\\) benchmarks (= critical values) If we have an \\(\\alpha = 0.05\\), then the critical values are [-1.96, 1.96], because these are the 2.5th and 97.5th percentiles of the standard normal distribution, implying that they comprise of 95 % of the probability density of the underlying distribution. Consequently, if the t-value is not within the given interval, we can reject the Null-Hypothesis that \\(\\mu_0 = \\mu\\), because the underlying probability density is less than 5% of the overall density, given the distributional characteristics. We can also visualise the idea behind t-statistics and p-values in the following way: h=na.omit(survey$Height) pop.mean=mean(h) h.sample = sample(h,50) t.test(h.sample,mu=pop.mean) ## ## One Sample t-test ## ## data: h.sample ## t = 0.34754, df = 49, p-value = 0.7297 ## alternative hypothesis: true mean is not equal to 172.3809 ## 95 percent confidence interval: ## 170.2482 175.4054 ## sample estimates: ## mean of x ## 172.8268 ggttest(t.test(h.sample,mu=pop.mean)) 4.1.3.3 The P-Value The p value is the notion we usually interact with when testing hypotheses. In essence, it displays the significance level for the respective t-statistic of our parameter statistics and thus tells us whether to reject the null hypothesis or not. In other words, it shows us at which significance level this value of t(x) would still lead to a decision of failing to reject the null hypothesis while any value greater than t(x) would result in its rejection. We can interpret the p-value as follows. Suppose we obtained a sample outcome x such that the test statistics sassumed the corresponding value t(x). Now, the p value indicates the probability that, given our assumption about the true parameter, our hypothesized value is indeed the true value. In other words, it states how likely it is that the true value is indeed the hypothesized value, given the distribution of our parameters. If t(x) is a value pretty close to the median of the distribution of t(X), then the chance that the true value is indeed equal to the hypothesised value, given our distribution, is fairly feasible. Then, the p-value will be large. However, if, instead, the value t(x) is so extreme that the chances will be minimal under the null hypothesis that the true value equals the hypothesised value, this will lead to a very low p-value. If p is less than some given significance level \\(\\alpha\\), we reject the null hypothesis and we say that the test result is significant. 4.2 Introduction to Regression Analysis We now have shown important properties related to (I) probability theory (II) linear algebra and (III) inductive statistics. Especially, we have looked at the joint behavior of bivariate and multivariate data, their interdependences and covariation properties, how to represent these properties in form of matrix notation and which underlying properties this notation has in terms of linearity as well as how we can induce statistical properties from a sample to an unobservable, but true population which is consistent, asymptotically normal and efficient. Now, it is time to combine the insights we retrieved from each topic and put it into a general framework. This framework is called Regression Analysis. It makes use of the statistical and inductive properties discussed to represent the joint behavior of bivariate or multivariate data. In essence, we make use of probability theory concept to understand the distributional properties of random variables, use linear algebra properties to understand the relational properties and convey them into a mathematical setting and use inductive statistics properties to assess and refer the underlying relationship from a sample to a true, general population. The most fundamental assumption of regression approaches is that the variation of a (dependent) variable can, at least to some extent, be explained by the functional relationship between the variable and a consortium of (explanatory) variables. More specifically, regression is an attempt to explain variation (or movements) in a variable by reference to movements in one or more other variables. To understand this, we make use of the correlation and linear dependency properties. 4.2.1 The role of correlation The underlying interest is to understand how two or more variables behave together, or, in dependence of each other. Due to the statistical properties of linear random variables, we especially want to understand the linear, joint behavior of the underlying variables. This can be assessed by the covariance matrix. More precisely, we are interested their *correlation expressed by the correlation coefficient, which measures the linear dependence of two variables. Generally, we know that correlation assumes values between −1 and 1 where the sign indicates the direction of the linear dependence. If we say that two variables are correlated with each other, it is stated that there is evidence for a linear relationship between the two variables, and that movements of the two variables are on average related to an extent given by the correlation coefficient. 4.2.2 The simple / univariate regression model Correlation implies that two variables behave similarly to a certain degree, which is quantified by the correlation coefficient. Thus, it is not implied that changes in x cause changes in y. Now, we go a step further and represent the relational properties in terms of a cause-and-effect framework, where we define one variable as cause, or explanatory, and the other as effect, or dependent, variable. That is, we also say that the dependent variable is endogenous (and thus depends on the model parameters and has an own probability distribution) whereas the explanatory variable(s) is (are) exogenous, implying that they do not depend on model parameters and thus have fixed (‘non-stochastic’) values. This context is represented by a regression model. In this context, the joint behavior described in the previous section is now thought of as y being some function of x and possibly some additional quantity. In other words, we assume a functional relationship between the two variables given by the deterministic relationship of equation: \\[ y = f(x) \\] Now, we assume two important properties: The underlying relation is based on linear properties The underlying relation is likely to be influenced by other parameters not captured by the model (residuals) Consequently, the underlying relationship transforms to: \\[ y = \\alpha + \\beta x + \\epsilon \\] Thereby, the residuals are assumed to be IID, normally distributed with mean 0 and some constant variance \\(\\sigma_e^2\\) and independent of x: \\[ \\epsilon \\underbrace{\\sim}_{IID} N(0, \\sigma^2) \\] With this assumption, the equation above is called a simple linear regression or a univariate regression. The parameter \\(\\beta\\) determines how much y changes, on average, when x changes by one unit. Thus, it can be stated as expected change in y if x changes. On the other hand, the parameter \\(\\alpha\\) defines the value of y in the case that x is exactly zero. 4.2.2.1 Estimating the regression model: Simple Ordinary Least Squares (OLS) The most common approach to estimate regression models is by using a linear fit which combines the dependent and explanatory variable with the least loss. This fit is mostly represented by a linear graph which combines the two random variables. Note that we already defined one formulation for such a loss, in term of the bias. In essence, the bias term in a regression model is the vertical difference between the observed and estimate dependent variable value. Looking at the formula above, this is represented by the residual term. With regards to the overall loss, we are interested in finding a function which minimizes the overall difference between the estimated and observed dependent variable points. Formally, we have to solve a minimisation problem of the form: \\[ \\underbrace{min}_{\\alpha,\\beta}\\sum_{i=1}^n (y_i - \\hat{\\alpha} -\\hat{\\beta} x_i)^2 \\] Whereas i defines the respective i’th observation of the model. That is, we need to find the estimates of \\(\\alpha\\) and \\(\\beta\\) that minimize the total of the squared errors. By finding these values, we understand that our regression line represents the least distance between observed and estimated values and thus represents an optimal fit. In other words, we find a linear fit which minimizes the bias of the model, which is given by the residual term. This is also known as Ordinary Least Squares (OLS). In the OLS case, the minimum is obtained analytically through first derivatives with respect to \\(\\alpha\\) and \\(\\beta\\), respectively. The resulting estimates are, then, given by: \\[ \\begin{align} \\hat{\\beta} &amp;= \\frac{\\frac{1}{n}\\sum_{i=1}^n(x_i - \\bar{x})(y_i - \\bar{y})}{\\frac{1}{n}\\sum_{i=1}^n(x_i - \\bar{x})^2} = \\frac{cov(x,y)}{var(x)}\\\\ \\hat{\\alpha} &amp;= \\bar{y} - \\hat{\\beta}x \\end{align} \\] In this formula, we see the underlying property of correlation between the dependent and independent variable when looking at \\(\\hat{\\beta}\\). As we can see the numerator displays the covariance between x and y, whereas the denominator represents the covariance of x with itself, which is given by its variance. In the case of independence, we would thus derive that \\(\\hat{\\beta}\\) would be zero and, thereby, \\(\\hat{\\alpha} = \\bar{y}\\). This is the fundamental insight of regression analysis: The linear relation between a dependent and an explanatory variable is quantified by the covariation of both variables relative to the covariation of the explanatory variable with itself (= the variation itself). As such, we always have a relative behavior due to the dependency behavior of the two variables. Although this is a general statement, it can easily be related to financial contexts. Let’s quickly visualise what this implies. For that, let’s look at the cars dataset: # Run an OLS cars &lt;- mtcars fit &lt;- lm(mpg ~ hp, data = cars) # Get the predicted and residual values cars$pred &lt;- predict(fit) cars$res &lt;- residuals(fit) # Get the data straight and plot it cars %&gt;% ggplot(aes(x = hp, y = mpg)) + geom_smooth(method = &quot;lm&quot;, se = F, color = &quot;lightgrey&quot;) + geom_segment(aes(xend = hp, yend = pred), alpha = .2) + geom_point(aes(color = res)) + scale_color_gradient2(low = &quot;blue&quot;, mid = &quot;white&quot;, high = &quot;red&quot;) + guides(color = FALSE) + geom_point(aes(y = pred), shape = 1) + theme_bw() ## Warning: `guides(&lt;scale&gt; = FALSE)` is deprecated. Please use `guides(&lt;scale&gt; = &quot;none&quot;)` instead. ## `geom_smooth()` using formula &#39;y ~ x&#39; As we can see, this is the idea behind “minimising the sum of squared residuals”. We define a line which takes all the residuals, given by the vertical distsnce of the observed and predicted values, square their difference and take the sum. This is our bias term, and we want to minimise this bias accordingly. 4.2.3 The multivariate regression model Next, we focus on the case in which we assume that more than one explanatory variable is associated with the dependent variable. To do so, we turn to multivariate regressions. This type of regression setting explains the linear relationship between several independent variables and some dependent variable we observe. It has the following form: \\[ y = \\alpha + \\beta_1x_i + \\dots + \\beta_kx_k + \\epsilon \\] As we know, we can also write this in vector notation, simply by: \\[ y = X\\beta + \\epsilon \\] Where y is a \\(n \\times 1\\) column vector of form \\[ y = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_N \\end{bmatrix} \\] and X is a \\(N \\times k\\) matrix of form \\[ X = \\begin{bmatrix} 1 &amp; x_{11} &amp; \\dots &amp; x_{1k} \\\\ 1 &amp; x_{21} &amp; \\dots &amp; x_{2k} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 1 &amp; x_{N1} &amp; \\dots &amp; x_{Nk} \\end{bmatrix} \\] and \\(\\beta\\) is a \\(k \\times 1\\) column vector of form: \\[ \\beta = \\begin{bmatrix} \\beta_1 &amp; \\beta_2 &amp; \\dots &amp; \\beta_k \\end{bmatrix}&#39; \\] Lastly, \\(\\epsilon\\) is again a \\(n \\times 1\\) column vector of form: \\[ y = \\begin{bmatrix} \\epsilon_1 \\\\ \\epsilon_2 \\\\ \\vdots \\\\ \\epsilon_N \\end{bmatrix} \\] Much like with the simple OLS, we also estimate the coefficients of the multivariate regression model by following the minimisation of squared residuals approach. This is simply an extension of the simple OLS model in the case with just one regressor and a constant. Especially, we minimise: \\[ \\min_{\\hat{\\beta}} = \\sum_{i=1}^n(y_i - \\hat{y})^2 = (y - X\\beta)&#39;(y-X\\beta) \\] Differential calculus and matrix algebra lead to the optimal regression coefficient estimates and estimated residuals given by: \\[ \\hat{\\beta} = (X&#39;X)^{-1}X&#39;y \\] whereas \\(\\hat{\\beta}\\) is a \\((k+1) \\times 1\\) column vector including the estimated coefficients of each of the explanatory variables of our model. In essence, each element fo the column vector can be interpreted in the same fashion as in the simple OLS case with one slight difference. That is, it is the covariation of the explanatory and dependent variable relative to the variation of the explanatory variable itself, \\(\\color{blue}{\\text{controlling for, or keeping constant, the variation of the remaining variables}}\\). Let’s quickly visualise this for a regression setting with two variables: library(plotly) library(reshape2) # Run multiple OLS cars &lt;- mtcars fit &lt;- lm(mpg ~ hp + cyl, data = cars) # Graph Resolution (more important for more complex shapes) graph_reso &lt;- 0.05 # Setup Axis axis_x &lt;- seq(min(cars$hp), max(cars$hp), by = graph_reso) axis_y &lt;- seq(min(cars$cyl), max(cars$cyl), by = graph_reso) # Sample points mpg_lm_surface &lt;- expand.grid(hp = axis_x, cyl = axis_y, KEEP.OUT.ATTRS = F) mpg_lm_surface$mpg &lt;- predict.lm(fit, newdata = mpg_lm_surface) mpg_lm_surface &lt;- acast(mpg_lm_surface, cyl ~ hp, value.var = &quot;mpg&quot;) # Create color variables and plot hcolors=c(&quot;red&quot;,&quot;blue&quot;)[cars$am] cars_plot &lt;- plot_ly(cars, x = ~hp, y = ~cyl, z = ~mpg, text = ~am, # EDIT: ~ added type = &quot;scatter3d&quot;, mode = &quot;markers&quot;, marker = list(color = hcolors)) # Add a hyperplane cars_plot &lt;- add_trace(p = cars_plot, z = mpg_lm_surface, x = axis_x, y = axis_y, type = &quot;surface&quot;) cars_plot ## Warning: &#39;surface&#39; objects don&#39;t have these attributes: &#39;mode&#39;, &#39;marker&#39; ## Valid attributes include: ## &#39;_deprecated&#39;, &#39;autocolorscale&#39;, &#39;cauto&#39;, &#39;cmax&#39;, &#39;cmid&#39;, &#39;cmin&#39;, &#39;coloraxis&#39;, &#39;colorbar&#39;, &#39;colorscale&#39;, &#39;connectgaps&#39;, &#39;contours&#39;, &#39;customdata&#39;, &#39;customdatasrc&#39;, &#39;hidesurface&#39;, &#39;hoverinfo&#39;, &#39;hoverinfosrc&#39;, &#39;hoverlabel&#39;, &#39;hovertemplate&#39;, &#39;hovertemplatesrc&#39;, &#39;hovertext&#39;, &#39;hovertextsrc&#39;, &#39;ids&#39;, &#39;idssrc&#39;, &#39;legendgroup&#39;, &#39;legendgrouptitle&#39;, &#39;legendrank&#39;, &#39;lighting&#39;, &#39;lightposition&#39;, &#39;meta&#39;, &#39;metasrc&#39;, &#39;name&#39;, &#39;opacity&#39;, &#39;opacityscale&#39;, &#39;reversescale&#39;, &#39;scene&#39;, &#39;showlegend&#39;, &#39;showscale&#39;, &#39;stream&#39;, &#39;surfacecolor&#39;, &#39;surfacecolorsrc&#39;, &#39;text&#39;, &#39;textsrc&#39;, &#39;type&#39;, &#39;uid&#39;, &#39;uirevision&#39;, &#39;visible&#39;, &#39;x&#39;, &#39;xcalendar&#39;, &#39;xhoverformat&#39;, &#39;xsrc&#39;, &#39;y&#39;, &#39;ycalendar&#39;, &#39;yhoverformat&#39;, &#39;ysrc&#39;, &#39;z&#39;, &#39;zcalendar&#39;, &#39;zhoverformat&#39;, &#39;zsrc&#39;, &#39;key&#39;, &#39;set&#39;, &#39;frame&#39;, &#39;transforms&#39;, &#39;_isNestedKey&#39;, &#39;_isSimpleKey&#39;, &#39;_isGraticule&#39;, &#39;_bbox&#39; 4.2.3.1 Incorporating conditional variation in \\(\\beta\\): The Frisch-Waugh Lowell Theorem By running a multivariate OLS, we automatically account for the variation of the remaining variables with both the dependent and the explanatory variable of interest. Consequently, the \\(\\hat{\\beta}_i\\) coefficient solely displays the variation between the these variables AFTER incorporating the remaining variation based on the other regressors. This is based on the projection and residual matrix properties that is based on the Frish-Waugh Lowell Theorem which was introduced in Empirical Methods. The Frisch-Waugh-Lowell Theorem allows to regress a dependent variable on an explanatory variable while automatically controlling for all other variables in a multiple regression model. To understand the theorem, first note the projection matrix, which gives the vector of fitted value of y when regressing y on X \\[ \\hat{y} = X(X&#39;X)^{-1}X&#39;y = P_X y \\] And the Residual matrix, which gives the vector of residuals when regressing y on X: \\[ \\epsilon = (I_N - X(X&#39;X)^{-1}X&#39;)y = M_X y \\] By performing a partitioned regression, we can divide the regression model into a part we care about and a part we use as “controls”. This delivers us a \\(1 \\times 1\\) scalar of \\(\\hat{\\beta}_i\\) and a \\((k-1) \\times 1\\) vector of \\(\\hat{\\beta}_{-i}\\) control estimates. Note that it still holds that \\(\\hat{\\beta} = (X&#39;X)^{-1}X&#39;y\\). This is now just divided into the both \\(\\betas\\). Especially, we define: \\[ \\begin{bmatrix} \\hat{\\beta_i} \\\\ \\hat{\\beta}_{-i} \\end{bmatrix} = \\begin{bmatrix} X&#39;_iX_i &amp; X&#39;_iX_{-i} \\\\ X&#39;_{-i}X_{i} &amp; X&#39;_{-i}X_{-i} \\end{bmatrix} \\begin{bmatrix} X_i&#39;y \\\\ X_{-i}&#39;y \\end{bmatrix} = \\begin{bmatrix} (X&#39;_iM_{-i}X_i)^{-1}X&#39;_iM&#39;_{-i}y \\\\ (X&#39;_{-i}M_{i}X_{-i})^{-1}X&#39;_{-i}M&#39;_{i}y \\end{bmatrix} \\] As we are only interested in the coefficient of the variable of interest, we get the first important result. \\[ \\hat{\\beta_i} = (X&#39;_iM_{-i}X_i)^{-1}X&#39;_iM&#39;_{-i}y \\] Whereas \\(M_{-i} = (I_N - X_{-i}(X_{-i}&#39;X_{-i})^{-1}X&#39;_{-i})\\) are the residuals of regressing y on \\(x_{-i}\\) (= the controls). Next, we can go a step further, and define \\(X_i^* = M_{-i}X_i\\). That is, \\(X_i^*\\) are the residuals of regressing \\(X_i\\) on all the control variables, \\(X_{-i}\\). In this case, we transform the formula a little and obtain: \\[ \\hat{\\beta_i} = (X&#39;_iX_i^*)^{-1}X_i&#39;^*y \\] This means that the coefficient on the i’th variable of interest can be retrieved by regressing the dependent variable on the residuals from the regression of the variable of interest \\(X_i\\) on the controls \\(X_{-i}\\). Note that \\(X_i^* = M_{-i}X_i\\) stands for the residuals we get for the first regression. The Frisch-Waugh Lowell theorem defines the underlying relationship. It states that the i’th coefficient of a multivariate regression incorporates the variation of all control variables. This is done by first regressing the specific explanatory variable on all other explanatory variables and then taking the residuals of the first regression and regressing our dependent variable on these residuals. This is how we “control” for additional covariates within a regression, which means that we incorporate any remaining variation and thus ensure that the variation of the explanatory variable is orthogonal to (or independent of) the variation of the control variables. Especially, Frisch-Waugh Lowell prove that the following three settings deliver the same coefficient estimates for the variable of interest: Regressing y on x and controls (y = X + controls) Regressing y on the residuals of regressing X on the controls (y = res(X|controls)) Regressing the residuals of regressing y on the controls on the residuals of regressing X on the controls (res(y|controls) = res(X|controls)) This is a fundamental result of econometrics. It tells us that, when we regress \\(X_i\\) on controls, we account for the entire variation of \\(X_i\\) that can be explained by the controls. The part which cannot be explained is necessarily incorporated into the residual term of the regression. If we now regress the dependent variable on the residuals, then we only use the variation which cannot be explained by the set of controls. If we assume that the model is unbiased (e.g. that there is no OVB and thus the existing variables are able to explain all of the variation in the dependent variable) then it must hold that the residual term incorporates all of the remaining variation that is able to explain the movements of the dependent variable. Consequently, we indirectly “control” for the remaining variation as we would when incorporating the set of controls in the first place. This is a fundamental understanding, because it shows that the residuals of a regression incorporate the remaining variation which was not explained by the variables of interest. Let us calculate this quickly: Let’s quickly visualise what this implies. For that, let’s look at the cars dataset: # Run multiple OLS cars &lt;- mtcars fit &lt;- lm(mpg ~ hp + cyl, data = cars) fit_2 &lt;- lm(mpg ~ lm(hp ~ cyl)$residuals, data = cars) fit_3 &lt;- lm(lm(mpg ~ cyl)$residuals ~ lm(hp ~ cyl)$residuals, data = cars) # Print all the outputs stargazer(fit, fit_2, fit_3, type = &quot;text&quot;) ## ## ================================================================================ ## Dependent variable: ## ------------------------------------------------------------ ## mpg residuals ## (1) (2) (3) ## -------------------------------------------------------------------------------- ## hp -0.019 ## (0.015) ## ## cyl -2.265*** ## (0.576) ## ## residuals -0.019 -0.019 ## (0.029) (0.015) ## ## Constant 36.908*** 20.091*** -0.000 ## (2.191) (1.075) (0.551) ## ## -------------------------------------------------------------------------------- ## Observations 32 32 32 ## R2 0.741 0.015 0.053 ## Adjusted R2 0.723 -0.018 0.021 ## Residual Std. Error 3.173 (df = 29) 6.082 (df = 30) 3.120 (df = 30) ## F Statistic 41.422*** (df = 2; 29) 0.442 (df = 1; 30) 1.681 (df = 1; 30) ## ================================================================================ ## Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 As we can see, this is the case. Consequently, we are able to replicate the FWL theorem and understand how we incorporate and account for different types of variations within a regressional setting. 4.2.4 Goodness of Fit We evaluate regression models by goodness-of-fit measures. Consequently, we’ll have to draw on topics from probability theory, parameter estimation, and hypothesis testing. In particular, we will use the normal distribution, t-statistic, and F-statistic as underlying methods to define the goodness-of-fit, and use statistics such as \\(R^2\\), Adjusted \\(R^2\\) and idiosyncratic to systematic risk components as fundamental evaluation tools for the model. There are several characteristics that are commonly used to evaluate how suitable the OLS slope is. One of the methods to figure this out is defined as coefficient of Determination, or \\(R^2\\). 4.2.4.1 R2 The \\(R^2\\) statistic is a goodness-of-fit measure. In general, the R2 value gives a notion as to how much of the variation of the dependent variable can be explained by the underlying explanatory variable(s). It is given by the following formula: \\[ R^2 = 1 - \\frac{RSS}{TSS} \\] Whereas RSS is defined as the sum of all squared residual terms, thus stating how well the predicted fit the actual data. TSS is the Total Sum of Squares. It is calculated as sum of the squared differences of each actual observation and their corresponding mean value: \\[ \\begin{align*} RSS &amp;= \\sum_{i=1}^n(\\hat{y_i}-\\bar{y})^2\\\\ TSS &amp;= \\sum_{i=1}^n(y_i-\\bar{y})^2 \\end{align*} \\] Their fraction displays how well the predicted data fits the actual data in relative to how the average fits the actual data. If the model fits badly, it will result in values for SSR close to the TSS (sometimes even above TSS values) and the \\(R^2\\) value will decline. 4.2.4.2 Adjusted R2 One issue with the \\(R^2\\) value is that it will increase in magnitude with an increasing set of variables. This is problematic in multivariate regression settings, as it would imply that more variables are always better for a regression system. This is because the \\(R^2\\) statistic cannot distinguish between coherent variation that an additional variable adds to the model (e.g. the true variation between y and x) and spurious variaiton, or noise. In order to account for the added noise, we need to incorporate DOF into the calculation. The underlying formula is: \\[ Adj. R^2 = 1 - (1-R^2)\\frac{n-1}{n-k-1} \\] One can interpret this new measure of fit as penalizing excessive use of independent variables. Instead, one should set up the model as parsimonious as possible. To take most advantage of the set of possible independent variables, one should consider those that contribute a maximum of explanatory variation to the regression. 4.2.4.3 Non-Sequential Model selection metrics The perhaps most common form of error attribution is the Sum of Squared Residuals (SSR), as we have seen above. Another option that researchers came up with is the interaction of evaluation criteria based on the coefficients a model incorporates. As such, assume that \\(\\hat\\sigma_k^2\\) is the SSR under the model with k regression coefficient. Then Akaike suggested measuring the goodness of fit for this particular model by balancing the error of the fit against the number of parameters in the model. Out of this, the Akaike Information Criteria (AIC) arised, in form of: \\[ AIC = \\log \\hat\\sigma_k^2 + \\frac{n+2k}{n} \\] The value of k yielding the minimum AIC specifies the best model. The idea is roughly that minimising \\(\\hat\\sigma_k^2\\) is a reasonable objective. However, as we know, this metric decreases monotonically as k increases. Therefore, we ought to penalize the error variance by a term proportional to the number of parameters. As you may think now, there are numerous approaches to define this penalty parameter in the literature. For instance, we can be correct the form based on small-sample distributional results for the linear regression model to obtain the Bias Corrected Akaike Information Criteria (AICc): \\[ AICc = \\log \\hat\\sigma_k^2 + \\frac{n+k}{n-k-2} \\] Further, we may also derive a correction term based on Bayesian arguments, leading to the Bayesian Information Criteria (BIC): \\[ BIC = \\log \\hat\\sigma_k^2 + \\frac{k\\log n}{n} \\] Notice that the penalty term in BIC is much larger than in AIC, consequently, BIC tends to choose smaller models. Which models to choose, you may ask. In general, there is an implicit understanding that the BIC is superior in large samples with fewer parameters AIC is superior in small samples with a relatively high number of parameters Usually, these scores are used on the training set to evaluate how well the model performed as they are able to account for the trade-off of bias and variance. Based on them, we then select the best fitting model and predict the test data as well as obtain the accuracy scores based on said test data. 4.2.4.4 t-statistic and p-values To focus more on inductive properties, we now can evaluate the regression coefficient \\(\\beta\\) in terms of its materiality, or significance, in influencing the dependent variable. Doing so, we can make use of the inductive properties we discussed earlier. In essence, when evaluating the significance of a \\(\\beta\\) coefficient, we usually state the following Hypotheses: \\(H_0: \\hat{\\beta} = \\beta = 0\\) \\(H_1: \\hat{\\beta} \\neq \\beta\\) That is, we assume that the true effect of x on y is zero and that the estimated coefficient will be equal to the hypothesised, true but unobservable, coefficient. Then, we run the regression model and obtain both the expected value \\(\\hat{\\beta}\\) as well as its standard deviation \\(\\hat{\\sigma}(\\beta)\\). Based on the assumption of a standard normal distribution, we then calculate the corresponding t statistic as: \\[ t(\\hat{\\beta}) = \\frac{\\hat{\\beta} - 0}{SE(\\hat{\\beta})} \\] Whereas \\(SE(\\hat{\\beta}) = \\hat{\\sigma}(\\beta) / \\sqrt{n}\\). Now, we follow the common approach discussed previously and define a common \\(\\alpha\\) threshold which accounts for \\(\\alpha\\) % of the density of the standard normal distribution, and take the percentile values as critical points. If the corresponding t-statistic is larger than the respective critical values, then we know that the \\(\\beta\\) coefficient is significantly different from zero. This roots in the “reversal principle” of hypothesis testing. We first state that we assume that the estimated sample coefficient is equal to the true parameter and thus is zero. Now, we run a regression and compute the distribution of the sample coefficient, based on the mean and standard error of the coefficient, assuming a standard normal distribution. Then, based on this distribution, we calculate what percentage of the probability density of this distribution is included if the true effect was indeed zero (given our sample distribution). The probability density thus tells us how likely it is that the coefficient is indeed zero, given our sample distribution. If this value is smaller than a given threshold (e.g. if less than 5 % of the probability density is included when \\(\\hat{\\beta}\\) is indeed zero), then we can state with sufficient confidence that, given the underlying sample distribution, that the coefficient is different from zero. To visualise this, let’s look at the following distribution: a &lt;- as.data.frame(rnorm(1000000, mean = 0.5, sd = 1)) b &lt;- as.data.frame(rnorm(1000000, mean = 1, sd = 1)) c &lt;- as.data.frame(rnorm(1000000, mean = 1.96, sd = 1)) d &lt;- as.data.frame(rnorm(1000000, mean = 2, sd = 0.5)) df_norm_t &lt;- as.data.frame(cbind(a,b,c,d)) colnames(df_norm_t) = c(&quot;N(0,1)&quot;, &quot;N(1,1)&quot;, &quot;N(1.96,1)&quot;, &quot;N(2,0.5)&quot;) df_norm_t_melt &lt;- melt(df_norm_t) ## No id variables; using all as measure variables #Plot df_norm_t_melt %&gt;% ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = 0.2) + geom_vline(xintercept = 0, color = &quot;black&quot;) + geom_vline(xintercept = 0.86, color = &quot;grey43&quot;, linetype = &quot;dashed&quot;) + geom_vline(xintercept = -1, color = &quot;grey43&quot;, linetype = &quot;dashed&quot;) + geom_vline(xintercept = -1.48, color = &quot;grey43&quot;, linetype = &quot;dashed&quot;) + geom_hline(yintercept = 0.05, color = &quot;black&quot;) + theme_bw() + xlim(-2,5) This visually represents what was described above. As we can see, we have four different Mean-SE combinations for \\(\\hat{\\beta}\\). \\(H_0\\) states that the true \\(\\beta\\) is equal to zero and that \\(E({\\beta}) = \\hat{\\beta} = \\beta\\). Now, when running the regression model, we try to understand how likely that this hypothesis is, given the resulting sample distribution we retrieved from the Mean-SE combinations when running the regression. Doing so, we look at the probability density of each parameter combination and look at the corresponding density at the intercept of zero. The corresponding p-value then indicates the exact probability density. If this density is below a given threshold (in our case 5 % - given the horizontal line), then we know that the probability that \\(\\hat{\\beta}\\) is indeed zero, given the underlying Mean-SE distribution, is less than this threshold (less than 5 % here). Consequently, we can say that, given the sample distribution, the likelihood that \\(\\hat{\\beta} = 0\\) is sufficiently low. In other words, we can reject \\(H_0\\) at the 5% level and state that \\(\\hat{\\beta}\\) is significantly different from zero. Note that we indicated the horizontal lines in a gray dashed color for each of the different estimates to show at what value we would have had to hypothesize the true \\(\\beta\\) in order to reject this hypothesis at the 5% level. As such, we can reject the Null Hypothesis twice, and we fail to reject it twice. This idea is equivalent to the distribution on the t-statistics we displayed earlier. To see this, note the \\(\\beta\\) distribution with the parameters of \\(\\hat{\\beta} = 1.96\\), \\(SE(\\hat{\\beta}) = 1\\). As we can see, its 5 % threshold of probability density is exactly at zero. Remember that the t-statistic for the threshold of 0.05 is 1.96. Further note the formula for the t-value, indicating that \\(t(\\hat{\\beta}) = (\\hat{\\beta} - 0)/ SE(\\hat{\\beta})\\) (in this case: 1.96/1 = 1.96). As such, the 0.025 and 0.975 percentile values of the standard normal distribution are given at [-1.96, 1.96], which is the critical value we know and, thus, logically must then incorporate 5% of the probability density in the t-statistics distribution. This enables us in both settings to visually depict the critical value of rejection of the Null Hypothesis. 4.2.4.5 Idiosyncratic vs. Systematic risk components Another way to measure the goodness of fit, or the evaluative properties of the model, is to look at the variation properties of the estimator. Note that we can also calulate the \\(R^2\\) in the following way: \\[ R^2 = \\frac{\\beta_i^2\\sigma_x^2}{\\beta_i^2\\sigma_x^2 + \\sigma_{i \\epsilon}^2} \\] In this formula, we can identify two terms: The variation associated with the systematic component \\(\\beta_i^2\\sigma_x^2\\) and the variation associated with the idiosyncratic component \\(\\sigma_{i \\epsilon}^2\\). The latter term is also known as residual variance. This term thus tells us how much of the variation is displayed by the underlying model and how much is explained by other factors currently not existing in the model, which can be translated again to a relational property of how good the model fits the data. In terms of a financial application, this can also be interpreted as idiosyncratic vs. systematic risk, or non-diversifiable vs. diversifiable risk. This is an important notion, as it allows us to “split” the variation properties of the dependent variable into an explanatory and a non-explanatory part. 4.2.4.6 F-Statistic To test whether the entire model is significant, we consider two alternative hypotheses: \\(H_0\\): \\(\\beta_0 = \\beta_1 = \\dots = \\beta_k = 0\\) \\(H_1\\): \\(\\beta_n \\neq 0\\) for at least one \\(j \\in {1,\\dots, k}\\) Under the F-test framework, two regressions are required, known as the unrestricted and the restricted regressions. The unrestricted regression is the one in which the coefficients are freely determined by the data, as has been constructed previously. The restricted regression is the one in which the coeffi- cients are restricted, i.e. the restrictions are imposed on some of the coefficients. To perform the test, we carry out an analysis of variance (ANOVA) test. The residual sums of squares from each regression are determined, and the two residual sums of squares are ‘compared’ in the test statistic. The F-test statistic for testing multiple hypotheses about the coefficient estimates is given by \\[ F = \\frac{(SSR_R - SSR_U)/k}{_U/n-k-1} \\] To see why the test centres around a comparison of the residual sums of squares from the restricted and unrestricted regressions, recall that OLS estimation involved choosing the model that minimised the residual sum of squares (SSR), with no constraints imposed. Now if, after imposing constraints on the model, a residual sum of squares results that is not much higher than the unconstrained model’s residual sum of squares, it would be concluded that the restrictions were supported by the data, thereby the F value would be low. On the other hand, if the residual sum of squares increased considerably after the restrictions were imposed, it would be concluded that the restrictions were not supported by the data and therefore that the hypothesis should be rejected as the F value is considerably higher. The degrees of freedom of the SSR equal the number of independent variables, d = k, while the degrees of freedom of the SSE are d = n – k – 1. 4.2.5 Assumption and diagnostic tests of OLS The simple OLS model follows five primary assumptions and one additional implication. These assumptions are important to grasp the advantages and threats of the model. Especially, comprehending the assumptions makes certain aspects of the model more clear. As such, we will shortly introduce each assumption and its underlying consequence on the model. 4.2.5.1 A1: Linearity Linearity means that the model follows a linear relationship. That is, the parameters of x and y are linearly connected, implying that we can “draw” a straight graph connecting dependent and explanatory variables. We require linearity because we have shown that linear random variables have distinct asymptotic properties and follow assumptions on normality, meaning every linear estimator is asymptotically normally distributed. As we have discussed, these properties are important to draw causal inference of the parameters. Especially, with linear regression models, we can make use of the average effect of a variable. This is because the slope of the regressor will always be the same because it is linear. As such, the functional form does not depend on the level of the explanatory variable. This makes it easy for us to draw a general relationship between variables. To test for linearity, a common approach is to plot the regression residuals on the vertical axis and values of the independent variable on the horizontal axis. This graphical analysis is performed for each independent variable. What we are looking for is a random scattering of the residuals around zero. If this should be the case, the model assumption with respect to the residuals is correct. If not, however, then there seems to be some systematic behavior in the residuals that depends on the values of the independent variables, rendering the linearity assumption incorrect. However, having a generally non-linear function is not a large issue. Remember that we can use linear transformations of the independent variables in order to create a linearity. For instance, we can transform an exponential relationship into a linear relationship and vice versa. Further, we can easily add a squared factor to account for decreasing utility function characteristics without violating any properties. 4.2.5.2 A2 and A5: Error Terms are mean-zero and normally distributed The first assumption states that the regression errors are normally distributed with zero mean: \\[ \\epsilon_i \\sim N(0, \\sigma_\\epsilon^2) \\] This assumption has two distinct implications. A2: Mean-Zero Assumption The mean-zero assumption implies that, over all observations, the average residual, which is the vertical distance between the observed and estimated variable, is zero. That is, there is, on average, no mistake of the model in the entire population. In general, when we are looking at a regression model, we always speak in terms of dependency on X. As such, a zero-mean error term assumption implies: \\[ E(\\epsilon_i|X_i) = 0 \\] \\[ cov(X_i, \\epsilon_i) = 0 \\] This means that the expected value of the error term, conditional on X, is zero. This implies that the variation of the error term is, on average, independent of the variation of the explanatory variables. This is perhaps the most fundamental assumption of any causal inference model, as it states that the explanatory variables are, on average, independent of the error terms. This property is essential in assuming that the model parameters are exogenous and, consequently, unbiased. Although we will not cover the notion here in detail, exogeneity states that the regressors are not influenced by any outside parameters which could potentially alter the true underlying relationship the model portrays. Consequently, we can assume that there is no additional, unobserved or incorrectly measured / accounted joint behavior of the variables which may either violate some assumptions or influence the underlying variation of the variables. A5: Normal Distribution Assumption Further, it states that the probability distribution for the error term is that it is normally distributed.. There are three implications of the violation of this assumption: The regression model is misspecified The estimates of the regression coefficients, (\\(\\hat{\\beta_i}\\)), are also not normally distributed The estimates of the regression coefficients, (\\(\\hat{\\beta_i}\\)), although still best linear unbiased estimators, become inefficient estimators Especially the second property renders hypothesis testing impossible, as we no longer can draw on a symmetric distribution. However, such a distribution, due to the symmetry characteristics and continuity, is required to perform important diagnostic tests which quantify any assumption on a causal relationship of the model. Especially, the t-tests explained will no longer be applicable as the probability density and consequent quantile distributions derivations are no longer valid. There are generally two ways to test for the normality assumption. The first is the Jarque-Bera Test Statistic. It is not quite simple to compute manually, but most computer software packages have it installed. Formally it is computed as: \\[ JB = \\frac{n}{6}(S^2+\\frac{(K-3)^2}{4}) \\] whereas S is the Skewness of a distribution and K the Kurtosis. As explained in earlier, Kurtosis estimates, relative to the normal distribution, the behavior in the extreme parts of the distribution (i.e., the tails of the distribution). For a normal distribution, K = 3. A value for K that is less than 3 indicates a so-called light-tailed distribution in that it assigns less weight to the tails. The opposite is a value for K that exceeds 3 and is referred to as a heavy-tailed distribution. The test statistics given by the equation is approximately distributed chi-square with two degrees of freedom. Another test is the analysis of the Standardized Residuals. Once computed, they can be graphically analyzed in histograms. Formally, each standardized residual at the i-th observation is computed according to: \\[ \\tilde{e_i} = n \\frac{e_i}{s_e\\sqrt{(n+1)+\\frac{(x_i - \\bar{x})^2}{s_x^2}}} \\] If the histogram appears skewed or simply not similar to a normal distribution, the linearity assumption is very likely to be incorrect. Additionally, one might compare these standardized residuals with the normal distribution by plotting them against their theoretical normal counterparts in a normal probability plot. If the pairs lie along the line running through the sample quartiles, the regression residuals seem to follow a normal distribution and, thus, the assumptions of the regression model are met. 4.2.5.3 A3: Heteroskedasticity Heteroskedasticity implies that the variance of the error terms is constant: \\[ var(\\epsilon_i|X_i) = \\sigma^2 \\] This means that, the vertical distances between the estimated and the observed dependent variables is constant throughout all distinct values of the explanatory variable(s). If errors are heteroscedastic (i.e. OLS assumption is violated), then it will be difficult to trust the standard errors of the OLS estimates. Hence, the confidence intervals will be either too narrow or too wide. Also, violation of this assumption has a tendency to give too much weight on some portion (subsection) of the data. To comprehend the idea of heteroskedasticity more thoroughly, we can create an artificial simulation of data and plot it. # load scales package for adjusting color opacities library(scales) # generate some heteroskedastic data: # set seed for reproducibility set.seed(123) # set up vector of x coordinates x &lt;- rep(c(10, 15, 20, 25), each = 25) # initialize vector of errors e &lt;- c() # sample 100 errors such that the variance increases with x e[1:25] &lt;- rnorm(25, sd = 10) e[26:50] &lt;- rnorm(25, sd = 15) e[51:75] &lt;- rnorm(25, sd = 20) e[76:100] &lt;- rnorm(25, sd = 25) # set up y y &lt;- 720 - 3.3 * x + e # Create a dataframe model &lt;- data.frame(cbind(y,x)) colnames(model) &lt;- c(&quot;EBITDA&quot;, &quot;Industry&quot;) # Plot the model model %&gt;% ggplot(aes(x = Industry, y = EBITDA)) + geom_boxplot(aes(x = Industry, y = EBITDA, group = Industry),alpha = 0.6, width = 0.8, outlier.colour = &quot;red&quot;, outlier.shape = 1) + geom_jitter(width = 0.2, alpha = 0.6, color = &quot;deepskyblue4&quot;) + geom_smooth(aes(x = Industry, y = EBITDA), method = &quot;lm&quot;, se = F, col = &quot;deeppink4&quot;, linetype = &quot;dashed&quot;) + ylab(&quot;Earnings (EBITDA)&quot;) + xlab(&quot;Industry Classifier&quot;) + ggtitle(&quot;An Example for Heteroskedasticity&quot;) + labs(color=&#39;Cumulative Return&#39;) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.46,lineheight=2.4, margin=margin(15,0,15,45)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.y = element_text(color=&quot;grey26&quot;, size=12, margin=margin(0,10,0,10)), axis.title.x = element_text(color=&quot;grey26&quot;, size=12, margin=margin(10,0,10,0)), axis.line = element_line(color = &quot;grey&quot;)) ## `geom_smooth()` using formula &#39;y ~ x&#39; As we can see clearly, depending on the x variable, the variation of the y variable increases. Here, we do not particularly care about the level of the boxplots, but rather their distribution. As we can see, for the first industry, the earnings are quite centralized. However, they start to spread for different industries. This issue violates the covariance properties of the estimator, because we can no longer assume that the variance of the residuals (the average, squared distance between the predicted and observed values) is constant and thus does not depend on the explanatory variable. The implication is that statistics computed do not follow a standard normal distribution, even in large samples. This issue may invalidate inference when using the previously treated tools for hypothesis testing: we should be cautious when making statements about the significance of regression coefficients on the basis of statistics in the case of heteroskedasticity. 4.2.5.4 A4: Serial Correlation Serial Correlation says that there is no correlation between the residual terms. Simply put, this means that there should not be any statistically significant correlation between adjacent residuals, either throughout different states (cross-sectional) or different times (time-series). This implies: \\(cov(\\epsilon_i\\epsilon_j|X_i) = 0\\). In time series analysis, this means no significant correlation between two consecutive time periods. In cross-sectional analysis, this implies no significant correlation between two consecutive states. Here, “states” is an umbrella term for distinct categories, such as industries, geographic locations (e.g. countries, actual US States), markets etc. Further, “time” indicates different time periods. We usually face serial correlation of both types when working with time-series economic and financial data. First, we may assume that serial correlation within a distinct state over a time period exists, implying that the error terms for an identical state are related with each other through time. Second, we may assume that serial correlation between distinct states during the same time period exists, implying that the error terms for multiple states are related with each other at the same time. Both types of serial correlation are likely to arise in economic and financial settings. For instance, macroeconomic indicators of this year (such as unemployment) are likely to depend to some part on the rate of last year. Further, financial target quantities (such as ROE) may depend on the target quantity of your competitors in the same industry at a given point in time. Even, although less likely, one may assume that share price movements may depend on (I) their historic prices and (II) the price movements of your competitors at a given time (e.g. the strong correlation of FAANG stocks). Consequently, when working with time-series financial data, we may not want to simply disregard serial correlation, both cross-sectionally and time-series wise. Lags, First Differences, Logarithms and Growth Rates Typically, when working with time-series data, we work with one of the following periodic observational manpipulations: Lags: Previous values of a time series (j’th lag of \\(Y_t = Y_{t-j}\\)) First Differences: the difference between periods t and t-j (\\(\\triangle Y_t = Y_t - Y_{t-j}\\)) Logarithm: Remember that, when using logarithms, the return calculation of two periods follows an additive property. That is, we can take the first difference as follows: (\\(\\triangle \\log(Y_t) = \\log(Y_t) - \\log(Y_{t-j})\\)) Growth: We can use an approximation for the percentage change between \\(Y_t\\) and \\(Y_{t-j}\\) with: \\(100\\cdot\\triangle \\log(Y_t)\\) In the case of these variables, we usually should assume that bservations of a time series are typically correlated. This type of correlation is called autocorrelation or serial correlation. The j’th autocorrelation coefficient, also called the serial correlation coefficient, measures the correlation between \\(Y_t\\) and \\(Y_{t-j}\\): \\[ \\rho_j = \\rho_{Y_t, Y_{t-j}} = \\frac{cov(Y_t, Y_{t-j})}{\\sqrt{var(Y_t), var(Y_{t-j})}} \\] 4.2.5.5 Heteroskedasticity and Serial Correlation in terms of the variance-covariance matrix We introduced the concept of heteroskedasticity and serial correlation simultaneously. This is because both assumptions deal with the composition of the covariance matrix and, consequently, the error terms of the explanatory variables (this is not an issue in simple OLS but it will become in multiple OLS). First, let’s define both terms. In order to understand the concept of both assumptions mathematically, let’s dig a little bit into the variance-covariance properties of the error terms. As we understand, when we have multiple regressors, we have a vector of expected error terms: \\[ E(\\epsilon) = E \\begin{bmatrix} \\epsilon_1 \\\\ \\epsilon_2 \\\\ \\vdots \\\\ \\epsilon_N \\end{bmatrix} = \\begin{bmatrix} E(\\epsilon_1) \\\\ E(\\epsilon_2) \\\\ \\vdots \\\\ E(\\epsilon_N) \\end{bmatrix} \\] Remember the formula for the variance-covariance matrix from the linear algebra sesssion. This is: \\[ V(X) = E(XX&#39;) - E(X)E(X&#39;) \\] Transferring this to the error terms, we obtain: \\[\\begin{align*} V(\\epsilon) &amp;= E \\left(\\begin{bmatrix} \\epsilon_1 \\\\ \\epsilon_2 \\\\ \\vdots \\\\ \\epsilon_N \\end{bmatrix} \\begin{bmatrix} \\epsilon_1 &amp; \\epsilon_2 &amp; \\dots &amp; \\epsilon_N \\end{bmatrix}\\right) - \\begin{bmatrix} E(\\epsilon_1) \\\\ E(\\epsilon_2) \\\\ \\vdots \\\\ E(\\epsilon_N) \\end{bmatrix} \\begin{bmatrix} E(\\epsilon_1) &amp; E(\\epsilon_2) &amp; \\dots &amp; E(\\epsilon_N) \\end{bmatrix} \\\\ &amp;= \\begin{pmatrix} \\color{Green}{E(\\epsilon_1^2)} - \\color{blue}{E(\\epsilon_1)^2} &amp; \\color{Red}{E(\\epsilon_1\\epsilon_2)} - \\color{blue}{E(\\epsilon_1)E(\\epsilon_2)} &amp; \\dots &amp; \\color{Red}{E(\\epsilon_1\\epsilon_k)} - \\color{blue}{E(\\epsilon_1)E(\\epsilon_k)} \\\\ \\color{Red}{E(\\epsilon_2\\epsilon_1)} - \\color{blue}{E(\\epsilon_2)E(\\epsilon_1)} &amp; \\color{Green}{E(\\epsilon_2^2)} - \\color{blue}{E(\\epsilon_2)^2} &amp; \\dots &amp; \\color{Red}{E(\\epsilon_2\\epsilon_k)} - \\color{blue}{E(\\epsilon_2)E(\\epsilon_k)} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\color{Red}{E(\\epsilon_N\\epsilon_1)} - \\color{blue}{E(\\epsilon_N)E(\\epsilon_1)} &amp; \\color{Red}{E(\\epsilon_N\\epsilon_2)} - \\color{blue}{E(\\epsilon_N)E(\\epsilon_2)} &amp; \\dots &amp; \\color{Green}{E(\\epsilon_N\\epsilon_k)} - \\color{blue}{E(\\epsilon_N)E(\\epsilon_k)} \\end{pmatrix} \\end{align*}\\] You see that we intentionally used three distinct colors to display the variance-covariance matrix of the error terms. This is to elaborate the assumptions underlying the error terms: First, the Blue channel - Assumption: \\(E(\\epsilon_i) = 0\\). This states that the expected value of each error term (conditional on x), is zero. This implies that \\(E(\\epsilon_1) = E(\\epsilon_2) = \\dots = E(\\epsilon_N) = 0\\). Consequently, the blue terms all equal zero. Secondly, the Red channel - Assumption: \\(Cov(\\epsilon_i, \\epsilon_j) = 0\\) or \\(E(\\epsilon_i \\epsilon_j) = 0\\). This states that we have no serial correlation between the error terms, neither cross-sectionally nor in time-series configurations (for instance, imagine the var-cov matrix would constitute of k industry portfolios and N time periods - implying a covariation between industries and time). As such, the red terms are all equal to zero. Lastly, the Green channel - Assumption: \\(E(\\epsilon_i^2) = \\sigma^2\\). This states that the variance of the error term is constant, thereby each error term has the same variation (and thus the same variance). As such, the green terms are all equal to \\(\\sigma^2\\). The three assumptions thereby deliver us the following variance covariance matrix of the error terms: \\[ V(\\epsilon) = \\begin{pmatrix} \\sigma^2 &amp; 0 &amp; \\dots &amp; 0 \\\\ 0 &amp; \\sigma^2 &amp; \\dots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; \\dots &amp; \\sigma^2 \\end{pmatrix} \\] This is the usual variance-covariance matrix of the error terms. To obtain the Standard Errors, we would simply take the diagonal elements and divide it by the square root of n. We can do so because there is no “covariance” term in the matrix, as all of them are assumed to be zero. However, note that, the usual formula for the variance of an estimator depends on both the variance and covariance properties within a given setting. As such, in presence of heteroskedasticity and serial correlation, the estimator will no longer have the minimum varinace property. If the errors are heteroscedastic, the formulas presented for the coefficient standard errors no longer hold. Tests for Heteroskedasticity and Serial Correlation There are some ways to test for both heteroskedasticity and serial correlation. First, let’s go into Heteroskedasticity. We want to test if \\(var(\\epsilon_i) = \\sigma^2\\). The most popular test is White’s (1980) general test for heteroscedasticity. The test is particularly useful because it makes few assumptions about the likely form of the heteroscedasticity. In essence, we want to find out whether the variance of the residuals varies systematically with any known variables relevant to the model the residuals are part of. To understand why, recall that the variance of the error term is given as: \\[ E[(\\epsilon_i - E(\\epsilon_i))^2] \\] Under the assumption that \\(E(\\epsilon_i) = 0\\), we retrieve that the variance reduces to \\(E[\\epsilon_i^2]\\). As the squares of the population residual terms unobservable, we need to estimate the squared sample residuals. To understand how we retrieve these terms, let’s assume we have the following baseline model: \\[ y_i = \\alpha_i + \\beta_1x_{1i} + \\beta_2x_{2i} + \\epsilon_i \\] Based on this model, White (1980) estimates the baseline model and retrieves the sample estimates of the residual term, \\(\\hat{\\epsilon}_i\\). Then, to test if \\(var(\\epsilon_i) = \\sigma^2\\), the following auxiliary model is estimated: \\[ \\hat{\\epsilon}_i^2 = \\gamma_i + \\delta_1x_{1i} + \\delta_2x_{2i} + \\delta_3x_{1i}^2 + \\delta_4x_{2i}^2 + \\delta_5x_{1i}x_{2i} + v_i \\] whereas \\(v_i\\) is an normally distributed error term which is uncorrelated with \\(\\hat{\\epsilon}_i\\). We understand that the auxiliary regression takes the form of the estimated squared residual terms on the constant, the linear explanatory variables, their squared form as well as their interaction term. The reason for this form is that we want to understand whether the variance of the residuals (given by \\(\\hat{\\epsilon}_i^2\\)) varies systematically with any known variables releant to the model. These relevant variables are given by (I) the original explanatory variables (II) the squared values and (III) the cross-products. Note that we can easily expand the model when considering more variables by using the Pascal triangle for binomial coefficients expansion, where, instead of only the quadratic term, the term depends on higher-order powers. Now, based on this auxiliary model, we can perform an F-Test by running the unrestricted auxiliary model presented above and on a restricted regression of the squared error term on a constant only and comparing their RSS. Second, let’s go into Serial Correlation. We want to test if \\(cov(\\epsilon_i\\epsilon_j|X_i) = 0\\). Note that we focus much more on correlation between time than between states. Consequently, we also employ statistical tests to check for serial correlation (= autocorrelation) for time-series data. Autocorrelation, which is also referred to as serial correlation and lagged correlation in time series analysis, like any correlation, can range from −1 to +1. Its computation is straightforward since it is simply a correlation using the residual pairs \\(\\epsilon_{i,t}\\) and \\(\\epsilon_{i,t-1}\\). The formula for autocorrelation is given by: \\[ \\rho_{auto} = \\frac{\\sum_{t=2}^n\\epsilon_{i,t}\\epsilon_{i,t-1}}{\\sum_{t=2}^n\\epsilon_{i,t}^2} \\] Where \\(\\rho_{auto}\\) means the estimated autocorrelation and \\(\\epsilon_{i,t}\\) is the computed residual or error term for the t-th observation of the i’th state. A positive autocorrelation means that if a residual t is positive (negative), then the residual that follows, t + 1, tends to be positive (negative). Positive autocorrelation is said to exhibit persistence A negative autocorrelation means that a positive (negative) residual t tends to be followed by a negative (positive) residual t + 1 From an estimation perspective, the existence of autocorrelation complicates hypothesis testing of the regression coefficients. This is because although the regression coefficient estimates are unbiased, they are not best linear unbiased estimates. Hence, the variances may be significantly underestimated and the resulting hypothesis test questionable. Now, we can detect autocorrelation in time-series data using the Durbin-Watson (DW) Test. It is computed as: \\[ d = \\frac{\\sum_{t=2}^n (\\epsilon_{i,t} - \\epsilon_{i,t-1})^2}{\\sum_{t=2}^n\\epsilon_{i,t}^2} \\] The denominator of the test is simply the sum of the squares of the error terms; the numerator is the squared difference of the successive residuals. It can be shown that if the sample size is large, then the Durbin-Watson d test statistic given by formula above is approximately related to the auto-correlation given by formula beforehand as: \\[ d \\sim 2(1-\\rho_{auto}) \\] Because \\(\\rho_{auto}\\) varies between [-1,1], this means that d can vary from 0 to 4. This is given by the following graphic: From the above table we see that if d is close to 2 there is no autocorrelation. We now test for autocorrelation by using a critical value approach again, in which we estimate both an upper and lower value, named \\(d_U\\) and \\(d_L\\). We simply take the critical values from the DW table. The general decision rule given the null hypothesis and the computed value for d is summarized in the fol- lowing table: Figure 7: Durbin Watson Test Statistics 4.2.5.6 Multicollinearity 4.2.6 Properties of the OLS Estimator If the above-mentioned assumptions all hold, then the estimators determined by OLS will have a number of desirable properties, and are known as best linear unbiased estimators (BLUE). This stands for: Best – means that the OLS estimator has minimum variance among the class of linear unbiased estimators; the Gauss–Markov theorem proves that the OLS estimator is best by examining an arbitrary alternative linear unbiased estimator and showing in all cases that it must have a variance no smaller than the OLS estimator. Linear - the estimator is linear – that means that the formulas for the estimators are linear combinations of the random variables (in this case y) and thus they have a normality property Unbiased - On average, the actual values of the estimators will be equal to their true values Estimator Under assumptions 1–4 listed above, the OLS estimator can be shown to have the desirable properties that it is consistent, unbiased and efficient. To repeat the notions of the inductive statistics part, this implies that they (I) have asymptotic properties, (II) are exogenous and (III) have a smaller variance (converge quicker). Consequently, the follow the properties we can assume the statistical properties of the estimator, draw causal inference on the estimator through hypothesis testing and confidence intervals, and draw a sample-population relationship. 4.2.7 Expected Value and Variance of the multivarite OLS estimator if the assumptions hold: In order to comprehend the statistical properties of this estimator if the assumptions are valid, we need to understand what its expected value and variance are. To do so, it is first important to understand the relationship between \\(\\hat{\\beta}, \\beta\\) and \\(\\epsilon\\). \\[ \\begin{align*} \\hat{\\beta} &amp;= (X&#39;X)^{-1}X&#39;y \\\\ &amp;= (X&#39;X)^{-1}X&#39;(\\beta X + \\epsilon) &amp;&amp; \\text{we know that } y = X\\beta+\\epsilon\\\\ \\\\ \\hat{\\beta} &amp;= (X&#39;X)^{-1}X&#39;\\epsilon + \\beta\\\\ \\hat{\\beta} - \\beta &amp;= (X&#39;X)^{-1}X&#39;\\epsilon \\end{align*} \\] 4.2.7.1 Expected Value Now, we can take the expected value and understand the first moment of the distribution of the variable: \\[ \\begin{align*} E(\\hat{\\beta}|X) &amp;= E((X&#39;X)^{-1}X&#39;\\epsilon + \\beta|X) \\\\ &amp;= (X&#39;X)^{-1}X&#39;E(\\epsilon|X) + \\beta &amp;&amp; \\text{Ass.2 : } E(\\epsilon|X) = 0 \\\\ &amp;= \\beta \\end{align*} \\] As such, we have an unbiased estimate under Assumption 1 and 2. 4.2.7.2 Variance Let’s explore the second moment of the distribution: \\[ \\begin{align*} V(\\hat{\\beta}) &amp;= E((\\hat{\\beta} - E(\\hat{\\beta}))(\\hat{\\beta} - E(\\hat{\\beta}))&#39;) \\\\ &amp;= E((\\hat{\\beta} - \\beta)(\\hat{\\beta} - \\beta)) \\\\ &amp;= E(((X&#39;X)^{-1}X&#39;\\epsilon)((X&#39;X)^{-1}X&#39;\\epsilon)&#39;) \\\\ &amp;= \\underbrace{(X&#39;X)^{-1}X&#39;X}_{\\text{cancels out}}E(\\epsilon\\epsilon&#39;)(X&#39;X)^{-1} &amp;&amp; E(\\epsilon\\epsilon&#39;) = \\text{ variance of the error term}\\\\ &amp;= \\sigma^2I_N (X&#39;X)^{-1} &amp;&amp; \\text{Ass.3 &amp; Ass.4: } E(\\epsilon\\epsilon&#39;) = \\sigma^2I_N \\end{align*} \\] That implies that the variance of the estimator depends on the variance of the data generating process and the sample variance covariance matrix (= the “variability” of the regressors). As such, we understand that our estimator is normally distributed with mean \\(\\beta\\) and variance \\(\\sigma^2I_N (X&#39;X)^{-1}\\). That is (the \\(I_N\\) is deliberately left out): \\[ \\hat{\\beta} \\sim N(\\beta, \\sigma^2(X&#39;X)^{-1}) \\] Especially the variance property will be important to us when considering potential violations of the assumptions we made. This will be found when considering Heteroskedasticity and Auto Correlation Robust Standard Errors, which require an adjustment factor for the variance structure of the estimator, as properties A3 and A4 no longer hold in such cases and thus the formula for the variance of \\(\\hat{\\beta}\\) is different from the one we just obtained. "],["fixed-income-securities.html", "Chapter 5 Fixed Income Securities 5.1 Economic Analysis 5.2 Swiss Fixed Income Securities 5.3 Principal Component Analysis 5.4 Bond Valuation Strategies 5.5 Interest Rate Derivative Models 5.6 Short Rate Models 5.7 Convertible Bonds", " Chapter 5 Fixed Income Securities In the third chapter, we will cover fixed income securities, the next major part of an average investment portfolio. Therein, we will deal with a multitude of considerations in the fixed income markets. First, we will analyse major macroeconomic variables in order to assess to what extent they are related to interest rates and bond yields. Based on this, we then demonstrate how to analyse Swiss treasury yields. Since some fixed income instruments rely on a premium over the rates of Treasury securities, being able to analyze the Treasury yield curve is essential to making sound fixed income investment decisions. Based on this, we also show how to look at the real yield of Treasury securities. Building up, we use a form of Principal Component Analysis (PCA) to induce that indeed most of the remaining variation of bond prices can be explained by interest rates. Then, we analyze the time series of spreads between corporates of different investment grade ratings. We show how such an analysis can reveal the widening or tightening of credit spreads. This can be viewed as a measure of investor’s appetite for credit risk. Lastly, we show how to implement bond valuation using discounted cash flow analysis in. We show how plain vanilla bonds are valued as well as how to find the yield of a bond if its price and cash flows are known. Further, we demonstrate how to calculate duration and convexity of bonds, which are tools used to manage interest rate risk and show when these techniques can provide reasonable estimates of the change in the bond’s price. This method is helpful when managing a portfolio of bonds, as we do not need to perform a full valuation of each bond in the portfolio. We end this chapter with a discussion of short rate models. In particular, we look at the models by Vasicek and Cox et al. 5.1 Economic Analysis Before we start to actually explore the treasury yields, we first should have a look at certain macroeoconomic indicators. For that, we took data from the Worldbank on Switzerland which will serve as the macroeconomic dataset therein. # Let&#39;s load the dataset macro_vars &lt;- read.csv(&quot;~/Desktop/Master UZH/Data/CH_Data_Macroeconomic.csv&quot;, header = T) macro_vars &lt;- macro_vars %&gt;% mutate(Year = Indicator.Name, Indicator.Name = NULL) This dataset contains 254 macroeconomic variables that could potentially all affect interest rate yields. Although these could potentially all be valid indicators, we do believe that the three most influential indicators will be: Real GDP Unemployment Rate Inflation Rate # Create only the three most common factors macro_ind &lt;- macro_vars %&gt;% select(Unemployment..total....of.total.labor.force...national.estimate., GDP.per.capita.growth..annual..., Inflation..consumer.prices..annual..., Year) colnames(macro_ind) &lt;- c(&quot;Unemployment_Rate&quot;, &quot;GDP_Capita&quot;, &quot;Inflation_Rate&quot;, &quot;Year&quot;) # Print the results in an xts format macro_ind_ts &lt;- xts(macro_ind[,-4], order.by = as.yearmon(macro_ind[,4])) We first discuss real gross domestic product (GDP), which is an indicator of the strength of the economy. Most securities tend to move with the overall economy. When the economy does well, prices of securities tend to increase as well. Conversely, when the economy does poorly, prices of securities tend to decrease too. Hence, it may be helpful to know how well or poorly the economy is doing to determine the best investments that fit our strategy. macro_ind %&gt;% select(Year, GDP_Capita) %&gt;% ggplot(aes(Year, GDP_Capita)) + geom_bar(stat=&quot;identity&quot;, color = &quot;goldenrod&quot;) + ggtitle(&quot;GDP Per Capita Growth Switzerland&quot;) + ylab(&quot;Growth (in %)&quot;) + xlab(&quot;Time&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) ## Warning: Removed 1 rows containing missing values (position_stack). As we can see, there was a largely positive growth in Switzerland of Real GDP Per Capita for the period under consideration, with a mean growth of 0.91%. Importantly, we can observe that there are only very negative periods in three distinct economic events: The banking crisis of the 90s, the financial crisis as well as the COVID pandemic. Another example of key economic data available is the US Consumer Price Index (CPI) data, which is commonly used to calculate the inflation rate. The inflation rate is one of the most important factors investors consider in determining their expected rates of return. A higher inflation rate would lead to a higher required expected rate of return, as a CHF tomorrow is worth less than a CHF is worth today. The Bureau of Labor Statistics of the US Department of Labor reports the CPI data every month, we have it each year. The year-over-year changes in the CPI are typically used as a common measure of the inflation rate. The year-over-year change means that the inflation rate for a particular month is equal to the percentage change in the CPI for that same month last year. # Create the plot macro_ind %&gt;% select(Year, Inflation_Rate) %&gt;% ggplot(aes(Year, Inflation_Rate)) + geom_line(stat=&quot;identity&quot;, color = &quot;darkgreen&quot;) + ggtitle(&quot;Inflation Rate Switzerland&quot;) + ylab(&quot;Rate in %&quot;) + xlab(&quot;Time&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + geom_hline(yintercept = mean(macro_ind$Inflation_Rate), color = &quot;goldenrod&quot;, linetype = &quot;dashed&quot;) + annotate(&quot;rect&quot;, xmin = 1981, xmax = 1983, ymin = -2, ymax = 6.5, alpha = .1,fill = &quot;violetred&quot;) + annotate(&quot;rect&quot;, xmin = 1991, xmax = 1994, ymin = -2, ymax = 6.5, alpha = .1,fill = &quot;violetred&quot;) + annotate(&quot;rect&quot;, xmin = 2007, xmax = 2009, ymin = -2, ymax = 6.5, alpha = .1,fill = &quot;violetred&quot;) + annotate(&quot;rect&quot;, xmin = 2019, xmax = 2020, ymin = -2, ymax = 6.5, alpha = .1,fill = &quot;violetred&quot;) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) As we can see, there appears a continous downward trend of the inflation rate with three major implications, that all appear to be part of the recession periods in the global economy, which is highlighted in violetred. Lastly, we can look at the unemployment rate. If unemployment increases, consumer spending usually declines. # Create the plot macro_ind %&gt;% select(Year, Unemployment_Rate) %&gt;% ggplot(aes(Year, Unemployment_Rate)) + geom_line(stat=&quot;identity&quot;, color = &quot;khaki4&quot;) + ggtitle(&quot;Unemployment Rate Switzerland&quot;) + ylab(&quot;Rate in %&quot;) + xlab(&quot;Time&quot;) + scale_color_manual(values=c(&quot;tomato3&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + geom_hline(yintercept = mean(macro_ind$Unemployment_Rate), color = &quot;lightsteelblue&quot;, linetype = &quot;dashed&quot;) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) As we can see, also unemployment rates appear to follow a structure based on macroeconomic crises. As we may understand, unemployment has been on the rise in Switzerland, which is mainly due to the different formulations and adjustments of unemployment beneficiaries during the 90s. Afterwards, we analyse an increasing, but rather weak, growth in unemployment rates. Furthermore, we understand that the spikes in the inflation rate are mainly mirroring the recession-based macroeconomic constitution of Switzerland. Lastly, we can observe that GDP growth per capita has been constantly positive, except for recession-related developments. 5.2 Swiss Fixed Income Securities The Swiss Government Bond yields are the benchmark for the rates of other Swiss fixed income instruments. They also do depend, to some degree, on the US Treasury Yields, due to the interconnectedness of both macro-oriented economies. As such, knowledge of Government Yields is required to determine whether the yields of other fixed income securities are large enough for the incremental risk we are taking on. In addition, trading strategies can be constructed around the differential between short rates and long-term rates. If Short-Term Rates for 3-months substantially lower than 6-month rates, an investor who expects to hold a Short-Term bond for 3 months may instead purchase a 6-month bond and sell it in 3 months to take advantage of the higher yields on the longer dated instrument. This strategy is known as riding the yield curve. 5.2.1 Shape of the Swiss Yield curve The Treasury yield curve is a curve comprised of rates on key maturities of Swiss Treasury securities. The yield curve can take on many shapes. It can be: upward sloping, which means that short-term rates are lower than long-term rates. An upward sloping yield curve is also called normal, which implies this is the most typical shape of the yield curve we observe. The yield curve can be: inverted, which means that the short-term rates are higher than long-term rates. The yield curve can also be: flat, which means that the short-term rates are almost the same as the long- term rates. We can now find dates on which the yield curves showed each of the particular smiles (or structures). To do so, we will take the largest and smallest as well as minimal absolute value of the difference between a 1-Year and a 30-Year Treasury bond, since these should indicate the behaviour of the yield curve quite precisely. The slope of the Swiss yield curve has been known as an indicator of future economic activity and rising inflation expectations. The slope is calculated as the difference between the yields of long-term and short-term Treasury securities. In prior recessions, short-term interest rates rose above long-term rates, which is the opposite of the more conventional pattern of long-term interest rates being higher than short-term interest rates. Swiss_Bonds &lt;- read.csv(&quot;~/Desktop/Master UZH/Data/A2_dataset_02.txt&quot;, header = T, sep = &quot;\\t&quot;) colnames(Swiss_Bonds) &lt;- c(&quot;Date&quot;, &quot;Year_10&quot;, &quot;Year_1&quot;, &quot;Year_15&quot;, &quot;Year_2&quot;, &quot;Year_20&quot;, &quot;Year_3&quot;, &quot;Year_30&quot;, &quot;Year_4&quot;, &quot;Year_5&quot;, &quot;Year_6&quot;, &quot;Year_7&quot;, &quot;Year_8&quot;, &quot;Year_9&quot;) Swiss_Bonds_ts &lt;- xts(Swiss_Bonds[,c(&quot;Year_1&quot;, &quot;Year_10&quot;)], order.by = as.Date(Swiss_Bonds$Date)) Swiss_Bonds_ts$Diff = Swiss_Bonds_ts$Year_10 - Swiss_Bonds_ts$Year_1 Swiss_Bonds %&gt;% select(Date, Year_10, Year_1) %&gt;% mutate(Diff = Year_10 - Year_1) %&gt;% gather(Treasury, Yield, Year_10:Year_1) %&gt;% ggplot(aes(x = as.Date(Date), y = Yield, fill = Treasury), ) + geom_bar(stat = &quot;identity&quot;) + geom_line(aes(y = Diff, x = as.Date(Date), color = &quot;Year 10 - Year 1&quot;)) + ggtitle(&quot;Swiss Government Bond Yield - absolute returns and differences&quot;) + ylab(&quot;Spread in BPS&quot;) + xlab(&quot;Time&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_y_continuous( # Features of the first axis name = &quot;Yield&quot;, # Add a second axis and specify its features sec.axis = sec_axis(~.*100, name=&quot;Spread in BPS&quot;) ) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=-0.3, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + labs(fill=&#39;Swiss Government Bonds&#39;) + labs(color=&#39;Difference in Yield&#39;) The violet line indicates the difference in yield whereas the stacked bar chart indicates the total return of the government bonds in percent whereas the right y axis indicates the spread of the Yield curve in BPS. As we can observe, the Swiss market has been less severely hit by the financial crisis as other, more exposed, markets. This is resembled in the Yield curve. Although we can observe a certain negative direction, yields of longer-termed treasuries always exceed the ones of shorter termed. However, since 2010 we observe a continuously declining Spread, which results in a difference of practically zero for the last five years of the observational horizon. 5.2.2 The case for mean reversion When yields are predictable, there is opportunity for investors to make money. One indicator of return predictability is when yields are mean reverting. This means that if yields today are higher than some historical average, yields would have a tendency to decline towards the mean in the future. Conversely, if yields today are lower than some historical average, yields would have a tendency to rise towards the mean in the future. We implement an analysis to determine whether yields for the 10-Year Constant Maturity Treasury exhibit mean reversion. In this analysis, we will use a 20-day moving average of yields. Swiss_Bonds_ma &lt;- Swiss_Bonds %&gt;% select(Date, Year_10) %&gt;% mutate(rolling_mean_50_d = rollmean(Year_10, k = 50, fill = NA), rolling_mean_100_d = rollmean(Year_10, k = 100, fill = NA)) Swiss_Bonds_ma_ts &lt;- xts(Swiss_Bonds_ma[,-1], order.by = as.Date(Swiss_Bonds_ma[,1])) Swiss_Bonds_ma_ts %&gt;% tidy() %&gt;% ggplot(aes(x = index, y = value, color = series)) + geom_line() + ggtitle(&quot;Swiss Government Bond Yield 10 Year - Actual and Moving Average&quot;) + ylab(&quot;Value in %&quot;) + xlab(&quot;Time&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=-0.3, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + labs(fill=&#39;Swiss Government Bonds&#39;) + labs(color=&#39;Difference in Yield&#39;) ## Warning: Removed 148 row(s) containing missing values (geom_path). As we can see, the treasury yield exhibits mean reversion. We can see this because it follows up and down its moving average. Consequently, a trading strategy could be to go short in the Treasury if the 100 days MA is below its 50 day MA and buy otherwise. This is because we expect mean-reversion. As such, if the shorter period returns exceed the longer period returns, we expect them to move into the other direction. 5.3 Principal Component Analysis One of the most fundamental results in fixed income analysis is that virtually all of the variation in interest rates is a result of the level of interest rates. The slope of the term structure and curvature of the yield curve explain the remaining variation. This result can be verified through the use of principal components analysis (PCA). Swiss_Bonds_full &lt;- Swiss_Bonds %&gt;% subset(Date &gt;= &quot;1997-12-31&quot;) %&gt;% select(-Date) library(stats) pca &lt;- prcomp(Swiss_Bonds_full, scale. = TRUE) summary(pca) ## Importance of components: ## PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 PC9 PC10 PC11 PC12 PC13 ## Standard deviation 3.5491 0.58540 0.21082 0.1195 0.04141 0.02224 0.007382 0.002334 0.000495 0.0001955 0.0001872 0.0001831 0.0001585 ## Proportion of Variance 0.9689 0.02636 0.00342 0.0011 0.00013 0.00004 0.000000 0.000000 0.000000 0.0000000 0.0000000 0.0000000 0.0000000 ## Cumulative Proportion 0.9689 0.99531 0.99873 0.9998 0.99996 1.00000 1.000000 1.000000 1.000000 1.0000000 1.0000000 1.0000000 1.0000000 We output the eigenvectors as well. We interpret the signs as the opposite from what is reported in the output (i.e., negatives are positives and positives are negatives). Thus, we add a negative sign to the beginning of the code to make interpretation more consistent with the output. -pca$rotation ## PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 PC9 PC10 PC11 ## Year_10 0.2801127 -0.16770071 0.15533180 -0.245480481 -0.16238677 -0.26565957 0.23822063 -0.20476159 -0.465397753 -4.462272e-01 -0.169525384 ## Year_1 0.2637452 0.56664753 -0.44786724 -0.577264729 0.17744136 0.18121052 0.09169529 -0.04929359 0.018247856 -4.449694e-03 -0.002379213 ## Year_15 0.2776030 -0.28728959 -0.08812388 -0.149245908 -0.43115745 0.10666933 0.47098967 0.54392512 0.291127513 9.306038e-02 0.016161827 ## Year_2 0.2735860 0.39662099 -0.18987621 0.296856154 -0.40707805 -0.47942260 -0.37338081 0.28566636 -0.151563075 4.720455e-02 0.025633498 ## Year_20 0.2752764 -0.34757347 -0.28966100 0.013543670 -0.34472500 0.53299822 -0.48397231 -0.26658342 -0.102697083 -2.174120e-02 -0.002940692 ## Year_3 0.2779637 0.26378555 0.02494850 0.445715083 -0.15496516 0.05537054 0.32046445 -0.48285557 0.451186125 -2.102009e-01 -0.129473235 ## Year_30 0.2715658 -0.39968519 -0.57741296 0.261729793 0.52008234 -0.29171184 0.09367674 0.01501176 0.003606059 -4.110169e-05 -0.000575919 ## Year_4 0.2800823 0.16324589 0.16150069 0.324055786 0.12202157 0.30839719 0.27662290 -0.01688738 -0.396351670 4.086547e-01 0.352005187 ## Year_5 0.2810174 0.08267378 0.23498345 0.149842141 0.24980298 0.26623607 -0.03379939 0.32532988 -0.260866606 -2.368637e-01 -0.505301740 ## Year_6 0.2812977 0.01570441 0.26297847 -0.002614109 0.25038529 0.10189098 -0.24006845 0.26158691 0.176535890 -9.839002e-02 0.270196617 ## Year_7 0.2812197 -0.04110021 0.25983735 -0.115088992 0.17412626 -0.06759702 -0.26361127 0.02446518 0.390598645 -2.980410e-01 0.233448216 ## Year_8 0.2809450 -0.08977136 0.23611284 -0.188318362 0.06330848 -0.19096497 -0.14429452 -0.17628863 0.182997208 6.380130e-01 -0.514274936 ## Year_9 0.2805599 -0.13162910 0.19953555 -0.229299069 -0.05375073 -0.25633053 0.04784467 -0.25983225 -0.137297149 1.290083e-01 0.427018047 ## PC12 PC13 ## Year_10 1.432545e-01 0.3852653180 ## Year_1 3.121831e-03 -0.0008220080 ## Year_15 -3.833379e-02 -0.0159392542 ## Year_2 -3.188274e-02 0.0146856001 ## Year_20 9.072181e-03 -0.0001289195 ## Year_3 1.291737e-01 -0.0986884996 ## Year_30 -5.477292e-05 0.0003382548 ## Year_4 -1.816899e-01 0.3098295486 ## Year_5 -1.640831e-01 -0.4357182294 ## Year_6 7.260988e-01 0.1060855489 ## Year_7 -6.090525e-01 0.2581623167 ## Year_8 3.890995e-02 0.1512694167 ## Year_9 -2.452299e-02 -0.6743378937 Further, we get the dimensioanal scores of the products, which tell us the contribution of each dimension to the PCs library(factoextra) res.var &lt;- get_pca_var(pca) res.var$coord # Coordinates ## Dim.1 Dim.2 Dim.3 Dim.4 Dim.5 Dim.6 Dim.7 Dim.8 Dim.9 Dim.10 ## Year_10 -0.9941556 0.098171827 -0.032747612 0.029343081 0.006723830 0.005909039 -0.0017584722 4.780131e-04 2.303503e-04 8.723149e-05 ## Year_1 -0.9360651 -0.331714890 0.094420990 0.069002333 -0.007347184 -0.004030647 -0.0006768667 1.150752e-04 -9.031844e-06 8.698561e-07 ## Year_15 -0.9852484 0.168179035 0.018578595 0.017839849 0.017852619 -0.002372635 -0.0034767023 -1.269786e-03 -1.440946e-04 -1.819207e-05 ## Year_2 -0.9709914 -0.232181526 0.040030389 -0.035484183 0.016855581 0.010663748 0.0027561835 -6.668841e-04 7.501670e-05 -9.227863e-06 ## Year_20 -0.9769908 0.203469157 0.061067380 -0.001618919 0.014273774 -0.011855425 0.0035725362 6.223353e-04 5.083030e-05 4.250117e-06 ## Year_3 -0.9865286 -0.154419796 -0.005259733 -0.053277775 0.006416528 -0.001231601 -0.0023655710 1.127220e-03 -2.233162e-04 4.109149e-05 ## Year_30 -0.9638214 0.233975307 0.121732288 -0.031285415 -0.021534666 0.006488517 -0.0006914932 -3.504475e-05 -1.784832e-06 8.034835e-09 ## Year_4 -0.9940478 -0.095563980 -0.034048160 -0.038735444 -0.005052457 -0.006859647 -0.0020419460 3.942335e-05 1.961757e-04 -7.988657e-05 ## Year_5 -0.9973665 -0.048397146 -0.049540060 -0.017911119 -0.010343408 -0.005921862 0.0002494968 -7.594781e-04 1.291169e-04 4.630371e-05 ## Year_6 -0.9983614 -0.009193348 -0.055442071 0.000312473 -0.010367519 -0.002266351 0.0017721122 -6.106710e-04 -8.737709e-05 1.923394e-05 ## Year_7 -0.9980846 0.024060020 -0.054779850 0.013756962 -0.007209918 0.001503554 0.0019458982 -5.711362e-05 -1.933282e-04 5.826305e-05 ## Year_8 -0.9971095 0.052552063 -0.049778162 0.022510307 -0.002621367 0.004247615 0.0010651382 4.115434e-04 -9.057514e-05 -1.247231e-04 ## Year_9 -0.9957427 0.077055543 -0.042066807 0.027408864 0.002225617 0.005701534 -0.0003531748 6.065748e-04 6.795573e-05 -2.521941e-05 ## Dim.11 Dim.12 Dim.13 ## Year_10 3.173069e-05 -2.623009e-05 -6.108368e-05 ## Year_1 4.453260e-07 -5.716113e-07 1.303291e-07 ## Year_15 -3.025069e-06 7.018966e-06 2.527163e-06 ## Year_2 -4.797916e-06 5.837770e-06 -2.328397e-06 ## Year_20 5.504203e-07 -1.661128e-06 2.044015e-08 ## Year_3 2.423398e-05 -2.365187e-05 1.564703e-05 ## Year_30 1.077969e-07 1.002899e-08 -5.363018e-08 ## Year_4 -6.588611e-05 3.326766e-05 -4.912337e-05 ## Year_5 9.457919e-05 3.004382e-05 6.908297e-05 ## Year_6 -5.057370e-05 -1.329496e-04 -1.681983e-05 ## Year_7 -4.369536e-05 1.115183e-04 -4.093154e-05 ## Year_8 9.625874e-05 -7.124461e-06 -2.398371e-05 ## Year_9 -7.992654e-05 4.490192e-06 1.069160e-04 res.var$contrib # Contributions to the PCs ## Dim.1 Dim.2 Dim.3 Dim.4 Dim.5 Dim.6 Dim.7 Dim.8 Dim.9 Dim.10 Dim.11 ## Year_10 7.846313 2.81235286 2.41279690 6.026067e+00 2.6369464 7.0575009 5.6749069 4.19273084 21.659506807 1.991187e+01 2.873886e+00 ## Year_1 6.956151 32.10894205 20.05850617 3.332346e+01 3.1485438 3.2837254 0.8408026 0.24298578 0.033298425 1.979977e-03 5.660653e-04 ## Year_15 7.706343 8.25353083 0.77658179 2.227434e+00 18.5896747 1.1378346 22.1831267 29.58545393 8.475522855 8.660235e-01 2.612047e-02 ## Year_2 7.484928 15.73082093 3.60529753 8.812358e+00 16.5712535 22.9846032 13.9413232 8.16052684 2.297136578 2.228270e-01 6.570762e-02 ## Year_20 7.577707 12.08073154 8.39034965 1.834310e-02 11.8835328 28.4087102 23.4229195 7.10667206 1.054669094 4.726799e-02 8.647672e-04 ## Year_3 7.726384 6.95828176 0.06224277 1.986619e+01 2.4014200 0.3065897 10.2697464 23.31495011 20.356891910 4.418443e+00 1.676332e+00 ## Year_30 7.374796 15.97482524 33.34057247 6.850248e+00 27.0485641 8.5095798 0.8775332 0.02253530 0.001300366 1.689349e-07 3.316827e-05 ## Year_4 7.844611 2.66492212 2.60824737 1.050122e+01 1.4889263 9.5108826 7.6520231 0.02851836 15.709464658 1.669987e+01 1.239077e+01 ## Year_5 7.897078 0.68349537 5.52172205 2.245267e+00 6.2401530 7.0881646 0.1142399 10.58395333 6.805138616 5.610441e+00 2.553298e+01 ## Year_6 7.912840 0.02466286 6.91576738 6.833566e-04 6.2692794 1.0381771 5.7632860 6.84277132 3.116492030 9.680596e-01 7.300621e+00 ## Year_7 7.908454 0.16892271 6.75154501 1.324548e+00 3.0319955 0.4569358 6.9490904 0.05985450 15.256730142 8.882842e+00 5.449807e+00 ## Year_8 7.893010 0.80588970 5.57492723 3.546381e+00 0.4007963 3.6467621 2.0820909 3.10776801 3.348797813 4.070606e+01 2.644787e+01 ## Year_9 7.871385 1.73262202 3.98144368 5.257806e+00 0.2889141 6.5705340 0.2289112 6.75127962 1.885050705 1.664314e+00 1.823444e+01 ## Dim.12 Dim.13 ## Year_10 2.052186e+00 1.484294e+01 ## Year_1 9.745829e-04 6.756972e-05 ## Year_15 1.469480e-01 2.540598e-02 ## Year_2 1.016509e-01 2.156669e-02 ## Year_20 8.230447e-03 1.662024e-06 ## Year_3 1.668584e+00 9.739420e-01 ## Year_30 3.000072e-07 1.144163e-05 ## Year_4 3.301123e+00 9.599435e+00 ## Year_5 2.692325e+00 1.898504e+01 ## Year_6 5.272195e+01 1.125414e+00 ## Year_7 3.709450e+01 6.664778e+00 ## Year_8 1.513984e-01 2.288244e+00 ## Year_9 6.013772e-02 4.547316e+01 res.var$cos2 ## Dim.1 Dim.2 Dim.3 Dim.4 Dim.5 Dim.6 Dim.7 Dim.8 Dim.9 Dim.10 ## Year_10 0.9883454 9.637708e-03 1.072406e-03 8.610164e-04 4.520988e-05 3.491674e-05 3.092224e-06 2.284965e-07 5.306127e-08 7.609333e-09 ## Year_1 0.8762179 1.100348e-01 8.915323e-03 4.761322e-03 5.398111e-05 1.624612e-05 4.581485e-07 1.324230e-08 8.157420e-11 7.566496e-13 ## Year_15 0.9707143 2.828419e-02 3.451642e-04 3.182602e-04 3.187160e-04 5.629397e-06 1.208746e-05 1.612356e-06 2.076326e-08 3.309514e-10 ## Year_2 0.9428243 5.390826e-02 1.602432e-03 1.259127e-03 2.841106e-04 1.137155e-04 7.596547e-06 4.447345e-07 5.627506e-09 8.515345e-11 ## Year_20 0.9545110 4.139970e-02 3.729225e-03 2.620899e-06 2.037406e-04 1.405511e-04 1.276301e-05 3.873012e-07 2.583719e-09 1.806349e-11 ## Year_3 0.9732387 2.384547e-02 2.766479e-05 2.838521e-03 4.117183e-05 1.516842e-06 5.595926e-06 1.270624e-06 4.987014e-08 1.688510e-09 ## Year_30 0.9289517 5.474444e-02 1.481875e-02 9.787772e-04 4.637419e-04 4.210085e-05 4.781628e-07 1.228135e-09 3.185625e-12 6.455857e-17 ## Year_4 0.9881310 9.132474e-03 1.159277e-03 1.500435e-03 2.552732e-05 4.705476e-05 4.169544e-06 1.554201e-09 3.848491e-08 6.381864e-09 ## Year_5 0.9947400 2.342284e-03 2.454218e-03 3.208082e-04 1.069861e-04 3.506845e-05 6.224865e-08 5.768070e-07 1.667117e-08 2.144033e-09 ## Year_6 0.9967254 8.451766e-05 3.073823e-03 9.763936e-08 1.074855e-04 5.136345e-06 3.140382e-06 3.729191e-07 7.634756e-09 3.699445e-10 ## Year_7 0.9961729 5.788846e-04 3.000832e-03 1.892540e-04 5.198292e-05 2.260674e-06 3.786520e-06 3.261966e-09 3.737581e-08 3.394583e-09 ## Year_8 0.9942274 2.761719e-03 2.477865e-03 5.067139e-04 6.871567e-06 1.804223e-05 1.134519e-06 1.693679e-07 8.203856e-09 1.555585e-08 ## Year_9 0.9915036 5.937557e-03 1.769616e-03 7.512459e-04 4.953371e-06 3.250749e-05 1.247324e-07 3.679330e-07 4.617981e-09 6.360187e-10 ## Dim.11 Dim.12 Dim.13 ## Year_10 1.006837e-09 6.880175e-10 3.731216e-09 ## Year_1 1.983153e-13 3.267394e-13 1.698567e-14 ## Year_15 9.151041e-12 4.926589e-11 6.386554e-12 ## Year_2 2.302000e-11 3.407956e-11 5.421431e-12 ## Year_20 3.029625e-13 2.759346e-12 4.177996e-16 ## Year_3 5.872859e-10 5.594107e-10 2.448294e-10 ## Year_30 1.162017e-14 1.005807e-16 2.876196e-15 ## Year_4 4.340979e-09 1.106737e-09 2.413105e-09 ## Year_5 8.945223e-09 9.026310e-10 4.772457e-09 ## Year_6 2.557699e-09 1.767560e-08 2.829066e-10 ## Year_7 1.909285e-09 1.243633e-08 1.675391e-09 ## Year_8 9.265745e-09 5.075795e-11 5.752185e-10 ## Year_9 6.388252e-09 2.016182e-11 1.143104e-08 The first principal component has approximately equal weights at all maturities. Thus, it is often thought to capture the level of interest rates. The second principal component has negative factors in the short maturities, becomes more neutral (i.e., closer to zero) for the intermediate maturities, and becomes positive for the long maturities. Thus, it is believed the second component captures the slope of the term structure. Finally, the third principal component has positive weights in the short and long end of maturities but has negative weights in the intermediate maturity. Thus, the third component is said to capture the curvature of the yield curve. 5.4 Bond Valuation Strategies The objective of fixed income security management is to find securities which adhere to a given risk and return structure. Consequently, portfolio bond management works with the same principles as the security portfolio management we have seen in the previous chapter. Consequently, you allocate funds into different FI securities such that the expected return of the portfolio can be maximised for a given level of risk, or vice versa. In order to assess the risk of bonds, we first need to derive common bond structures as well as their parameters. Then, we can derive a connection between the individual parameters and understand how rates, yields and prices of bonds are related. Understanding this relationship, we can then create certain risks each bond is underlying to. The risks include credit risk, liquidity risk, and market risk among others. The first two can be handled by selecting only securities with predetermined default risk, for example, with a minimum credit rating and with proper liquidity characteristics. The market risk of a fixed income security is captured by duration, modified duration, keynote duration, or factor duration. Having understood how the risks can be minimised, we can then proceed to model term rate structures and define functions which capture the relative risk approppriately. We show how to compute prices of bonds based on YTM, spot rates and forward rates. Ultimately, we dig into FI derivatives, which are products whose value structure primarily depends on an underlying interest rate. 5.4.1 The most common bonds When you buy a bond you are loaning a tradeable security in form of money to the corporation of interest. The corporation is obligated to pay back the principal and to pay interest as stipulated by the bond. The bond owner receives a fixed stream of income, unless the corporation defaults on the bond. For this reason, bonds are called “fixed income” securities. Importantly, bond prices move in opposite direction to interest rates, so a decrease in interest rates will cause a bond “rally,” where bond prices increase. Long-term bonds are more sensitive to interest-rate changes than short-term bonds. The interest rate on your bond is fixed, but in the market interest rates fluctuate. Therefore, the market value of your bond fluctuates too. Let’s first introduce the two basic forms of bonds, Zero-Coupon and Coupon Bonds. 5.4.1.1 Zero-Coupon Bonds Zero-Coupon Bonds (ZCB) are called as such because they do not pay any interest or principal until maturity. It has a par value or face value, which is the payment made to the bondholder at maturity. The bond sells for less than the par value, which is the reason it is a discount bond. Since the ZCB does not pay any interest, the general formula is: \\[ P = \\frac{N}{(1+y)^T} \\] whereas V is the Present Value of the bond, (1+y) the interest rate (= yield) and T is the time to maturity. The yield to maturity of a zero-coupon bond of maturity years is called the spot rate. If you compound it more than once per year, the formula switches to: \\[ P = \\frac{V}{(1+y/k)^{kT}} \\] whereas k is the frequency of compounding, in annual terms. For instance, if you compound quarterly, then k = 4. If we assume continuous compounding, then we obtain the following: \\[ P = Ve^{-y_TT} \\] 5.4.1.2 Coupon Bonds Coupon bonds make regular interest payments. Coupon bonds generally sell at or near the par value when issued. At maturity, one receives a principal payment equal to the par value of the bond and the final interest payment. The general formula for a coupon bond is: \\[ P = \\sum_{t=0}^{kT} \\frac{cN}{(1+y/k)^t} + \\frac{N}{(1+y/k)^{kT}} \\] whereas c is the coupon rate. As we likely know, we can transform this formula based on the condition of finite geometric series. Therein, we understand that each coupon payment can be transposed to an annuity payment which pays \\((c/k)P\\) for \\(kT\\) periods, we can re-write the above expression to: \\[ P = (c/k) N \\left( \\frac{1}{y/k} - \\frac{1}{(y/k)(1+y/k)^{kT}} \\right) + \\frac{N}{(1+y/k)^{lT}} \\] A coupon bond is a bundle of zero-coupon bonds, one for each coupon payment and a final one for the principal payment. The components have different maturity dates and therefore different spot rates. 5.4.2 Yield-to-Maturity (YTM) The yield to maturity, often shortened to simply yield, is the average rate of return, including the loss (or gain) of capital because the bond was purchased above (or below) par. This occurs because the actual yield trades always at market value and not at par value. Further, at maturity you only receive the par value and not the actual market value of the bond. As such, we can use the same formula as above, but instead of the price, we now need to source for the r which holds the equality condition of the function above. If we do not trade at par, then the YTM will inevitably be different from both the current yield (which is the coupon / traded value) as well as the coupon rate (coupon / par value). In order to conceptualise this, let’s consider an example: T = 10 C = 50 P = 1500 N = 1000 k = 4 (quarterly compounded) # Create the input parameters Ti = 11 C = 0.0575 y = 0.01391 N = 1000 k = 2 # Create the function market_value = function(Ti, C, y, N, k){ # Computes Bond Value corresponding to the input parameters # INPUT: ## C = Coupon payment ## T = Time to Maturity (in years) ## r = Vector of yields to maturity ## N = Par Value ## k = Compounding Frequency (in times per year) coupon_freq = C/k yield_freq = y/k periods = Ti*k bond_coupon = rep(coupon_freq, periods) bond_df &lt;- as.data.frame(bond_coupon) for (i in 1:periods){ bond_df$cf[i] = N * coupon_freq bond_df$ytm[i] &lt;- yield_freq bond_df$period[i] &lt;- i bond_df$FV[i] &lt;- ifelse(bond_df$period[i] == k*Ti, N, 0) } bond_df$cf_pv &lt;- (bond_df$cf + bond_df$FV)/((1+bond_df$ytm)^bond_df$period) sum_v &lt;- sum(bond_df$cf_pv) return(sum_v) } # Create a data frame mv = market_value(Ti, C, r, N, k) mv ## [1] 905.2055 This function provides us with a value for the Price fo the Bond of 1443.184.- In essence, we can state the following relationship: \\[ price &gt; par \\rightarrow Coupon Rate &gt; Current Yield &gt; YTM \\] whereas the opposite holds, as well. This is because if the price is higher than the par, then the buyers pay up a higher rent to make up for the difference. As we stated, a coupon bond is a bundle of zero-coupon bonds, one for each coupon payment and a final one for the principal payment. The component zeros have different maturity dates and therefore different spot rates. However, since depicting the individual, time appropriate spot rates is difficult, we simplify the model by defining that the yield we use is simply an average of forward rates to price future, time-discrete cash flows during discrete future time periods. Consequently, we can either take one big average (the yield) and discount each future cash flow by this average, or we take the individual forward rates, specific to each future cash flow, and discount the cash flows by this specific, or distinct, rate. This concept provides an introduction to the interconnections between yields, forward rates and discount factors. In essence, we will show that we include time-discrete forward rates into a model of bond prices by combining each time-discrete rate at each distinct maturity. Based on this, we can then construct a piece-wise rate model which calculates the forward rate for each discrete time to maturity. Then, we can combine these building blocks to create one continuous yield curve. In order to do so, we will focus explicitly on the term structure of the interest rates. 5.4.3 Term Structure In FI securities, the notion term defines the maturity of the debt, which is the date on which the principal amount of a debt instrument becomes due. Based on this, the notion term structure is the schedule of interest rates defined and posted at each maturity date. A term structure can be described by breaking down the time interval between the present time and the maturity time of a bond into short time segments with a constant interest rate within each segment, but with interest rates varying between segments. Thus, the term structure of interest rates is a description of how, at a given time, the yield depends on the maturity. Consequently, it is also referred to as yield curve. The yield curve is evidently dependent on the maturity of the bond. If the maturity increases, higher yields can convince lenders to wait longer for the return of the principal. On the other hand, longer maturity bonds are inherently more risky than shorter maturity securities. Thus, they require higher yields to compensate for the respective risk. When considering term structures, our objective is to create a model of bond prices that reflects the baseline dynamic of the interest rate term structure. In order to do so, we need to catch up on the connection between yields and forward rates again and define forward rates of bond returns at various maturities. When averaging these rates across time, we can define a yield calculation (and thus obtain the yield we use normally in the formulas above). We then need to find a way to interpolate rates across maturities. To do so, we employ “regression splines” to interpolate and extrapolate values of forward rates from the term structure. Based on these “polations” we then are able to price bonds, collaterals as well as build discount rates to evaluate expected cash flows. 5.4.3.1 The interconnection of Yields, Prices and Forward Rates Remember that the price of the bond depends on the yield, which is given as a function of time to maturity: 5.4.3.1.1 Prices and Yields \\[ P_T = \\frac{N_T}{(1+y^d(T))^{T}} \\] We have seen that increasing the maturity or frequency of the bond (and payments) influences the yield if we assume that the price of the bond remains constant. Also, we understand that certain events between two maturities can alter the yield or other variables of the model. Thus, at each time period, we obtain a different discount rate, based on the actual time to maturity (remember we only take the average then of all these payments). Based on these piece-wise functions, we can then obtain the yield curve which quantifies the yield on each maturity. The expression above translates to smaller piece-wise functions once we increase the frequency of payments, up to the extreme of obtaining continuously compounded returns defined as: \\[ P_T(\\theta) = N_T e^{-y_T T} \\] This expression is identical to the present value of receiving the entire cash flow of the face value at maturity. Consequently, this can also be considered a form of Zero-Coupon Bond. If the bond has coupons, we can consider each of the coupon payments as a mini-zero bond. Taking the sum of the present value of each of the mini ZCB gives us the value of the bond, now quantified as a portfolio of mini-zeros. We deliberately switched to the idea of ZCB as parts of continuously compounded yields to obtain maturity-based piece-wise forward rates due to the definition of the respective yields, as we can see below. The yield \\((y_T)\\) is the rate from date 0 to date T, or the maturity. As we defined, it quantifies the stream of rates based on each time-discrete, intermediate maturity from 0 to T. Now, suppose we define forward rates as \\(r(t, \\theta)\\), whereas each t is one of the time-discrete, intermediate maturity dates between time 0 and the ultimate maturity T. The forward rate is thus the interest contracted now to be paid for a future investment between the time s and t. Further, \\(\\theta\\) contains the entire set of the information we require about the shape of r across all sub-maturities. In this case, we can estimate the forward curve from bond prices \\(P(t)\\) based on the T’th maturity with: \\[ r(t, \\theta) = - \\frac{\\Delta log(P(T_{i}))}{\\Delta T_{i}} = - \\frac{log(P(T_{i})) - log(P(T_{i-1}))}{T_i - T_{i-1}} \\] whereas the \\(\\Delta\\) equals the difference in one maturity-based price vs. the previous maturity-based price (i - (i-1)). Also, P is considered as price relative to its par value. Therein, the difference of the previous and this price can take any functional form (in the simplest case, this would just be a linear model (e.g. 0.01 + 0.5t). In this case, the difference between maturity 1 and 2 would be (0.01+0.5*2) - (0.01 + 0.5) = \\(\\delta f/\\delta t\\) = 0.5. 5.4.3.1.2 Yields and Forward Rates Based on this, the yield is the time average of each sub-maturity forward rate from 0 to T of a zero bond, since we defined a continuously compounding yield as a piece-wise combination of mini ZCB. To account for the continuity, we use an integral (defined as cumulative sum) to compute the average: \\[ y_T(\\theta) = \\frac{1}{T} \\int_0^T r(t, \\theta) dt \\] therein, the numerator is the cumulative sum of the forward rates at each sub-maturity (whereas rdt is a fractionally small change in maturity), and the denominator is the number of maturity years. 5.4.3.1.3 Prices and Forward Rates Based on this, let’s define again the price of a ZCB. When using continuous compounding we get that it is: \\[ P_T(\\theta) = N_T e^{-y_T T} = N_T e^{\\int_0^T r(t, \\theta) dt} \\] note that we simply replaced the \\(y_T\\) part. 5.4.3.1.4 Redefining the Price and Yield condition of a ZCB If we now consider both the discrete and continuous compounding of ZCB, we can set them equal and obtain the relation between the discrete and continuous yield. \\[ \\begin{align} \\frac{N_T}{(1+y^d(T))^{T}} &amp;= N_T e^{-y_T T} \\\\ e^{y_T T} &amp;= (1+y^d(T))^{T} \\\\ y_T &amp;= \\log(1+y^d(T)) \\end{align} \\] Let’s quickly consider a concrete example to facilitate the theory discussed. # Define both maturities and prices of the bonds maturity &lt;- c(1, 5, 10, 15, 20, 25, 30) # in years price &lt;- c(101, 97, 95, 91, 92, 93, 99) # in percentage of face value maturity &lt;- c(1, 5, 10, 20, 30) # in years price &lt;- c(99, 98, 96, 93, 89) # Calculate the fwd rates fwd_init&lt;- -log(price[1]/100) fwd &lt;- -diff(log(price/100))/diff(maturity) # Calculate the yield yield &lt;- c(fwd_init, fwd_init + cumsum(fwd*diff(maturity))) # Now, we create the prices by: prices &lt;- 100*exp(-yield) prices ## [1] 99 98 96 93 89 As we can see, the calculations all add up to obtain the exact same prices again. Especially, we figured that the yields are solely the accumulation of forward rates based on each additional sub-maturity. the initial forward rate is simply the par weighted logarithm of the first period. we then calculate the yields as cumulative sums by multiplying each forward rate with the maturity interval. Finally, we recover each bond price by inverting the process of creating forwards from prices. As such, we were able to show how Yields, Prices and Forward Rates are interlinked with each other. 5.4.3.2 Structure of the forward rate We now considered how the forward rate depends both on the yield as well as the prices. However, when considering the forward rate, we implicitly assumed a parametric structure by observing both the prices and the maturities of the bond. Based on this, we were able to depict a parametric model which was then defined as differenced logarithmic term, without needing to write a function which generalizes the structural parameters well. However, in reality, we usually need to estimate the forward rate curve. This is where the parameter \\(\\theta\\) comes into play. In essence, the forward rate is composed of a polynomial term model which identifies long-term trends and short-term volatility structures. As such, we assume the following form: \\[ r(t, \\theta) = \\theta_0 + \\theta_1 t + \\theta_2 t^2 + ... + \\theta_p t^p \\] whereas t is the maturity (or sub-maturity). We use calculus to integrate this formula to obtain the yields. This is a simple arithmetic operation yielding: \\[ \\int_0^T r(t, \\theta) dt = \\theta_0 T + \\theta_1 \\frac{T^2}{2} + \\theta_2 \\frac{T^3}{3} + ... + \\theta_p \\frac{T^{p+1}}{p+1} \\] We then can estimate the yield curve (and then the zero-coupon bond price) using the integrated forward rates divided by the maturity T to get the yield as: \\[ y_T(\\theta) = \\theta_0 + \\theta_1 \\frac{T}{2} + \\theta_2 \\frac{T^2}{3} + ... + \\theta_p \\frac{T^{p}}{p+1} \\] 5.4.4 Estimating the Term Structure - Parametric and Non-Parametric Models As we have now seen, the primary target of term structure estimation approaches is to quantify the spot rate (yield curve), forward rate or discount curve from a set of coupon bonds with different maturities. As direct methods to do so, such as bootstrapping, would severely overfit the given data, leading to imprecise generalisations and unsmooth curves. Consequently, indirect functions have been proposed, in both parametric as well as non-parametric form. These are usually used to estimate the curves of interest. To do so, we define bond prices as idiosyncratic error and structural terms: \\[ \\hat{p} = \\iota^T(C\\cdot D) \\] Which is the matrix consisting of appropriately discounted cash flows stemming from coupon and prinicpal payments. Thus, the market prices of set of coupon bonds p can be expressed as the sum of the theoretical bond prices \\(\\hat{p}\\) plus an idiosyncratic error vector: \\[ p = \\hat{p} + \\epsilon \\] whereas this is a non-linear, non-convex function. The estimated parameter vector \\(\\hat{\\beta}\\) is then obtained by a possible weighted nonconvex optimization procedure. We will now introduce different parametric and non-parametric options to estimate the term structure of interest rates. 5.4.4.1 Parametric approach: Nelson/Siegel and Svensson Methods Nelson and Siegel (1987) propose a parsimonious function for modelling the forward rate as a solution to a second-order differential equation for the case of equal roots: \\[ r(t, \\theta) = \\theta_0 + \\theta_1 \\exp(-\\frac{t}{\\tau_1}) + \\theta_2\\left[\\frac{t}{\\tau_1}\\exp(-\\frac{t}{\\tau_1})\\right] \\] Based on this, we obtain the yield curve again as the average of the forward rates: \\[ y_T(\\theta) = \\frac{1}{T}\\int_0^Tr(t, \\theta)dt = \\theta_0 + \\theta_1 \\frac{1-\\exp(-\\frac{t}{\\tau_1})}{\\frac{t}{\\tau_1}} + \\theta_2\\left[\\frac{1-\\exp(-\\frac{t}{\\tau_1})}{\\frac{t}{\\tau_1}}-\\exp(-\\frac{t}{\\tau_1})\\right] \\] As such, we define a parametric form for both the forward rates as well as the relation to the yield curves. Based on this, we can theoretically create many possible shapes, including monotonic, humped, U-shapes or S-shapes. Consequently, Svensson (1994) adds the term: \\[ \\beta_3\\left[\\frac{1-\\exp(-\\frac{t}{\\tau_2})}{\\frac{t}{\\tau_2}}-\\exp(-\\frac{t}{\\tau_2})\\right] \\] to increase the flexibility. Lastly, in order to account for potential multicollinearity issues once we introduce both \\(\\tau_1\\) and \\(\\tau_2\\), de Pooter (2007) proposes to adjust the last term in the second order equation by doubling the numerator. This is also known as Adjusted Svenson approach. 5.4.4.2 Non-Parametric approach: Piecewise Regression Settings and Splines We now have encountered that the form of the forward rates and the consecutive yield curve is usually not pre-determinated. As such, we need to estimate the forward rate curve. However, given the \\(\\theta\\) of our model, we may not directly understand which form the function will have. This is where non-parametric modeling comes into play. Remember, the common models consisting of the predictor variables discussed are useful if we have a parametric form. However, once we encounter a relationship whose underlying functional form cannot be pre-determined, we encounter a model which is given as: \\[ m_t + s_t = f(x) + \\epsilon_t \\] whereas f(x) is unknown in advance and cannot explicitly be deduced by primary data analysis. Regression settings which adhere to such forms are called specifications of non-linear regressions. There are generally two ways to circumvent this issue. 5.4.4.2.1 Piecewise Regressions Secondly, we can split up the time-series into pieces which follow a parametric form. In essence, we introduce cut-off points in which the slope of f can change. Doing so, we transform a non-linear model into multiple linear sub-models. In the case of one cut-off point, we define models in which we state that \\(x_{1,t} = x\\) and \\[ x_{2,t} = (x-c)_+ = \\begin{cases} 0 &amp;&amp; \\text{if } x &lt; c \\\\ x-c &amp;&amp; \\text{if } x \\geq c \\end{cases} \\] This forces the slope to bend at point C. We can certainly also expand this to include multiple cut-off points in the data. 5.4.4.2.2 Splines One way to circumvent this issue is by using Splines. They are handy for using flexible shaped relationships in the data. The main argument in favour of splines is that they can estimate any smooth non-linear shaped relationship without previously specifying the shape of the model in advance. The shape of the trend is estimated automatically from the data. In essence, splines are piece-wise polynomial functions, since the spline form combines different polynomials at different intervals. Splines provide a way to smoothly interpolate between fixed points, called knots. Polynomial regression is computed between knots. In other words, splines are series of polynomial segments strung together, joining at knots. Now, remember that we defined the forward rates as combination of piece-wise functions based on their sub-maturities. In that case, we can presume that the polynomials are pieces of the term structure of interest rates, whereas each discrete sub-part depends on both the maturity and its price (as we have seen in the previous example). Whole sections can be marked off by a knot (q) at a location in the term structure paired data. A distinct polynomial function is estimated for each range and domain of data between each knot. This is considered as the spline, because it adds polynomials at each piece of the function distinctively. The model specification of any spline is: \\[ f(x) = \\beta_0 + \\sum_{i=1}^q \\beta_iB_i(t) \\] Here, the \\(B_i(t)\\) are called B-spline basis functions, which, in general, are linear combinations of a specific known variable of the model. In the case of trend or seasonality modeling (or, in general, time-series modelling), they are naturally functions of time. In order to use B-Splines, you need only to define the number q, which is the number of basis functions to use w.r.t. the known variable of interest (or, equivalently, the number of knots, or discrete sections, of the curve). The higher q, the more flexible, or less smooth, the trend becomes. You can easily see that a spline can be extended to potentially limitless polynomial degrees. However, usually, people use the third order polynomial to draw splines (= cubic forms). This is also known as Natural Cubic Splines. Using splines bears two important considerations. The first is related to the number and locations of the knots. In general, there are two approaches. First, since the regression spline has the most variation at intervals that contain a substantial amount of knots, an idea is to: place many knots at intervals we deem as variable, and fewer at intervals which we deem stable The most common way, however, is to specify the desired degrees of freedom, and then have the software automatically place the corresponding number of knots at uniform quantiles of the data. Secondly, we should ask how many degrees of freedom we should choose. This is mostly done through cross-validation in which we obtain different distributions of a test and training dataset and compute overall error scores for different model configurations (e.g. different DOF). Based on the comparison, we then choose the model configuration with the lowest error. 5.4.4.3 Applying the term structure estimation in R: The Termstrc package In order to show you how one could approach a term structure valuation approach, we will follow the method used by Hayden and Ferstl (2007) who provide a handy package called termstrc which is accessible with the code below. In essence, this package includes the most common term structure estimation strategies, such as the parametric Nelson and Siegel approach and the Svensson approach, as well as the non-parametric design approach, where individually estimated zero-coupon yield curves are substracted from a risk-free reference curve. First, install the package using the following commands below: # For mac users (at least I don&#39;t know if Windows users experience the same pain), there is an important workaround for installing the package. CRAN removed it so you need to install it remotely from an URL source. However, doing so requires you to also use the rgl package, which is not working if OpenGL is depreciated (which it certainly is for any MacBook purchased / with updated software after 2019). So, in order to find a non-depreciated form of OpenGL, you: # first download the XQuartz application online (https://www.xquartz.org/). It will automatically re-start your computer, so don&#39;t worry about this. # then create a new R session. # then fully re-install all your packages (which we did above by changing the second command in the apply function from &quot;require&quot; to &quot;install packages&quot;) # then use the require command again to set the library status for all the packages # then run the commands below: install.packages(&quot;rgl&quot;) ## Error in install.packages : Updating loaded packages library(rgl) remotes::install_url(&quot;https://cran.rstudio.com/src/contrib/Archive/termstrc/termstrc_1.3.7.tar.gz&quot;) ## Downloading package from url: https://cran.rstudio.com/src/contrib/Archive/termstrc/termstrc_1.3.7.tar.gz ## These packages have more recent versions available. ## It is recommended to update all of them. ## Which would you like to update? ## ## 1: All ## 2: CRAN packages only ## 3: None ## 4: glue (1.6.1 -&gt; 1.6.2) [CRAN] ## 5: yaml (2.2.2 -&gt; 2.3.5) [CRAN] ## 6: evaluate (0.14 -&gt; 0.15 ) [CRAN] ## 7: rlang (1.0.0 -&gt; 1.0.1) [CRAN] ## 8: jsonlite (1.7.3 -&gt; 1.8.0) [CRAN] ## ## checking for file ‘/private/var/folders/97/v7mhh7_10r54n7qdx4ykd6wc0000gn/T/RtmpSFmz9w/remotes590a1e7639a2/termstrc/DESCRIPTION’ ... ✓ checking for file ‘/private/var/folders/97/v7mhh7_10r54n7qdx4ykd6wc0000gn/T/RtmpSFmz9w/remotes590a1e7639a2/termstrc/DESCRIPTION’ (350ms) ## ─ preparing ‘termstrc’: ## checking DESCRIPTION meta-information ... ✓ checking DESCRIPTION meta-information ## ─ cleaning src ## ─ checking for LF line-endings in source and make files and shell scripts ## ─ checking for empty or unneeded directories ## ─ looking to see if a ‘data/datalist’ file should be added ## ─ building ‘termstrc_1.3.7.tar.gz’ ## ## library(termstrc) # Based on this, you should be able to download the termstrc package The authors work with three distinct datasets on bond returns to evaluate their functions. In order to use the package, you need to set up an identical structure to the datasets provided. The authors therein offer a code snippet to show you how to manipulate your data such that you retain the identical structure. This is done here. We will show you how to create the datasets (we will use the datasets here that the authors provide) by taking each step. # This is the data the authors provide data(govbonds) # In this dataset, we have information on threee countries (D,A,F) and their respective government bonds. Especially, we have data on: ## ISIN ## Maturity Date ## Issue Date ## Coupon Rate ## Price ## Accrued Price ## CF ISIN ## CF value ## CF Date # In order to create the correct dataframe, thus, we need these 9 variables. Once we have them, we can create vectors accordingly: ## First, we need to create usual vectors which combine the data for the respective variable ISIN_countries &lt;- c(govbonds[[&quot;GERMANY&quot;]]$ISIN[1:length(govbonds[[&quot;GERMANY&quot;]]$ISIN)], govbonds[[&quot;AUSTRIA&quot;]]$ISIN[1:length(govbonds[[&quot;AUSTRIA&quot;]]$ISIN)], govbonds[[&quot;FRANCE&quot;]]$ISIN[1:length(govbonds[[&quot;FRANCE&quot;]]$ISIN)]) MATURITYDATE_countries &lt;- c(govbonds[[&quot;GERMANY&quot;]]$MATURITYDATE[1:length(govbonds[[&quot;GERMANY&quot;]]$MATURITYDATE)], govbonds[[&quot;AUSTRIA&quot;]]$MATURITYDATE[1:length(govbonds[[&quot;AUSTRIA&quot;]]$MATURITYDATE)], govbonds[[&quot;FRANCE&quot;]]$MATURITYDATE[1:length(govbonds[[&quot;FRANCE&quot;]]$MATURITYDATE)]) ISSUEDATE_countries &lt;- c(govbonds[[&quot;GERMANY&quot;]]$ISSUEDATE[1:length(govbonds[[&quot;GERMANY&quot;]]$ISSUEDATE)], govbonds[[&quot;AUSTRIA&quot;]]$ISSUEDATE[1:length(govbonds[[&quot;AUSTRIA&quot;]]$ISSUEDATE)], govbonds[[&quot;FRANCE&quot;]]$ISSUEDATE[1:length(govbonds[[&quot;FRANCE&quot;]]$ISSUEDATE)]) COUPONRATE_countries &lt;- c(govbonds[[&quot;GERMANY&quot;]]$COUPONRATE[1:length(govbonds[[&quot;GERMANY&quot;]]$COUPONRATE)], govbonds[[&quot;AUSTRIA&quot;]]$COUPONRATE[1:length(govbonds[[&quot;AUSTRIA&quot;]]$COUPONRATE)], govbonds[[&quot;FRANCE&quot;]]$COUPONRATE[1:length(govbonds[[&quot;FRANCE&quot;]]$COUPONRATE)]) PRICE_countries &lt;- c(govbonds[[&quot;GERMANY&quot;]]$PRICE[1:length(govbonds[[&quot;GERMANY&quot;]]$PRICE)], govbonds[[&quot;AUSTRIA&quot;]]$PRICE[1:length(govbonds[[&quot;AUSTRIA&quot;]]$PRICE)], govbonds[[&quot;FRANCE&quot;]]$PRICE[1:length(govbonds[[&quot;FRANCE&quot;]]$PRICE)]) ACCRUED_countries &lt;- c(govbonds[[&quot;GERMANY&quot;]]$ACCRUED[1:length(govbonds[[&quot;GERMANY&quot;]]$ACCRUED)], govbonds[[&quot;AUSTRIA&quot;]]$ACCRUED[1:length(govbonds[[&quot;AUSTRIA&quot;]]$ACCRUED)], govbonds[[&quot;FRANCE&quot;]]$ACCRUED[1:length(govbonds[[&quot;FRANCE&quot;]]$ACCRUED)]) CFISIN_countries &lt;- c(govbonds[[&quot;GERMANY&quot;]]$CASHFLOWS$ISIN[1:length(govbonds[[&quot;GERMANY&quot;]]$CASHFLOWS$ISIN)], govbonds[[&quot;AUSTRIA&quot;]]$CASHFLOWS$ISIN[1:length(govbonds[[&quot;AUSTRIA&quot;]]$CASHFLOWS$ISIN)], govbonds[[&quot;FRANCE&quot;]]$CASHFLOWS$ISIN[1:length(govbonds[[&quot;FRANCE&quot;]]$CASHFLOWS$ISIN)]) CF_countries &lt;- c(govbonds[[&quot;GERMANY&quot;]]$CASHFLOWS$CF[1:length(govbonds[[&quot;GERMANY&quot;]]$CASHFLOWS$CF)], govbonds[[&quot;AUSTRIA&quot;]]$CASHFLOWS$CF[1:length(govbonds[[&quot;AUSTRIA&quot;]]$CASHFLOWS$CF)], govbonds[[&quot;FRANCE&quot;]]$CASHFLOWS$CF[1:length(govbonds[[&quot;FRANCE&quot;]]$CASHFLOWS$CF)]) DATE_countries &lt;- c(govbonds[[&quot;GERMANY&quot;]]$CASHFLOWS$DATE[1:length(govbonds[[&quot;GERMANY&quot;]]$CASHFLOWS$DATE)], govbonds[[&quot;AUSTRIA&quot;]]$CASHFLOWS$DATE[1:length(govbonds[[&quot;AUSTRIA&quot;]]$CASHFLOWS$DATE)], govbonds[[&quot;FRANCE&quot;]]$CASHFLOWS$DATE[1:length(govbonds[[&quot;FRANCE&quot;]]$CASHFLOWS$DATE)]) ## Based on this, we can now create the entire structural dataset ISIN &lt;- as.vector(ISIN_countries, mode = &quot;character&quot;) MATURITYDATE &lt;- structure(as.vector(MATURITYDATE_countries, mode = &quot;any&quot;), class=&quot;Date&quot;) ISSUEDATE &lt;- structure(as.vector(ISSUEDATE_countries, mode = &quot;any&quot;), class=&quot;Date&quot;) COUPONRATE &lt;- as.vector(COUPONRATE_countries, mode = &quot;numeric&quot;) PRICE &lt;- as.vector(PRICE_countries, mode = &quot;numeric&quot;) ACCRUED &lt;- as.vector(ACCRUED_countries, mode = &quot;numeric&quot;) CFISIN &lt;- as.vector(CFISIN_countries, mode = &quot;character&quot;) CF &lt;- as.vector(CF_countries, mode = &quot;numeric&quot;) DATE &lt;- structure(as.vector(DATE_countries, mode = &quot;any&quot;), class=&quot;Date&quot;) ## Here, the numbers are just the observations per country CASHFLOWS_D &lt;- list(CFISIN[1:384],CF[1:384],DATE[1:384]) names(CASHFLOWS_D) &lt;- c(&quot;ISIN&quot;,&quot;CF&quot;,&quot;DATE&quot;) CASHFLOWS_A &lt;- list(CFISIN[385:541],CF[385:541],DATE[385:541]) names(CASHFLOWS_A) &lt;- c(&quot;ISIN&quot;,&quot;CF&quot;,&quot;DATE&quot;) CASHFLOWS_F &lt;- list(CFISIN[542:942],CF[542:942],DATE[542:942]) names(CASHFLOWS_F) &lt;- c(&quot;ISIN&quot;,&quot;CF&quot;,&quot;DATE&quot;) ## Lastly, define the actual date of your starting observations TODAY &lt;- as.Date(c(&quot;2008-01-30&quot;)) ## Then, you can create a list with all the required data (also here look that the data is appropriately distributed) GERMANY &lt;- list(ISIN[1:52],MATURITYDATE[1:52],ISSUEDATE[1:52], COUPONRATE[1:52],PRICE[1:52],ACCRUED[1:52],CASHFLOWS_D,TODAY) AUSTRIA &lt;- list(ISIN[53:68],MATURITYDATE[53:68],ISSUEDATE[53:68], COUPONRATE[53:68],PRICE[53:68],ACCRUED[53:68],CASHFLOWS_A,TODAY) FRANCE &lt;- list(ISIN[69:114],MATURITYDATE[69:114],ISSUEDATE[69:114], COUPONRATE[69:114],PRICE[69:114],ACCRUED[69:114],CASHFLOWS_F,TODAY) ## Tale the names names(GERMANY) &lt;- c(&quot;ISIN&quot;,&quot;MATURITYDATE&quot;,&quot;ISSUEDATE&quot;,&quot;COUPONRATE&quot;, &quot;PRICE&quot;,&quot;ACCRUED&quot;,&quot;CASHFLOWS&quot;,&quot;TODAY&quot;) names(AUSTRIA) &lt;- c(&quot;ISIN&quot;,&quot;MATURITYDATE&quot;,&quot;ISSUEDATE&quot;,&quot;COUPONRATE&quot;, &quot;PRICE&quot;,&quot;ACCRUED&quot;,&quot;CASHFLOWS&quot;,&quot;TODAY&quot;) names(FRANCE) &lt;- c(&quot;ISIN&quot;,&quot;MATURITYDATE&quot;,&quot;ISSUEDATE&quot;,&quot;COUPONRATE&quot;, &quot;PRICE&quot;,&quot;ACCRUED&quot;,&quot;CASHFLOWS&quot;,&quot;TODAY&quot;) ## merge the lists and create names and classes mybonds &lt;- list(GERMANY,AUSTRIA, FRANCE) names(mybonds) &lt;- c(&quot;GERMANY&quot;,&quot;AUSTRIA&quot;, &quot;FRANCE&quot;) class(mybonds) &lt;- &quot;couponbonds&quot; str(mybonds) ## List of 3 ## $ GERMANY:List of 8 ## ..$ ISIN : chr [1:52] &quot;DE0001141414&quot; &quot;DE0001137131&quot; &quot;DE0001141422&quot; &quot;DE0001137149&quot; ... ## ..$ MATURITYDATE: Date[1:52], format: &quot;2008-02-15&quot; &quot;2008-03-14&quot; &quot;2008-04-11&quot; &quot;2008-06-13&quot; ... ## ..$ ISSUEDATE : Date[1:52], format: &quot;2002-08-14&quot; &quot;2006-03-08&quot; &quot;2003-04-11&quot; &quot;2006-05-30&quot; ... ## ..$ COUPONRATE : num [1:52] 0.0425 0.03 0.03 0.0325 0.0413 ... ## ..$ PRICE : num [1:52] 100 99.9 99.8 99.8 100.1 ... ## ..$ ACCRUED : num [1:52] 4.09 2.66 2.43 2.07 2.39 ... ## ..$ CASHFLOWS :List of 3 ## .. ..$ ISIN: chr [1:384] &quot;DE0001141414&quot; &quot;DE0001137131&quot; &quot;DE0001141422&quot; &quot;DE0001137149&quot; ... ## .. ..$ CF : num [1:384] 104 103 103 103 104 ... ## .. ..$ DATE: Date[1:384], format: &quot;2008-02-15&quot; &quot;2008-03-14&quot; &quot;2008-04-11&quot; &quot;2008-06-13&quot; ... ## ..$ TODAY : Date[1:1], format: &quot;2008-01-30&quot; ## $ AUSTRIA:List of 8 ## ..$ ISIN : chr [1:16] &quot;AT0000384821&quot; &quot;AT0000384938&quot; &quot;AT0000385067&quot; &quot;AT0000385356&quot; ... ## ..$ MATURITYDATE: Date[1:16], format: &quot;2009-07-15&quot; &quot;2010-01-15&quot; &quot;2011-01-04&quot; &quot;2012-07-15&quot; ... ## ..$ ISSUEDATE : Date[1:16], format: &quot;1999-02-22&quot; &quot;1999-10-22&quot; &quot;2001-01-04&quot; &quot;2002-01-09&quot; ... ## ..$ COUPONRATE : num [1:16] 0.04 0.055 0.0525 0.05 0.038 ... ## ..$ PRICE : num [1:16] 100.5 103.6 104.4 105 99.8 ... ## ..$ ACCRUED : num [1:16] 2.229 0.3 0.445 2.787 1.111 ... ## ..$ CASHFLOWS :List of 3 ## .. ..$ ISIN: chr [1:157] &quot;AT0000384821&quot; &quot;AT0000384821&quot; &quot;AT0000384938&quot; &quot;AT0000384938&quot; ... ## .. ..$ CF : num [1:157] 4 104 5.5 105.5 5.25 ... ## .. ..$ DATE: Date[1:157], format: &quot;2008-07-15&quot; &quot;2009-07-15&quot; &quot;2009-01-15&quot; &quot;2010-01-15&quot; ... ## ..$ TODAY : Date[1:1], format: &quot;2008-01-30&quot; ## $ FRANCE :List of 8 ## ..$ ISIN : chr [1:46] &quot;FR0108197569&quot; &quot;FR0000570632&quot; &quot;FR0105760112&quot; &quot;FR0109136137&quot; ... ## ..$ MATURITYDATE: Date[1:46], format: &quot;2008-03-12&quot; &quot;2008-04-25&quot; &quot;2008-07-12&quot; &quot;2008-09-12&quot; ... ## ..$ ISSUEDATE : Date[1:46], format: &quot;2005-11-08&quot; &quot;1998-01-08&quot; &quot;2003-06-23&quot; &quot;2006-07-19&quot; ... ## ..$ COUPONRATE : num [1:46] 0.0275 0.0525 0.03 0.035 0.085 0.035 0.04 0.035 0.04 0.04 ... ## ..$ PRICE : num [1:46] 99.9 100.2 99.6 99.8 103.2 ... ## ..$ ACCRUED : num [1:46] 2.44 4.09 1.66 1.35 2.37 ... ## ..$ CASHFLOWS :List of 3 ## .. ..$ ISIN: chr [1:401] &quot;FR0108197569&quot; &quot;FR0000570632&quot; &quot;FR0105760112&quot; &quot;FR0109136137&quot; ... ## .. ..$ CF : num [1:401] 103 105 103 104 108 ... ## .. ..$ DATE: Date[1:401], format: &quot;2008-03-12&quot; &quot;2008-04-25&quot; &quot;2008-07-12&quot; &quot;2008-09-12&quot; ... ## ..$ TODAY : Date[1:1], format: &quot;2008-01-30&quot; ## - attr(*, &quot;class&quot;)= chr &quot;couponbonds&quot; Let’s compare this with the structure of the pre-defined dataset the authors provide. As we can see, these are identical. As such, we now know how to construct data sets such that we can use the functions of the package. str(govbonds) ## List of 3 ## $ GERMANY:List of 8 ## ..$ ISIN : chr [1:52] &quot;DE0001141414&quot; &quot;DE0001137131&quot; &quot;DE0001141422&quot; &quot;DE0001137149&quot; ... ## ..$ MATURITYDATE: Date[1:52], format: &quot;2008-02-15&quot; &quot;2008-03-14&quot; &quot;2008-04-11&quot; &quot;2008-06-13&quot; ... ## ..$ ISSUEDATE : Date[1:52], format: &quot;2002-08-14&quot; &quot;2006-03-08&quot; &quot;2003-04-11&quot; &quot;2006-05-30&quot; ... ## ..$ COUPONRATE : num [1:52] 0.0425 0.03 0.03 0.0325 0.0413 ... ## ..$ PRICE : num [1:52] 100 99.9 99.8 99.8 100.1 ... ## ..$ ACCRUED : num [1:52] 4.09 2.66 2.43 2.07 2.39 ... ## ..$ CASHFLOWS :List of 3 ## .. ..$ ISIN: chr [1:384] &quot;DE0001141414&quot; &quot;DE0001137131&quot; &quot;DE0001141422&quot; &quot;DE0001137149&quot; ... ## .. ..$ CF : num [1:384] 104 103 103 103 104 ... ## .. ..$ DATE: Date[1:384], format: &quot;2008-02-15&quot; &quot;2008-03-14&quot; &quot;2008-04-11&quot; &quot;2008-06-13&quot; ... ## ..$ TODAY : Date[1:1], format: &quot;2008-01-30&quot; ## $ AUSTRIA:List of 8 ## ..$ ISIN : chr [1:16] &quot;AT0000384821&quot; &quot;AT0000384938&quot; &quot;AT0000385067&quot; &quot;AT0000385356&quot; ... ## ..$ MATURITYDATE: Date[1:16], format: &quot;2009-07-15&quot; &quot;2010-01-15&quot; &quot;2011-01-04&quot; &quot;2012-07-15&quot; ... ## ..$ ISSUEDATE : Date[1:16], format: &quot;1999-02-22&quot; &quot;1999-10-22&quot; &quot;2001-01-04&quot; &quot;2002-01-09&quot; ... ## ..$ COUPONRATE : num [1:16] 0.04 0.055 0.0525 0.05 0.038 ... ## ..$ PRICE : num [1:16] 100.5 103.6 104.4 105 99.8 ... ## ..$ ACCRUED : num [1:16] 2.229 0.3 0.445 2.787 1.111 ... ## ..$ CASHFLOWS :List of 3 ## .. ..$ ISIN: chr [1:157] &quot;AT0000384821&quot; &quot;AT0000384821&quot; &quot;AT0000384938&quot; &quot;AT0000384938&quot; ... ## .. ..$ CF : num [1:157] 4 104 5.5 105.5 5.25 ... ## .. ..$ DATE: Date[1:157], format: &quot;2008-07-15&quot; &quot;2009-07-15&quot; &quot;2009-01-15&quot; &quot;2010-01-15&quot; ... ## ..$ TODAY : Date[1:1], format: &quot;2008-01-30&quot; ## $ FRANCE :List of 8 ## ..$ ISIN : chr [1:45] &quot;FR0108197569&quot; &quot;FR0000570632&quot; &quot;FR0105760112&quot; &quot;FR0109136137&quot; ... ## ..$ MATURITYDATE: Date[1:45], format: &quot;2008-03-12&quot; &quot;2008-04-25&quot; &quot;2008-07-12&quot; &quot;2008-09-12&quot; ... ## ..$ ISSUEDATE : Date[1:45], format: &quot;2005-11-08&quot; &quot;1998-01-08&quot; &quot;2003-06-23&quot; &quot;2006-07-19&quot; ... ## ..$ COUPONRATE : num [1:45] 0.0275 0.0525 0.03 0.035 0.085 0.035 0.04 0.035 0.04 0.04 ... ## ..$ PRICE : num [1:45] 99.9 100.2 99.6 99.8 103.2 ... ## ..$ ACCRUED : num [1:45] 2.44 4.09 1.66 1.35 2.37 ... ## ..$ CASHFLOWS :List of 3 ## .. ..$ ISIN: chr [1:401] &quot;FR0108197569&quot; &quot;FR0000570632&quot; &quot;FR0105760112&quot; &quot;FR0109136137&quot; ... ## .. ..$ CF : num [1:401] 103 105 103 104 108 ... ## .. ..$ DATE: Date[1:401], format: &quot;2008-03-12&quot; &quot;2008-04-25&quot; &quot;2008-07-12&quot; &quot;2008-09-12&quot; ... ## ..$ TODAY : Date[1:1], format: &quot;2008-01-30&quot; ## - attr(*, &quot;class&quot;)= chr &quot;couponbonds&quot; 5.4.4.3.1 Parametric approach Lets suppose we want to estimate the zero-coupon yield curve for the three included countries with the Nelson and Siegel (1987) method minimizing the duration weighted pricing errors. The sample of bonds is restricted to a maximum maturity of 30 years (as the authors project). Consequently, we can run the following command: # Obtain the Svenson and Nielsen / Siegel approaches x_sv &lt;- estim_nss(govbonds, &#39;GERMANY&#39;, method = &quot;sv&quot;, matrange = c(0, 30)) ## [1] &quot;The following constraints are used for the tau parameters:&quot; ## $GERMANY ## tau_min tau_max gridstepsize tau_distance ## 0.04383562 28.95068493 0.20000000 0.50000000 ## ## [1] &quot;Searching startparameters for GERMANY&quot; ## beta0 beta1 beta2 tau1 beta3 tau2 ## 0.0006482007 3.7569300955 -0.1380459067 2.8439356164 14.0891509207 15.2439356164 x_nss &lt;- estim_nss(govbonds, &#39;GERMANY&#39;, method = &quot;ns&quot;, matrange = c(0, 30)) ## [1] &quot;The following constraints are used for the tau parameters:&quot; ## $GERMANY ## tau_min tau_max gridstepsize ## 0.04383562 28.95068493 0.20000000 ## ## [1] &quot;Searching startparameters for GERMANY&quot; ## beta0 beta1 beta2 tau1 ## 5.120486 -1.245501 -3.243823 2.643936 In order to do so, we need to define optimal starting parameters (so-called search parameters). These are automatically calculated by the function. They work by minimising a convex objective function. Based on this approach, we can now plot the estimated yield curve for each approach: x &lt;- estim_cs(govbonds, &#39;GERMANY&#39;) # Now, we can also plot the relationship ## First, the actual observations actual_FI &lt;- as.data.frame(x_nss$y$GERMANY) colnames(actual_FI) &lt;- c(&quot;Maturity&quot;, &quot;Yield_Actual&quot;) ## Now the estimated ones est_FI &lt;-as.data.frame(x_nss$yhat$GERMANY) colnames(est_FI) &lt;- c(&quot;Maturity&quot;, &quot;Yield_Estimated&quot;) ## Bind them together est_act_FI &lt;- left_join(actual_FI, est_FI, by = c(&quot;Maturity&quot; = &quot;Maturity&quot;)) # Define the confidence interval surrounding the estimated yields est_act_FI_final &lt;- est_act_FI %&gt;% mutate( Yield_Estimated = 100*Yield_Estimated, Yield_Actual = 100*Yield_Actual, std_yield = sd(Yield_Estimated), n_obs = length(Yield_Estimated), error = qnorm(0.975)*std_yield/sqrt(n_obs), CI_up = Yield_Estimated + error, CI_down = Yield_Estimated - error) %&gt;% select(Maturity, Yield_Estimated, Yield_Actual, CI_up, CI_down) est_act_FI_final %&gt;% ggplot(aes(x = Maturity, y = Yield_Actual)) + geom_point(color = &quot;goldenrod&quot;, shape = 1) + geom_line(aes(x = est_act_FI_final$Maturity, y = est_act_FI_final$Yield_Estimated)) + geom_ribbon(aes(ymax = est_act_FI_final$CI_up, ymin = est_act_FI_final$CI_down), linetype = 2, alpha = 0.1) + geom_vline(xintercept = x$knotpoints[[1]], linetype = &quot;dashed&quot;, color = &quot;lightgrey&quot;) + ylim(2, 5.5) + ggtitle(&quot;Yield Curve Estimation w/ Nelson &amp; Siegel for German Government Bonds&quot;) + ylab(&quot;Zero-Coupon Yields in %&quot;) + xlab(&quot;Maturity in Years&quot;) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) ## Warning: Use of `est_act_FI_final$Maturity` is discouraged. Use `Maturity` instead. ## Warning: Use of `est_act_FI_final$Yield_Estimated` is discouraged. Use `Yield_Estimated` instead. ## Warning: Use of `est_act_FI_final$CI_up` is discouraged. Use `CI_up` instead. ## Warning: Use of `est_act_FI_final$CI_down` is discouraged. Use `CI_down` instead. # Now, we can also plot the relationship ## First, the actual observations actual_FI &lt;- as.data.frame(x_sv$y$GERMANY) colnames(actual_FI) &lt;- c(&quot;Maturity&quot;, &quot;Yield_Actual&quot;) ## Now the estimated ones est_FI &lt;-as.data.frame(x_sv$yhat$GERMANY) colnames(est_FI) &lt;- c(&quot;Maturity&quot;, &quot;Yield_Estimated&quot;) ## Bind them together est_act_FI &lt;- left_join(actual_FI, est_FI, by = c(&quot;Maturity&quot; = &quot;Maturity&quot;)) # Define the confidence interval surrounding the estimated yields est_act_FI_final &lt;- est_act_FI %&gt;% mutate( Yield_Estimated = 100*Yield_Estimated, Yield_Actual = 100*Yield_Actual, std_yield = sd(Yield_Estimated), n_obs = length(Yield_Estimated), error = qnorm(0.975)*std_yield/sqrt(n_obs), CI_up = Yield_Estimated + error, CI_down = Yield_Estimated - error) %&gt;% select(Maturity, Yield_Estimated, Yield_Actual, CI_up, CI_down) est_act_FI_final %&gt;% ggplot(aes(x = Maturity, y = Yield_Actual)) + geom_point(color = &quot;goldenrod&quot;, shape = 1) + geom_line(aes(x = est_act_FI_final$Maturity, y = est_act_FI_final$Yield_Estimated)) + geom_ribbon(aes(ymax = est_act_FI_final$CI_up, ymin = est_act_FI_final$CI_down), linetype = 2, alpha = 0.1) + geom_vline(xintercept = x$knotpoints[[1]], linetype = &quot;dashed&quot;, color = &quot;lightgrey&quot;) + ylim(2, 5.5) + ggtitle(&quot;Yield Curve Estimation w/ Svenson Family for German Government Bonds&quot;) + ylab(&quot;Zero-Coupon Yields in %&quot;) + xlab(&quot;Maturity in Years&quot;) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) ## Warning: Use of `est_act_FI_final$Maturity` is discouraged. Use `Maturity` instead. ## Warning: Use of `est_act_FI_final$Yield_Estimated` is discouraged. Use `Yield_Estimated` instead. ## Warning: Use of `est_act_FI_final$CI_up` is discouraged. Use `CI_up` instead. ## Warning: Use of `est_act_FI_final$CI_down` is discouraged. Use `CI_down` instead. It appears as if we were quite successful in estimating the yield curve with the approach proposed. Now, we may also want to have some summary statistics. The summary() method gives goodness of fit measures for the pricing and the yield errors, i.e., the root mean squared error (RMSE) and the average absolute error (AABSE). For instance, for the nelson siegel: # Optimal parameters x_nss$opt_result$GERMANY$par ## beta0 beta1 beta2 tau1 ## 5.130481 -1.268739 -3.215557 2.689112 # Get the RMSE sqrt(sum((x_nss$p$GERMANY - x_nss$phat$GERMANY)^2)) ## [1] 2.557897 and the svenson: # Optimal parameters x_sv$opt_result$GERMANY$par ## beta0 beta1 beta2 tau1 beta3 tau2 ## 0.0003164659 3.7590811501 -0.1316559404 2.8304424158 14.0896161653 15.2194654957 # Get the RMSE sqrt(sum((x_sv$p$GERMANY - x_sv$phat$GERMANY)^2)) ## [1] 1.534363 As we can see, the Svenson approach is superior as it can account for more of the underlying variation and thus improve model performance. Lastly, it may also be interesting to plot the pricing error per distinct bond: # Do this solely for the svenson df_sven &lt;- as.data.frame(cbind(x_sv$perrors$GERMANY[,1], x_sv$perrors$GERMANY[,2])) colnames(df_sven) &lt;- c(&quot;Maturity&quot;, &quot;Pricing Error&quot;) df_sven %&gt;% ggplot(aes(x = Maturity, y = `Pricing Error`)) + geom_point(color = &quot;goldenrod&quot;, shape = 1) + geom_line(aes(x = df_sven$Maturity, y = df_sven$`Pricing Error`), color = &quot;lightsteelblue&quot;) + geom_hline(yintercept = 0, linetype = &quot;dashed&quot;, color = &quot;lightgrey&quot;) + ggtitle(&quot;Pricing Errors based on Maturity - Svenson Family&quot;) + ylab(&quot;Zero-Coupon Yields in %&quot;) + xlab(&quot;Maturity in Years&quot;) + ylim(-1,1) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) ## Warning: Use of `df_sven$Maturity` is discouraged. Use `Maturity` instead. ## Warning: Use of `df_sven$`Pricing Error`` is discouraged. Use `Pricing Error` instead. As we can see, the longer the maturity, the more precision is being lost with the approach. Perhaps this indicates that we should proceed to the nonparametric options. 5.4.4.3.2 Spline-based approach We can also create a non-parametric approach in form of spline-based regressions to estimate the yield curve. Doing so, we follow one of either approaches: First, the authors state that you need to preprocess the dataset in order to get the correct format # Preprocess ot obtain long formats prepro_D &lt;- prepro_bond(&#39;GERMANY&#39;,mybonds) Based on this, we may now first define the number and optimal placement of knots. According to the authors, one approach is to use the rule of thumb of \\(\\sqrt{n}\\) knots. We can show you how to find the optimal amount of knots according to Darcozi et al (2015) through application of the decomposed from the prepro_D object. Especially, we need to distinguish whether the square root is larger or smaller than 3. If &lt; 3: identify the smallest number in the first column and the largest number from the last (ncol) column from the maturity matrix rounded to the largest integer just below the results If &gt; 3: the first and last knot points are defined as in previous case the others between those points are computed with some helper vectors with the length of s-3 # In order to define the optimal knot points, we create a small function: FI_q_spline &lt;- function(prepro_D){ # First, we need to define the list with maturities matrices as well as the list with the yield-to-maturity matrices m &lt;- prepro_D$m[[1]] y &lt;- prepro_D$y[[1]] # Based on that, we now need to distinguish whether the resulting square root is less or larger than three. Depending on this, we need to use different functions. n &lt;- ncol(m) s &lt;- round(sqrt(n)) if(s &lt; 3){ # if s &lt; 3: Then, we just have the smallest first and largest last maturity which account for most of the variation q &lt;- c(floor(min(y[, 1])), max(m[, ncol(m)])) } else{ # if &gt; 3: Then, we define the first and last knot point identically i &lt;- 2:(s-2) # sequence to define each knot point h &lt;- trunc(((i - 1) * n) / (s - 2)) # indices of maturity matrix used to search other knot points # Further, we define for the remaining knots a weighting function theta which is proportional to the difference in length between the first and last knot theta &lt;- ((i - 1) * n) / (s - 2) - h # theta is used as a weight # Now, we have the indices and weights (theta) of each sequecne. Based on this, we find the highest number in each h&#39;th column of the maturity matrix and # add the theta-weighted difference of the h+1 and h columns&#39; maximum results. highest_vola_cluster &lt;- apply(as.matrix(m[, h]), 2, max) + theta * (apply(as.matrix(m[, h + 1]), 2, max) - apply(as.matrix(m[, h]), 2, max)) # Having identified the optimal knot points, we concatenate the values q &lt;- c(floor(min(y[, 1])), highest_vola_cluster, max(m[, ncol(m)])) } return(q) } FI_q_spline(prepro_D) ## DE0001135101 DE0001141463 DE0001135218 DE0001135317 ## 0.000000 1.006027 2.380274 5.033425 9.234521 31.446575 Great, we were able to define the exact knots in the maturity. FYI, you can also do this with the following command: x &lt;- estim_cs(govbonds, &#39;GERMANY&#39;) x$knotpoints[[1]] ## DE0001135101 DE0001141463 DE0001135218 DE0001135317 ## 0.000000 1.006027 2.380274 5.033425 9.234521 31.446575 Based on this, we can now create the functional form of the spline. This is achieved using the following commands. # Get Regression output stargazer(x$regout, type = &quot;text&quot;, digits = 7) ## ## =================================================== ## Dependent variable: ## ------------------------------- ## -Y[[k]] ## --------------------------------------------------- ## X[[k]]1 0.0193198 ## (0.0152297) ## ## X[[k]]2 -0.0000849 ## (0.0037926) ## ## X[[k]]3 -0.0003201 ## (0.0011359) ## ## X[[k]]4 -0.0003710 ## (0.0003907) ## ## X[[k]]5 0.0007292*** ## (0.0000996) ## ## X[[k]]6 0.0020159*** ## (0.0001302) ## ## X[[k]]7 -0.0416319*** ## (0.0045903) ## ## --------------------------------------------------- ## Observations 52 ## R2 0.9999834 ## Adjusted R2 0.9999808 ## Residual Std. Error 0.2134597 (df = 45) ## F Statistic 386,765.0000000*** (df = 7; 45) ## =================================================== ## Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 # Get RMSE sqrt(sum((x$p$GERMANY - x$phat$GERMANY)^2)) ## [1] 1.431931 As we can see, this is thus far the most precise function. Let’s plot it: # Now, we can also plot the relationship ## First, the actual observations actual_FI &lt;- as.data.frame(x$y$GERMANY) colnames(actual_FI) &lt;- c(&quot;Maturity&quot;, &quot;Yield_Actual&quot;) ## Now the estimated ones est_FI &lt;-as.data.frame(x$yhat$GERMANY) colnames(est_FI) &lt;- c(&quot;Maturity&quot;, &quot;Yield_Estimated&quot;) ## Bind them together est_act_FI &lt;- left_join(actual_FI, est_FI, by = c(&quot;Maturity&quot; = &quot;Maturity&quot;)) # Define the confidence interval surrounding the estimated yields est_act_FI_final &lt;- est_act_FI %&gt;% mutate( Yield_Estimated = 100*Yield_Estimated, Yield_Actual = 100*Yield_Actual, std_yield = sd(Yield_Estimated), n_obs = length(Yield_Estimated), error = qnorm(0.975)*std_yield/sqrt(n_obs), CI_up = Yield_Estimated + error, CI_down = Yield_Estimated - error) %&gt;% select(Maturity, Yield_Estimated, Yield_Actual, CI_up, CI_down) est_act_FI_final %&gt;% ggplot(aes(x = Maturity, y = Yield_Actual)) + geom_point(color = &quot;goldenrod&quot;, shape = 1) + geom_line(aes(x = est_act_FI_final$Maturity, y = est_act_FI_final$Yield_Estimated)) + geom_ribbon(aes(ymax = est_act_FI_final$CI_up, ymin = est_act_FI_final$CI_down), linetype = 2, alpha = 0.1) + geom_vline(xintercept = x$knotpoints[[1]], linetype = &quot;dashed&quot;, color = &quot;lightgrey&quot;) + ylim(3, 5) + ggtitle(&quot;Yield Curve Estimation w/ Regression Splines for German Government Bonds&quot;) + ylab(&quot;Zero-Coupon Yields in %&quot;) + xlab(&quot;Maturity in Years&quot;) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) ## Warning: Use of `est_act_FI_final$Maturity` is discouraged. Use `Maturity` instead. ## Warning: Use of `est_act_FI_final$Yield_Estimated` is discouraged. Use `Yield_Estimated` instead. ## Warning: Use of `est_act_FI_final$CI_up` is discouraged. Use `CI_up` instead. ## Warning: Use of `est_act_FI_final$CI_down` is discouraged. Use `CI_down` instead. Great, we were able to depict the actual yield curve with the usual functional form of the cubic splines. Let’s plot the error margins again: # Do this solely for the svenson df_cs &lt;- as.data.frame(cbind(x$perrors$GERMANY[,1], x$perrors$GERMANY[,2])) colnames(df_cs) &lt;- c(&quot;Maturity&quot;, &quot;Pricing Error&quot;) df_cs %&gt;% ggplot(aes(x = Maturity, y = `Pricing Error`)) + geom_point(color = &quot;goldenrod&quot;, shape = 1) + geom_line(aes(x = df_cs$Maturity, y = df_cs$`Pricing Error`), color = &quot;lightsteelblue&quot;) + geom_hline(yintercept = 0, linetype = &quot;dashed&quot;, color = &quot;lightgrey&quot;) + ggtitle(&quot;Pricing Errors based on Maturity - Svenson Family&quot;) + ylab(&quot;Zero-Coupon Yields in %&quot;) + xlab(&quot;Maturity in Years&quot;) + ylim(-1,1) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) ## Warning: Use of `df_cs$Maturity` is discouraged. Use `Maturity` instead. ## Warning: Use of `df_cs$`Pricing Error`` is discouraged. Use `Pricing Error` instead. As we can see, the error margins have been reduced. This was to be expected, given the improved overall fit. Lastly, we can also plot the actual regression output # Get Regression output stargazer(x$regout, type = &quot;text&quot;, digits = 7) ## ## =================================================== ## Dependent variable: ## ------------------------------- ## -Y[[k]] ## --------------------------------------------------- ## X[[k]]1 0.0193198 ## (0.0152297) ## ## X[[k]]2 -0.0000849 ## (0.0037926) ## ## X[[k]]3 -0.0003201 ## (0.0011359) ## ## X[[k]]4 -0.0003710 ## (0.0003907) ## ## X[[k]]5 0.0007292*** ## (0.0000996) ## ## X[[k]]6 0.0020159*** ## (0.0001302) ## ## X[[k]]7 -0.0416319*** ## (0.0045903) ## ## --------------------------------------------------- ## Observations 52 ## R2 0.9999834 ## Adjusted R2 0.9999808 ## Residual Std. Error 0.2134597 (df = 45) ## F Statistic 386,765.0000000*** (df = 7; 45) ## =================================================== ## Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 Further, we can plot the discount and forward curves from the x object using the following commands: discount_df &lt;- as.data.frame(cbind(x$discount$GERMANY[,1], x$discount$GERMANY[,2])) colnames(discount_df) &lt;- c(&quot;Maturity&quot;, &quot;Discount_Factor&quot;) fwd_rate_df &lt;- as.data.frame(cbind(x$forward$GERMANY[,1], x$forward$GERMANY[,2])) colnames(fwd_rate_df) &lt;- c(&quot;Maturity&quot;, &quot;Fwd_Rate&quot;) disc_gg &lt;- discount_df %&gt;% mutate(Discount_Factor = 100*Discount_Factor) %&gt;% ggplot(aes(x = Maturity, y = Discount_Factor)) + geom_line(color = &quot;lightsteelblue3&quot;) + ggtitle(&quot;Discount Factor based on Maturity for German Government Bond&quot;) + ylab(&quot;Discount Factor in %&quot;) + xlab(&quot;Maturity in Years&quot;) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) disc_gg fwd_gg &lt;- fwd_rate_df %&gt;% mutate(Discount_Factor = 100*Fwd_Rate) %&gt;% ggplot(aes(x = Maturity, y = Discount_Factor)) + geom_line(color = &quot;darkgreen&quot;) + ggtitle(&quot;Discount Factor based on Maturity for German Government Bond&quot;) + ylab(&quot;Forward Rate in %&quot;) + xlab(&quot;Maturity in Years&quot;) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) fwd_gg Thus, we can conclude that the non-parametric approach delivers the best results and also provides logical forward as well as discount rates. Consequently, we can use this approach for the estimation of the term structure. Great. We now have encountered the most wide-spread functions to estimate term structures. We showed how to create datasets that fit the functional model well, how to check for the error distribution, which variables to consider when choosing starting parameters and how to plot both the yield curve, spot rate and discount rate curve as well as how to measure the goodness of fit for yield curves. 5.4.5 Sensitivity of the Price to Yield: Duration and Convexity As we mentioned, bond prices have roughly three underlying forms of risk. While the first two can be handled by bond selection itself (at least this is the assumption thus far), market risk is something that can be considered a calculatable risk as we can derive formulas which proxy said risk. In general, market risk arises from the changes in interest rates (= the yield (YTM)), which causes reinvestment risk and liquidation risk. The market price impact on a bond due to a change in interest rates is measured by examining the price of a bond as a function of its YTM. Fixed income instruments are sensitive to changes in interest rates. As such, managing interest rate risk is an important consideration when dealing with fixed income portfolios. Duration and convexity are two techniques that help investors immunize against small changes in interest rates. The idea behind duration is that it estimates the impact of small changes in interest rates on the value of the fixed income instrument, and the idea behind convexity is to enhance this estimate by also considering the impact of the rate of the change in interest rates. From basic calculus we understand outcome that the change of an underlying w.r.t. a given variable in a function can be obtained by taking the derivative of said function w.r.t. said variable. As such, if we do so, we obtain the percentage change of the bond price caused by a \\(\\triangle y\\) change in its yield. This is also known as Macaulay Duration. We derive the duration as first order approximation for small changes in the underlying characteristic. The Macaulay duration can be interpreted as the weighted-average time to maturity of the bond. It is given as: \\[ MacD = \\sum_{i=0}^Tt_t\\frac{CF_t/(1+y)^i}{P} \\] whereas \\(t_t\\) is the Cash-Flow period, \\(CF_t\\) is the present value of the period t cash flows, discounted to obtain the PV, and Price is the price of the bond and P is the market price of the bond. Modified duration adjusts Macaulay duration by considering the yield of the bond. Note that the formula just gives the change in relation to the given yield change. As such, we just take the change of the bond price w.r.t. changes in yield relative to a one unit change in the yield. In essence, it gives the price sensitivity of the bond measured as the percentage change in price for a given change in the yield. It is calculated as: \\[ ModD = \\frac{MacD}{1+y_T/k} \\] Consequently, it provides the sensitivity relative to the change in yield. This pricing formula marks clearly the inverse relationship of price and yield. Since the duration relates the change in YTM to the associated change in its price (and thus serves as a proxy for price movements), it is a clear measure of the bond’s interest rate risk. Building on this, the convexity is just the second order approximation of the relation of bond prices and its underlying yield. That is, it is the second derivative w.r.t. y or the quadratic approximation of the underlying function. Consequently, the function is given as: \\[ Convexity = \\frac{1}{P}\\frac{1}{(1+y)^2}\\sum_{i=0}^T \\frac{CF_t(t^2+t)}{(1+y)^i} \\] Let’s now dig a little bit deeper and calculate both duration and convexity for a fictional example. Doing so, we will also calculate the value of the bond. We say that we have: C = 50.75 Ti = 10 r = 0.01391 N = 1000 k = 4 # Create a data frame mv = market_value(11, 0.0575, 0.01391, 1000, 2) mv ## [1] 1443.184 As such, we obtain a bond value of 1443.184. In order to now calculate both duration and convexity, we first create a manual approach: Ti = 11 C = 0.0575 r = 0.01391 N = 1000 k = 2 # Create the manual CFs period &lt;- seq(1, k*Ti, 1) cf &lt;- c(rep(C/k, k*Ti-1), C/k+N) cf_PV &lt;- cf/ ((1 + r / k)^(-period)) # Calculate the duration dur &lt;- period * cf_PV/mv # Calculate MacD: MacD &lt;- sum(dur/k) # Calculate ModD: ModD &lt;- MacD/(1+r/k) ModD ## [1] 8.818999 To calculate the convexity now, we construct the variables c1 and c2, where: c1 = \\((t^2 + t)CF\\) c2 = \\(P(1+r/k)^2\\) Then, we calculate the period convexity adjustment as: Conv = \\(c1\\times PV-Adj / c2\\) # Calculate the convexity c1 = (period^2 + period)*cf c2 = mv*(1 + r / k)^2 conv = c1 * 1/((1 + r / k)^(-period)) / c2 convexity = sum(conv) convexity ## [1] 402.8344 We can now estimate the bond prices based on both the duration as well as the convexity. This is done using the following formulas. For the Duration we get: \\[ \\triangle P = -D \\times \\triangle y \\times P \\] whereas the change in bond price is a function of the modified duration (which quantifies the impact of small changes in interest rates on the value of the fixed income instrument), the change in yield and the current bond price. This is intuitive as we obtain that the change in price depends on the change in yield as well as the duration, which measures the sensitivity related to the yield. Let’s now assume we increase the yield by 100 BP delta_y &lt;- 0.01 delta_P &lt;- -ModD*delta_y*mv P_new &lt;- delta_P + mv P_new ## [1] 1315.909 We can also estimate the price changes using convexity. This is given by the formula: \\[ \\triangle P = P\\times [(-D \\times \\triangle y) + 0.5 \\times C \\times (\\triangle y)^2] \\] where C is the Convexity and the other terms are the same as defined above for duration. delta_P_C &lt;- mv*((-ModD*delta_y) + 0.5*convexity*delta_y^2) P_new_C &lt;- delta_P_C + mv P_new_C ## [1] 1344.977 We can now finally compare the results of the estimated bond prices and actual bond prices. For that, we just add the yield change into the formula above. market_value(11, 0.0575, 0.01391 + delta_y, 1000, 2) ## [1] 1323.208 The full valuation estimates the bond price is 1323, which is in between our estimated price change based on duration only and duration plus convexity. Since we now understand how the duration and convexity work, we can start to create functions based on them: # Get the standard pricing Ti = 11 C = 0.0575 r = 0.01391 N = 1000 k = 2 delta_y = 0.01 # Create a duration and convexity function duration_convexity &lt;- function(Ti, C, r, N, k, mv, delta_y, convex_opt = F, price_change = F){ # Baselines period &lt;- seq(1, k*Ti, 1) cf &lt;- c(rep(C/k, k*Ti -1), C/k+N) cf_PV &lt;- cf/ ((1 + r / k)^(-period)) # Durations dur &lt;- period*cf_PV/mv MacD &lt;- sum(dur/k) ModD &lt;- MacD/(1+r/k) # Convexity c1 = (period^2+period)*cf c2 = mv*(1+r/k)^2 conv = c1*1/((1 + r / k)^(-period)) / c2 convexity = sum(conv) # Calculate the price changes Price_Dur &lt;- -ModD*delta_y*mv + mv Price_Conv &lt;- mv*((-ModD*delta_y) + 0.5*convexity*delta_y^2) + mv # If statement if(convex_opt == F &amp; price_change == F){ return(ModD) } else if (convex_opt == T &amp; price_change == F){ return(convexity) } else if (convex_opt == F &amp; price_change == T){ return(Price_Dur) } else{ return(Price_Conv) } } duration_convexity(Ti, C, r, N, k, mv, delta_y, convex_opt = F, price_change = F) ## [1] 8.818999 duration_convexity(Ti, C, r, N, k, mv, delta_y, convex_opt = T, price_change = F) ## [1] 402.8344 Now, we can again calculate both estimations duration_convexity(Ti, C, r, N, k, mv, delta_y, convex_opt = F, price_change = T) ## [1] 1315.909 duration_convexity(Ti, C, r, N, k, mv, delta_y, convex_opt = T, price_change = T) ## [1] 1344.977 As we can see, both options deliver the identical result. 5.4.6 Price and Yield: Full Valuation and Approximations We now have figured out ways to compute the exact as well as the approximate functions to estimate the Bond Price based on the yield and other functions. In order to understand how duration and convexity stack up compared to a full valuation of the bond at different yields. # Get the standard pricing Ti = 11 C = 0.0575 r = 0.01391 N = 1000 k = 2 delta_y = 0.01 delta_y &lt;- seq(-0.06391, 0.05391, 0.001) full_change &lt;- rep(0,length(delta_y)) mod_D_change &lt;- rep(0,length(delta_y)) conv_change &lt;- rep(0,length(delta_y)) for(i in 1:length(delta_y)){ full_change[i] &lt;- market_value(Ti, C, r + delta_y[i], N, k) mod_D_change &lt;- duration_convexity(Ti, C, r, N, k, mv, delta_y, convex_opt = F, price_change = T) conv_change &lt;- duration_convexity(Ti, C, r, N, k, mv, delta_y, convex_opt = T, price_change = T) } df_yields &lt;- as.data.frame(cbind(r+delta_y, full_change, mod_D_change, conv_change)) colnames(df_yields) &lt;- c(&quot;Yield&quot;, &quot;Full Valuation Est&quot;, &quot;Duration Est&quot;, &quot;Dur + Convexity Est&quot;) df_yields %&gt;% gather(Treasury, Return, `Full Valuation Est`: `Dur + Convexity Est`) %&gt;% ggplot(aes(x=Yield, y = Return, color = Treasury)) + geom_line() + ggtitle(&quot;Bond Yield Estimate w.r.t Yield - Actual, Duration and Convexity Estimates&quot;) + ylab(&quot;Value&quot;) + xlab(&quot;Yield&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + labs(fill=&#39;Swiss Government Bonds&#39;) + labs(color=&#39;Difference in Yield&#39;) Great, we now have written functions to calculate the bond price based on the parameters of interest and were able to calculate the bond price estimates based on the three most common functions. Based on them, we were able to draw an approximation of bond returns. 5.5 Interest Rate Derivative Models Lastly, we can look at financial products whose payoff and subsequent payoff depends on interest rates. These are also called Interest Rate derivative models. The basic products include interest rate swaps, forward rate agreements, callable and puttable bonds or bond options (such as CBs, which we discover in the next part). In order to do so, we will look at four distinct models to price interest rate derivatives. We have already encountered models which aim at capturing term structures of interest rates, and the main ideas of these models can be transferred to the case of interest rate derivative pricing. 5.5.1 Black Model The Black model (Black, 1976) was developed to price options on futures contracts. Futures options grant the holder the right to enter into a contract at a predetermined price (denoted as strike price or exercise price, X) on a specified date (maturity, T). In this model, we keep the assumptions of the Black-Scholes model, except that the underlying is the futures price instead of the spot price. Hence, we assume that the futures price (F) follows a geometric Brownian motion: \\[ dF = \\mu Fdt + \\sigma FdW \\] Black’s formula for a European futures call option is as follows: \\[ c = e^{-rT}[FN(d_1) - XN(d_2)] \\] whereas: \\[ \\begin{align} d_1 &amp;= \\frac{ln(F/X) + \\frac{\\sigma^2}{2}T}{\\sigma\\sqrt{T}}\\\\ d_2 &amp;= \\frac{ln(F/X) - \\frac{\\sigma^2}{2}T}{\\sigma\\sqrt{T}} \\end{align} \\] Based on this, we can also define the price of a put option as: \\[ p = e^{-rT}[XN(-d_2) - FN(-d_1)] \\] In order to price an interest rate derivative with the Black model, we can simply use the fOptions package and its function called GBSOption, which is just the usual Black Scholes formula for the option pricing process. # Let&#39;s quickly look at the function install.packages(&quot;fOptions&quot;) ## ## The downloaded binary packages are in ## /var/folders/97/v7mhh7_10r54n7qdx4ykd6wc0000gn/T//RtmpSFmz9w/downloaded_packages library(fOptions) GBSOption ## function (TypeFlag = c(&quot;c&quot;, &quot;p&quot;), S, X, Time, r, b, sigma, title = NULL, ## description = NULL) ## { ## TypeFlag = TypeFlag[1] ## d1 = (log(S/X) + (b + sigma * sigma/2) * Time)/(sigma * sqrt(Time)) ## d2 = d1 - sigma * sqrt(Time) ## if (TypeFlag == &quot;c&quot;) ## result = S * exp((b - r) * Time) * CND(d1) - X * exp(-r * ## Time) * CND(d2) ## if (TypeFlag == &quot;p&quot;) ## result = X * exp(-r * Time) * CND(-d2) - S * exp((b - ## r) * Time) * CND(-d1) ## param = list() ## param$TypeFlag = TypeFlag ## param$S = S ## param$X = X ## param$Time = Time ## param$r = r ## param$b = b ## param$sigma = sigma ## if (is.null(title)) ## title = &quot;Black Scholes Option Valuation&quot; ## if (is.null(description)) ## description = as.character(date()) ## new(&quot;fOPTION&quot;, call = match.call(), parameters = param, price = result, ## title = title, description = description) ## } ## &lt;bytecode: 0x7f7e6cee3630&gt; ## &lt;environment: namespace:fOptions&gt; As we can see, when we want to compute \\(d_1\\) for the European call, then we can see the importance of the parameter b in the calculation. This factor is how we can decide which model we want to use. In essence, these options are ready for b: b = r: BS Options Model b = r-q: Merton’s stock option model with continuous dividend yield q (= currency option model) b = 0: Black’s futures option model That’s all there is to state. We can now just take a fictional example. Let’s say we want to calculat a call with strike 120, current price 100, 5 years maturity, 5% interest, b equal to zero and sigma of 0.2 GBSOption(&quot;c&quot;, 120, 100, 5, 0.05, 0, 0.2) ## ## Title: ## Black Scholes Option Valuation ## ## Call: ## GBSOption(TypeFlag = &quot;c&quot;, S = 120, X = 100, Time = 5, r = 0.05, ## b = 0, sigma = 0.2) ## ## Parameters: ## Value: ## TypeFlag c ## S 120 ## X 100 ## Time 5 ## r 0.05 ## b 0 ## sigma 0.2 ## ## Option Price: ## 24.16356 ## ## Description: ## Thu Feb 24 17:52:02 2022 Consequently, we can see that the option price is approximately 24. 5.5.2 Pricing Interest Rate Caps with Black Rate caps are interest rate derivatives in which the holder (buyer) gets payments over a certain period of time if the interest rate exceeds a given threshold. Conversely, floors are options in which the buyer gets payments if the interest rate is below a given threshold. As such, caps and floors are efficient products to hedge against interest rate volatility. The payoff of a cap (with one unit of notional amount) at the end of the nth period is as follows: \\[ \\tau\\max(L_{n-1}-X,0) \\] whereas \\(\\tau\\) defines the interval between two maturity dates. This is also referred to as a caplet, whereas X is an underlying. Apparently, the payoff will either be 0 (in case that the interest rate strike X is higher than the interest rate observed) or \\(L_{n-1}-X\\) (in case that X is smaller than the interest rate). If we assume that the derivative follows a LIBOR curve, and that the LIBOR is given as a random variable that has lognormal distribution and the volatility is \\(\\sigma_{n-1}\\), then we can apply the formulas: \\[ c_n = \\tau_ne^{-r\\tau n}[F_{n-1}N(d_1) - XN(d_2)] \\] whereas: \\[ \\begin{align} d_1 &amp;= \\frac{ln(F_{n-1}/X) + \\frac{\\sigma^2_{n-1}}{2}\\tau(n-1)}{\\sigma_{n-1}\\sqrt{\\tau(n-1)}}\\\\ d_2 &amp;= \\frac{ln(F_{n-1}/X) - \\frac{\\sigma^2_{n-1}}{2}\\tau(n-1)}{\\sigma_{n-1}\\sqrt{\\tau(n-1)}} \\end{align} \\] here, \\(F_{n-1}\\) is the forward LIBOR rate between \\(\\tau(n-1)\\) and \\(\\tau n\\), and r is the risk-free spot log return with maturity \\(\\tau n\\). This is nothing else than our usual Black / Scholes formula, accounting for a maturity period and given the remaining DOF. Once we have valued a caplet, we can continue this for each of the maturities. We then need to sum their prices and aggregate them to obtain the overall price of the interest rate cap. Let’s see an example to understand this in depth. We have to pay USD LIBOR for 6 months to a business partner between May 2014 and November 2014. A caplet is an easy way to avoid the interest rate risk. Assume that we have a caplet on the LIBOR rate with 2.5% strike price (using the usual terminology). This means that if the LIBOR rate is higher then 2.5%, we will receive the difference in cash. If, for example, the LIBOR rate turns out to be 3% in May, our payoff on one unit of notional amount is 0.5*max(3% -2.5%, 0). Assuming that the LIBOR rate follows the geometric Brownian motion with 20% volatility, the forward rate between May 1st and November 1st is 2.2%, and the spot rate is 2%. In this case, we have that: X = 0.025 F = 0.022 \\(\\tau\\) = 0.5 \\(\\sigma\\) = 0.2 r = 0.02 Now, let’s see how to price the caplet. There is nothing new in it; we can simply use the Black-Scholes formula. It is clear that we need to set \\(S = F_{n-1}\\), Time = 0.5, and b = 0. GBSOption(&quot;c&quot;, 0.022, 0.025, 0.5, 0.02, 0, 0.2) ## ## Title: ## Black Scholes Option Valuation ## ## Call: ## GBSOption(TypeFlag = &quot;c&quot;, S = 0.022, X = 0.025, Time = 0.5, r = 0.02, ## b = 0, sigma = 0.2) ## ## Parameters: ## Value: ## TypeFlag c ## S 0.022 ## X 0.025 ## Time 0.5 ## r 0.02 ## b 0 ## sigma 0.2 ## ## Option Price: ## 0.0003269133 ## ## Description: ## Thu Feb 24 17:52:02 2022 The price of the option is 0.0003269133. We still need to multiply it with τ = 0.5, which makes it 0.0001634567. A cap is simply a sum of caplets, but we can combine them with different parameters if needed. Let’s say we need a cap that pays if the LIBOR rate goes above 2.5% in the first 3 months, or if it is higher than 2% in the following 3 months. The forward LIBOR rate can also be different in the May and August period (let’s say it is 2.1%), and in the August and November period (let’s say it is 2.2%). We simply price both caplets one by one and add their prices: GBSOption(&quot;c&quot;, 0.021, 0.025, 0.25, 0.02, 0, 0.2) ## ## Title: ## Black Scholes Option Valuation ## ## Call: ## GBSOption(TypeFlag = &quot;c&quot;, S = 0.021, X = 0.025, Time = 0.25, ## r = 0.02, b = 0, sigma = 0.2) ## ## Parameters: ## Value: ## TypeFlag c ## S 0.021 ## X 0.025 ## Time 0.25 ## r 0.02 ## b 0 ## sigma 0.2 ## ## Option Price: ## 3.743394e-05 ## ## Description: ## Thu Feb 24 17:52:02 2022 GBSOption(&quot;c&quot;, 0.022, 0.02, 0.25, 0.02, 0, 0.2) ## ## Title: ## Black Scholes Option Valuation ## ## Call: ## GBSOption(TypeFlag = &quot;c&quot;, S = 0.022, X = 0.02, Time = 0.25, r = 0.02, ## b = 0, sigma = 0.2) ## ## Parameters: ## Value: ## TypeFlag c ## S 0.022 ## X 0.02 ## Time 0.25 ## r 0.02 ## b 0 ## sigma 0.2 ## ## Option Price: ## 0.002179862 ## ## Description: ## Thu Feb 24 17:52:02 2022 Now, we need to multiply both with τ = 0.25 and take the sum of their prices: (3.743394e-05 + 0.002179862 ) * 0.25 ## [1] 0.000554324 Pricing a floor is very similar. First, we divide the asset’s cash flows into single payments, called floorlets. Then, we determine the value of each floorlet with the help of the Black model; the only difference is that floorlets are not call but put options. Finally, we add up the prices of the floorlets to get the value of the floor. As such, this is a simple model to compute caps and floors for forward rate interest agreements. 5.6 Short Rate Models Black’s model is applicable when we can assume that the future value of the underlying asset has lognormal distribution. Another approach to value interest rate derivatives is by modeling the term structure of interest rates. Here, we continue by presenting two basic interest rate models and their main characteristics. Two of the most common short rate models are the Vasicek and Cox, Ingersoll, and Ross (CIR) models. These models generate a term structure of zero coupon prices. Both of these models assume a risk-neutral process for the short rate r with one source of uncertainty. Specifically, the drift and volatility parameters depend only on the short rate r and not on time. Another common feature of these two models is that they exhibit mean reversion of the short rate. The difference between the two models is in how they handle volatility. 5.6.1 Vasicek 5.6.1.1 Relation of interest rate parameters The Vasicek model for changes in the short interest rate r is stochastic and of the following form: \\[ dr = a(b-r)dt + \\sigma_rdz \\] where a very small change in the short rate (dr) in the time increment dt is pulled back to the mean level b at a rate of a. The second term is the volatility of the short rate and it involves uncertainty dz. dz is a normally distributed variable with zero mean and variance dt. We assume that the short rate r is the instantaneous rate at time t appropriate for continuous compounding. Based on this, we can create simulation studies which portray the relationship between the interest rate increment and its underlying functional parameters. # Create the vasicek function vasicek &lt;- function(alpha, beta, sigma, n = 1000, r0 = 0.05){ v &lt;- rep(0, n) v[1] &lt;- r0 for (i in 2:n){ v[i] &lt;- v[i - 1] + alpha * (beta - v[i - 1]) + sigma * rnorm(1) } return(v) } # Create the data frame r &lt;- replicate(4, vasicek(0.05, 0.065, 0.0003)) r_df &lt;- as.data.frame(cbind(r, seq(ymd(&#39;2002-04-07&#39;),ymd(&#39;2015-03-01&#39;), by = as.difftime(weeks(1))))) ## Warning in base::cbind(...): number of rows of result is not a multiple of vector length (arg 2) colnames(r_df) &lt;- c(&quot;Sim1&quot;, &quot;Sim2&quot;, &quot;Sim3&quot;, &quot;Sim4&quot;, &quot;Time&quot;) r_df &lt;- r_df %&gt;% mutate(Time = as.Date(Time)) r_df &lt;- r_df[!duplicated(r_df[c(&#39;Time&#39;)]),] # Plot the plot r_df %&gt;% ggplot(aes(x = Time, y = Sim1), color = &quot;Sim1&quot;) + geom_line() + geom_line(aes(x = r_df$Time, y = r_df$Sim2, color = &quot;Sim2&quot;)) + geom_line(aes(r_df$Time, r_df$Sim3, color = &quot;Sim3&quot;)) + geom_line(aes(r_df$Time, r_df$Sim4, color = &quot;Sim4&quot;)) + ggtitle(&quot;Vasicek Model estimation of the interest rate&quot;) + ylab(&quot;Value&quot;) + xlab(&quot;Time&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) ## Warning: Use of `r_df$Time` is discouraged. Use `Time` instead. ## Warning: Use of `r_df$Sim2` is discouraged. Use `Sim2` instead. ## Warning: Use of `r_df$Time` is discouraged. Use `Time` instead. ## Warning: Use of `r_df$Sim3` is discouraged. Use `Sim3` instead. ## Warning: Use of `r_df$Time` is discouraged. Use `Time` instead. ## Warning: Use of `r_df$Sim4` is discouraged. Use `Sim4` instead. This is the general formula for the interest rate model according to Vasicek. We can now take a step ahead and look at its sensitivity towards its individual parameters. 5.6.1.1.1 Sensitivity towards volatility # Sensivity towards volatility r &lt;- sapply(c(0, 0.0002, 0.0004), function(sigma){vasicek(0.02, 0.065, sigma)}) r_df_vola &lt;- as.data.frame(cbind(r, seq(ymd(&#39;2002-04-07&#39;),ymd(&#39;2015-03-01&#39;), by = as.difftime(weeks(1))))) ## Warning in base::cbind(...): number of rows of result is not a multiple of vector length (arg 2) colnames(r_df_vola) &lt;- c(&quot;Vola1&quot;, &quot;Vola2&quot;, &quot;Vola3&quot;, &quot;Time&quot;) r_df_vola &lt;- r_df_vola %&gt;% mutate(Time = as.Date(Time)) r_df_vola &lt;- r_df_vola[!duplicated(r_df_vola[c(&#39;Time&#39;)]),] # Plot the plot r_df_vola %&gt;% ggplot(aes(x = Time, y = Vola1, color = &quot;Vola1&quot;)) + geom_line() + geom_line(aes(x = r_df_vola$Time, y = r_df_vola$Vola2, color = &quot;Vola2&quot;)) + geom_line(aes(r_df_vola$Time, r_df_vola$Vola3, color = &quot;Vola3&quot;)) + ggtitle(&quot;Vasicek Model estimation of the interest rate - dependence on volatility&quot;) + ylab(&quot;Value&quot;) + xlab(&quot;Yield&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) ## Warning: Use of `r_df_vola$Time` is discouraged. Use `Time` instead. ## Warning: Use of `r_df_vola$Vola2` is discouraged. Use `Vola2` instead. ## Warning: Use of `r_df_vola$Time` is discouraged. Use `Time` instead. ## Warning: Use of `r_df_vola$Vola3` is discouraged. Use `Vola3` instead. As we can see, an increasing volatility creates larger spikes and valleys. This is to be expected, given that the term is additive. As such, the higher the volatility, the more it will circle around its long-term average, which is 0.065. If the volatility parameter is set to zero, the additive term falls out of the equation. Since r0 is lower than beta and alpha &gt; 0, we will see that the Value of the short rate will always converge to the beta value since, once that r0 = beta, the first term of the equation is also equal to zero. Then we have an addition of two zero terms and the previous r0 term, which is equal to beta. Hence, with volatility set to zero, the Vasicek model will always converge to the beta as long-term average. 5.6.1.1.2 Sensitivity towards alpha We can do the same for differernt alphas # Sensivity towards alpha r &lt;- sapply(c(0.002, 0.02, 0.2), function(alpha){set.seed(2014); vasicek(alpha, 0.065, 0.0002)}) r_df_alpha &lt;- as.data.frame(cbind(r, seq(ymd(&#39;2002-04-07&#39;),ymd(&#39;2015-03-01&#39;), by = as.difftime(weeks(1))))) ## Warning in base::cbind(...): number of rows of result is not a multiple of vector length (arg 2) colnames(r_df_alpha) &lt;- c(&quot;Alpha1&quot;, &quot;Alpha2&quot;, &quot;Alpha3&quot;, &quot;Time&quot;) r_df_alpha &lt;- r_df_alpha %&gt;% mutate(Time = as.Date(Time)) r_df_alpha &lt;- r_df_alpha[!duplicated(r_df_alpha[c(&#39;Time&#39;)]),] # Plot the plot r_df_alpha %&gt;% ggplot(aes(x = Time, y = Alpha1, color = &quot;Alpha1&quot;)) + geom_line() + geom_line(aes(x = r_df_alpha$Time, y = r_df_alpha$Alpha2, color = &quot;Alpha2&quot;)) + geom_line(aes(r_df_alpha$Time, r_df_alpha$Alpha3, color = &quot;Alpha3&quot;)) + ggtitle(&quot;Vasicek Model estimation of the interest rate - dependence on alphas&quot;) + ylab(&quot;Value&quot;) + xlab(&quot;Yield&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) ## Warning: Use of `r_df_alpha$Time` is discouraged. Use `Time` instead. ## Warning: Use of `r_df_alpha$Alpha2` is discouraged. Use `Alpha2` instead. ## Warning: Use of `r_df_alpha$Time` is discouraged. Use `Time` instead. ## Warning: Use of `r_df_alpha$Alpha3` is discouraged. Use `Alpha3` instead. As one can observe, an increase in alpha is associated with a quicker convergence towards the long-term average. The higher alpha, the quicker the convergence. This is also intuitive, given that alpha is the multiplicative term of the difference between beta and r. If this is positive, then a larger alpha implies a steeper increase (= stronger first derivative). 5.6.1.1.3 Sensitivity towards beta Lastly, let’s look at the beta value. # Sensivity towards alpha r &lt;- sapply(c(0.055, 0.065, 0.095), function(beta){set.seed(2014); vasicek(0.02, beta, 0.0002)}) r_df_beta &lt;- as.data.frame(cbind(r, seq(ymd(&#39;2002-04-07&#39;),ymd(&#39;2015-03-01&#39;), by = as.difftime(weeks(1))))) ## Warning in base::cbind(...): number of rows of result is not a multiple of vector length (arg 2) colnames(r_df_beta) &lt;- c(&quot;Beta1&quot;, &quot;Beta2&quot;, &quot;Beta3&quot;, &quot;Time&quot;) r_df_beta &lt;- r_df_beta %&gt;% mutate(Time = as.Date(Time)) r_df_beta &lt;- r_df_beta[!duplicated(r_df_beta[c(&#39;Time&#39;)]),] # Plot the plot r_df_beta %&gt;% ggplot(aes(x = Time, y = Beta1, color = &quot;Beta1&quot;)) + geom_line() + geom_line(aes(x = r_df_beta$Time, y = r_df_beta$Beta2, color = &quot;Beta2&quot;)) + geom_line(aes(r_df_beta$Time, r_df_beta$Beta3, color = &quot;Beta3&quot;)) + ggtitle(&quot;Vasicek Model estimation of the interest rate - dependence on betas&quot;) + ylab(&quot;Value&quot;) + xlab(&quot;Time&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) ## Warning: Use of `r_df_beta$Time` is discouraged. Use `Time` instead. ## Warning: Use of `r_df_beta$Beta2` is discouraged. Use `Beta2` instead. ## Warning: Use of `r_df_beta$Time` is discouraged. Use `Time` instead. ## Warning: Use of `r_df_beta$Beta3` is discouraged. Use `Beta3` instead. As expected, the beta values define the level of the long-term average. As such, a larger beta implies a greater difference term in the first equation. Since the long-term average will converge at the respective beta value, the differences are accordingly. 5.6.1.2 Density of the rate parameter The authors show that the Vasicek model follows a normal distribution with the first two moments defined as: \\[ E[r|r_t] =r_te^{-a(t-s)} + b(1-e^{-a(t-s)}) \\] as well as: \\[ var(r|r_t) = \\frac{\\sigma^2}{2a}(1-e^{-2a(t-s)}) \\] Based on these moments, we can define the probability distribution based on individual parameter combinations. library(patchwork) vas_pdf &lt;- function(x, a, b, sigma, t, s, r0 = 0.02){ mean &lt;-r0*exp(-a*(t-s))+b*(1-exp(-a*(t-s))) var &lt;- sigma^2/(2*a)*(1-exp(-2*a*(t-s))) dnorm(x, mean = mean, sd = var) } # Define the x variable x &lt;- seq(-0.2, 0.2, length = 2000) par(xpd = T ,mar = c(2,2,2,2), mfrow = c(2,2)) # Define the different y variables y_st &lt;- sapply(c(2,4,8,15), function(t){set.seed(2014); vas_pdf(x, 0.1, 0.05, 0.12, t, 0, 0.02)}) y_a &lt;- sapply(c(.1, .2, .3, .4), function(a){set.seed(2014); vas_pdf(x, a, 0.05, 0.12, 7, 0, 0.02)}) y_b &lt;- sapply(c(0.1, 0.12, 0.16, 0.19), function(b){set.seed(2014); vas_pdf(x, 0.1, b, 0.12, 7, 0, 0.02)}) y_sigma &lt;- sapply(c(0.1, 0.12, 0.16, 0.19), function(sigma){set.seed(2014); vas_pdf(x, 0.1, 0.05, sigma, 7, 0, 0.02)}) # Create the data frames xy_st &lt;- as.data.frame(cbind(y_st, x)) colnames(xy_st) &lt;- c(&quot;Delta_T = 2&quot;, &quot;Delta_T = 4&quot;, &quot;Delta_T = 8&quot;, &quot;Delta_T = 15&quot;, &quot;x&quot;) xy_a &lt;- as.data.frame(cbind(y_a,x)) colnames(xy_a) &lt;- c(&quot;a = 0.1&quot;, &quot;a = 0.2&quot;, &quot;a = 0.3&quot;, &quot;a = 0.4&quot;, &quot;x&quot;) xy_b &lt;- as.data.frame(cbind( y_b, x)) colnames(xy_b) &lt;- c(&quot;b = 0.1&quot;, &quot;b = 0.12&quot;, &quot;b = 0.16&quot;, &quot;b = 0.19&quot;, &quot;x&quot;) xy_sigma &lt;- as.data.frame(cbind(y_sigma, x)) colnames(xy_sigma) &lt;- c(&quot;s = 0.1&quot;, &quot;s = 0.12&quot;, &quot;s = 0.16&quot;, &quot;s = 0.19&quot;, &quot;x&quot;) st &lt;- xy_st %&gt;% ggplot(aes(x = x, y = `Delta_T = 2`, color = &quot;Delta_T = 2&quot;)) + geom_line() + geom_line(aes(x = xy_st$x , y = xy_st$`Delta_T = 4`, color = &quot;Delta_T = 4&quot;)) + geom_line(aes(x = xy_st$x , y = xy_st$`Delta_T = 8`, color = &quot;Delta_T = 8&quot;)) + geom_line(aes(x = xy_st$x , y = xy_st$`Delta_T = 15`, color = &quot;Delta_T = 15&quot;)) + ggtitle(&quot;CIR Model estimation - dependence on Time&quot;) + ylab(&quot;PDF&quot;) + xlab(&quot;Yield&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) a &lt;- xy_a %&gt;% ggplot(aes(x = x, y = `a = 0.1`, color = &quot;a = 0.1&quot;)) + geom_line() + geom_line(aes(x = xy_a$x , y = xy_a$`a = 0.2`, color = &quot;a = 0.2&quot;)) + geom_line(aes(x = xy_a$x , y = xy_a$`a = 0.3`, color = &quot;a = 0.3&quot;)) + geom_line(aes(x = xy_a$x , y = xy_a$`a = 0.4`, color = &quot;a = 0.4&quot;)) + ggtitle(&quot;CIR Model estimation - dependence on alpha&quot;) + ylab(&quot;PDF&quot;) + xlab(&quot;Yield&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) b &lt;- xy_b %&gt;% ggplot(aes(x = x, y = `b = 0.1`, color = &quot;b = 0.1&quot;)) + geom_line() + geom_line(aes(x = xy_b$x , y = xy_b$`b = 0.12`, color = &quot;b = 0.12&quot;)) + geom_line(aes(x = xy_b$x , y = xy_b$`b = 0.16`, color = &quot;b = 0.16&quot;)) + geom_line(aes(x = xy_b$x , y = xy_b$`b = 0.19`, color = &quot;b = 0.19&quot;)) + ggtitle(&quot;CIR Model estimation - dependence on beta&quot;) + ylab(&quot;PDF&quot;) + xlab(&quot;Yield&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) sig &lt;- xy_sigma %&gt;% ggplot(aes(x = x, y = `s = 0.1`, color = &quot;s = 0.1&quot;)) + geom_line() + geom_line(aes(x = xy_sigma$x , y = xy_sigma$`s = 0.12`, color = &quot;s = 0.12&quot;)) + geom_line(aes(x = xy_sigma$x , y = xy_sigma$`s = 0.16`, color = &quot;s = 0.16&quot;)) + geom_line(aes(x = xy_sigma$x , y = xy_sigma$`s = 0.19`, color = &quot;s = 0.19&quot;)) + ggtitle(&quot;CIR Model estimation - dependence on sigma&quot;) + ylab(&quot;PDF&quot;) + xlab(&quot;Yield&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) st + a + b + sig + plot_layout(ncol = 2, heights = c(5, 5)) We can observe again the following: beta only has an impact on the location, but not on the variance, of the long-term average rate an increasing alpha will converge quicker at the long-term average An increase in time will increase the spread of the rate higher volatility increases the spread, apparently 5.6.1.3 Calculation of ZCB rates and yield curve With Vasicek, the Price of a ZCB at time t can be calculated as: \\[ P_{t,s} = A_{t,s}e^{-B_{t,s}, r_t} \\] where rt is the value of the short rate at time t, \\[ B_{t,s} = \\frac{1-e^{-a(s-t)}}{a} \\] as well as \\[ A_t = exp\\left[\\frac{(B_{t,s} - (s-t))(a^2b-\\frac{\\sigma_r^2}{2})}{a^2} - \\frac{\\sigma_r^2B_{t,s}}{4a}\\right] \\] Based on this, we can determine the following relationship between the bond prices and the yield curve: \\[ R(r,T) = - \\frac{1}{s-t}\\ln P(t,T) \\] In essence, \\(A_t\\) is a level parameter and \\(B_{t,s}\\) is a drift parameter depending on t and s (so the difference between two periods). In their paper, the authors estimate a = 0.1779, b = 0.0866, and \\(\\sigma_r\\) = 0.02. Using r = 0.07, we can compute the ZCB Price after Vasicek # Inputs a &lt;- 0.1779 b &lt;- 0.0866 sigma_r &lt;- 0.02 r &lt;- 0.07 s &lt;- 10 t &lt;- 0 # Calculate Vasicek as function Vas_Spot &lt;- function(a, b, sigma_r, r, s, t, get_vola = F){ B_t &lt;- ifelse(a == 0, T, (1-exp(-a*(s-t)))/a) A_t &lt;- ifelse(a == 0, exp(sigma_r^2 * s^3 / 6), exp((B_t - (s-t))*(a^2*b-sigma_r^2/2)/a^2 - (sigma_r^2*B_t)/(4*a))) P_t = A_t*exp(-B_t*r) R = ifelse((s-t) &gt; 0, -log(P_t) / (s-t), r) if (get_vola == F) { return(P_t) } else{ return(R) } } Vas_Spot(a, b, sigma_r, r, s, t, get_vola = F) ## [1] 0.4688846 Vas_Spot(a, b, sigma_r, r, s, t, get_vola = T) ## [1] 0.07573986 As we can see, the Price change of a ZCB in the Vasicek model is 0.468*Price of the actual ZCB with an underlying volatility of the zero yield of 0.076. 5.6.2 Cox, Ingersoll, and Ross - CIR Model The Cox, Ingersoll, and Ross (CIR) model is another commonly used interest rate model. The difference between CIR and Vasicek is that the former assumes the volatility depends also on the square root of the short rate. The CIR model is as follows: \\[ dr = a(b-r)dt + \\sigma\\sqrt{r}dz \\] Presuming that \\(\\sigma_r = \\sigma\\sqrt{r}\\), we assume a higher volatility here. As is apparent, the long-term average will again be beta and the drift parameter is alpha. The major difference lays in the fact that the volatility term is not constant. Rather, it is proportional to the square root of the interest rate. Due to this difference, we understand that the probability distribution of the short rates follows a \\(\\chi^2\\) distribution with n degrees of freedom and m denoting the drift parameter. As such, we define the interest rate as: \\[ f[r|r_t] = 2c\\chi^2_{2q+2,2u}[2cr] \\] whereas \\(c = \\frac{2a}{\\sigma^2(1-e^{-a(t-s)})}\\), \\(u = cr_te^{-a(t-s)}\\) and \\(q = \\frac{2ab}{\\sigma^2}-1\\). 5.6.2.1 Density of the rate parameter The authors show that the CIR model follows a \\(\\chi^2\\) distribution with the first two moments defined as: \\[ E[r|r_t] =r_te^{-a(t-s)} + b(1-e^{-a(t-s)}) \\] as well as: \\[ var(r|r_t) = \\frac{\\sigma^2r_t}{a}(e^{-a(t-s)} - e^{-2a(t-s)}) + \\frac{\\sigma^2b}{2a}(1-e^{-a(t-s)})^2 \\] Based on these moments, we can again define the probability distribution based on individual parameter combinations. cir_pdf &lt;- function(x, a, b, sigma, t, s, r0 = 0.02){ q = (2*a*b)/(sigma^2) - 1 c = (2*a)/(sigma^2*(1-exp(-a*(t-s)))) u = c*r0*exp(-a*(t-s)) 2*c*dchisq(2*c*x, 2*q+2, ncp = 2*u) } # Define the x variable x &lt;- seq(-0.05, 0.2, length = 2000) par(xpd = T ,mar = c(2,2,2,2), mfrow = c(2,2)) # Define the different y variables y_st &lt;- sapply(c(1, 2, 5, 15), function(t){set.seed(2014); cir_pdf(x, 0.3, 0.05, 0.12, t, 0, 0.05)}) y_a &lt;- sapply(c(.2, .4, .6, .8), function(a){set.seed(2014); cir_pdf(x, a, 0.05, 0.12, 7, 0, 0.05)}) y_b &lt;- sapply(c(0.1, 0.12, 0.16, 0.19), function(b){set.seed(2014); cir_pdf(x, 0.3, b, 0.12, 7, 0, 0.05)}) y_sigma &lt;- sapply(c(0.01, 0.03, .05, .11), function(sigma){set.seed(2014); cir_pdf(x, 0.3, 0.05, sigma, 7, 0, 0.05)}) # Create the data frames xy_st &lt;- as.data.frame(cbind(y_st, x)) colnames(xy_st) &lt;- c(&quot;Delta_T = 1&quot;, &quot;Delta_T = 2&quot;, &quot;Delta_T = 5&quot;, &quot;Delta_T = 15&quot;, &quot;x&quot;) xy_a &lt;- as.data.frame(cbind(y_a,x)) colnames(xy_a) &lt;- c(&quot;a = 0.2&quot;, &quot;a = 0.4&quot;, &quot;a = 0.6&quot;, &quot;a = 0.8&quot;, &quot;x&quot;) xy_b &lt;- as.data.frame(cbind( y_b, x)) colnames(xy_b) &lt;- c(&quot;b = 0.1&quot;, &quot;b = 0.12&quot;, &quot;b = 0.16&quot;, &quot;b = 0.19&quot;, &quot;x&quot;) xy_sigma &lt;- as.data.frame(cbind(y_sigma, x)) colnames(xy_sigma) &lt;- c(&quot;s = 0.01&quot;, &quot;s = 0.03&quot;, &quot;s = 0.05&quot;, &quot;s = 0.1&quot;, &quot;x&quot;) st &lt;- xy_st %&gt;% ggplot(aes(x = x, y = `Delta_T = 1`, color = &quot;Delta_T = 1&quot;)) + geom_line() + geom_line(aes(x = xy_st$x , y = xy_st$`Delta_T = 2`, color = &quot;Delta_T = 2&quot;)) + geom_line(aes(x = xy_st$x , y = xy_st$`Delta_T = 5`, color = &quot;Delta_T = 5&quot;)) + geom_line(aes(x = xy_st$x , y = xy_st$`Delta_T = 15`, color = &quot;Delta_T = 15&quot;)) + ggtitle(&quot;CIR Model estimation - dependence on Time&quot;) + ylab(&quot;PDF&quot;) + xlab(&quot;Yield&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) a &lt;- xy_a %&gt;% ggplot(aes(x = x, y = `a = 0.2`, color = &quot;a = 0.2&quot;)) + geom_line() + geom_line(aes(x = xy_a$x , y = xy_a$`a = 0.4`, color = &quot;a = 0.4&quot;)) + geom_line(aes(x = xy_a$x , y = xy_a$`a = 0.6`, color = &quot;a = 0.6&quot;)) + geom_line(aes(x = xy_a$x , y = xy_a$`a = 0.8`, color = &quot;a = 0.8&quot;)) + ggtitle(&quot;CIR Model estimation - dependence on alpha&quot;) + ylab(&quot;PDF&quot;) + xlab(&quot;Yield&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) b &lt;- xy_b %&gt;% ggplot(aes(x = x, y = `b = 0.1`, color = &quot;b = 0.1&quot;)) + geom_line() + geom_line(aes(x = xy_b$x , y = xy_b$`b = 0.12`, color = &quot;b = 0.12&quot;)) + geom_line(aes(x = xy_b$x , y = xy_b$`b = 0.16`, color = &quot;b = 0.16&quot;)) + geom_line(aes(x = xy_b$x , y = xy_b$`b = 0.19`, color = &quot;b = 0.19&quot;)) + ggtitle(&quot;CIR Model estimation - dependence on beta&quot;) + ylab(&quot;PDF&quot;) + xlab(&quot;Yield&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) sig &lt;- xy_sigma %&gt;% ggplot(aes(x = x, y = `s = 0.01`, color = &quot;s = 0.01&quot;)) + geom_line() + geom_line(aes(x = xy_sigma$x , y = xy_sigma$`s = 0.03`, color = &quot;s = 0.03&quot;)) + geom_line(aes(x = xy_sigma$x , y = xy_sigma$`s = 0.05`, color = &quot;s = 0.05&quot;)) + geom_line(aes(x = xy_sigma$x , y = xy_sigma$`s = 0.1`, color = &quot;s = 0.1&quot;)) + ggtitle(&quot;CIR Model estimation - dependence on sigma&quot;) + ylab(&quot;PDF&quot;) + xlab(&quot;Yield&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) st + a + b + sig + plot_layout(ncol = 2, heights = c(5, 5)) Apart from the fact that we have the usual \\(\\chi^2\\) distribution present, we can observe the following: Increasing time again increases the spread Smaller alphas decline the spread beta values now change the mean as well as the density an increasing volatility increases the spread of the rate 5.6.2.2 Calculation of ZCB rates and yield curve Under the CIR model, the price of a zero coupon bond at time t is again: \\[ P_{t,s} = A_{t,s}e^{-B_{t,s}, r_t} \\] whereas: \\[ B_{t,s} = \\frac{2e_T}{(\\gamma + a)e_T + 2\\gamma} \\] \\[ A_{t,s} = \\frac{2\\gamma e^{\\gamma + a}(s-t)/2}{((\\gamma + a)e_T + 2\\gamma)^{2ab/\\sigma_r^2}} \\] and \\[ \\gamma = \\sqrt{a^2 + 2\\sigma^2} \\] \\[ e_T = e^{\\gamma (s-t) } - 1 \\] As we can see, the model parameters are now dependent on an additional parameter \\(\\gamma\\), which is a drift parameter for a poly volatility structure. We can again calculate the price according to the CIR model configuration as follows: # Inputs a &lt;- 0.1779 b &lt;- 0.0866 sigma_r &lt;- 0.02 r &lt;- 0.07 s &lt;- 10 t &lt;- 0 # Calculate Vasicek as function CIR_Spot &lt;- function(a, b, sigma_r, r, s, t, get_vola = F){ c_t &lt;- sqrt(a^2 + 2 * sigma_r^2) e_t &lt;- exp(c_t*(s-t)) - 1 B_t &lt;- (2*e_t)/((c_t + a)*e_t + 2*c_t) A_t &lt;- (2*c_t*exp(c_t + a)*(s-t)/2)/((c_t + a)*e_t + 2*c_t)^(2*a*b/sigma_r) P_t = A_t*exp(-B_t*r) R = ifelse((s-t) &gt; 0, -log(P_t) / (s-t), r) if (get_vola == F) { return(P_t) } else{ return(R) } } CIR_Spot(a, b, sigma_r, r, s, t, get_vola = F) ## [1] 0.5633079 CIR_Spot(a, b, sigma_r, r, s, t, get_vola = T) ## [1] 0.05739288 As we can see, the Price change of a ZCB in the CIR model is 0.5633079*Price of the actual ZCB with an underlying volatility of the zero yield of 0.05739288. Assuming a par value of 1000 US Dollars, we understand that the price of a 10-year ZCB is approximately 563.31 US Dollars. 5.7 Convertible Bonds Let’s now consider a different form of bond, the so-called convertible bond (CB). CBs are called like this because they have a conversion feature. That is, they can be converted from a debt to an equity instrument. . Convertible bonds are hybrid financial instruments with complex features, because they have characteristics of both debts and equities, and usually several equity options are embedded in this kind of contracts. The optimality of the conversion decision depends on equity price, future interest rate and default probability of the issuer. 5.7.1 Main Idea of CBs Due to their structure, they are often issued by companies with low credit ratings and high potential growth opportunities. These firms can lower their interest costs by giving the right to convert the bond into a specified number of shares. Accordingly, the argument for CBs is the following: Investors have the upside potential that they can acquire equity cheaply if the company takes off, while being protected with the cash flow payments of the bond The company benefits since the conversion inadvertently decreases the leverage of the company. However, one drawdown is the stock dilusion at conversion As such, any CB has three stages: In-the-Money, At-the-Money as well as Out-of-the-Money CBs. In-the-Money CBs are identical to equity. This happens if the conversion price is lower than the equity price At-the-Money CBs are both equity and debt. This happens if the conersion price is exactly the equity price Out-of-the-Money CBs are considered debt. This happens if the conversion price is higher than the equity price Consequently, any CB acts like an option, with the downside risk equal to the bond price (including cash flows and final value, discounted) as well as a potentially limitless upside risk increasing with the share price. Let’s quickly consider how we can price such a CB. In order to do so, we expect you to be familiar with the usual Black-Scholes Model for options pricing. Although we will only consider this in later chapters, we will still give a short introduction to the subject at hand. The main idea of pricing a CB is to price both the equity and debt part individually. 5.7.2 Individual constituents of CBs In order to be able to price CBs, we first need to consider what constitutes a CB and how its individual parts play along. Although there are a number of options for CBs, the one we are going to have a look at is a European CB. As with general options, this implies that execution is restricted to a specific date, rather than a time interval. Consequently, we can only execute this instrument at maturity. In order to value a CB, we need to gather information on three distinct areas: Bond Parameters, which defines the underlying parameters of the bond value, Valuation Process (usually Black-Scholes to calculate the option value of conversion) as well as Date Parameters, which define the date parameters of the bond. Bond Parameters includes the following quantities: B: The face amount of the bond M: The conversion ratio CS: The Credit Spread (Difference of bid and ask price) Id: Issue date of the bond mD: Maturity Date of the bond (their difference equals t: the time until maturity) e: Exercise option (either US or EU) Based on these parameters, thus, we can now specify the BS process to evaluate the option. Valuation Process includes the following quantities: S: The price of the underlying vola: Volatility of the share price DY: Dividend Yield rff: Risk-Free Rate You can already see if you every got acquainted with options that these parameters are basically what you would also have when evaluating normal options. So, now we have created the pricing process, but we need to consider the actual trading times and quantities. We do so with the Date Parameters: settlementDays: The settlement days of eligibility dayCounter: day counter convention (trading days each year - can have many values but usually 360) period: interest compounding interval businessDayConvention: usual business days in a trading week Based on these three parameters, we can create a CB. We deliberately chose this set-up because it follows exactly the set-up needed for the function ConvertibleFixedCouponBond of the RQuantLib package, which allows us to simply calculate Convertible Fixed Coupon Bonds, Convertible Floating Coupon Bonds, as well as Convertible Zero Coupon Bonds. Consequently, let’s consider a 10-year CB with 1000.- par value. The coupon is 5.785% with semi-annual interest payment. The execution right is par at maturity to 5 shares of common stock. We just assume the interest rate to be at 2%. Further, the Credit Spread of the bond is 1.5%. The price of the stock is 15.-, its volatility 13% and has zero dividend yield. # To create the function, we first need to consider the dates of interest today &lt;- as.Date(&quot;2021-12-05&quot;) params &lt;- list(tradeDate = today - 2, settleDate = today, dt = 0.25) # Then, we create a times argument which tells the function how many times they need to repeat the functions below times &lt;- seq(0, 10, 0.1) dividendYield &lt;- DiscountCurve(params, list(flat = 10e-6), times) riskFreeRate &lt;- DiscountCurve(params, list(flat = 0.02), times) # We need to set the parameters as a list-based object # First, the bond parameters with a maturity date of 1900 days in the future bondparams &lt;- list( exercise = &quot;eu&quot;, faceAmount = 1000, creditSpread = 0.015, conversionRatio = 5, issueDate = as.Date(today + 2), maturityDate = as.Date(today + 1900) ) # Then the B/S process. We need to define both risk free and Dividend Yield like this b/c we need to set it equal throughout time. process &lt;- list( underlying = 15, divYield = dividendYield, rff = riskFreeRate, volatility = 0.13 ) # Lastly, the date specification dateparams &lt;- list( settlementDays = 3, dayCounter = &quot;ActualActual&quot;, period = &quot;Semiannual&quot;, businessDayConvention = &quot;Unadjusted&quot; ) # Now, we can create the CB with fixed coupon payments by administering all the relevant information: CB &lt;- ConvertibleFixedCouponBond(bondparams, coupon = 0.05785, process, dateparams) CB ## Concise summary of valuation for ConvertibleFixedCouponBond ## Net present value : 115.4129 ## clean price : 115.37 ## dirty price : 115.41 ## accrued coupon : 0.047548 ## yield : 0.025804 ## cash flows : ## Date Amount ## 2022-02-17 1.1412 ## 2022-08-17 2.8687 ## 2023-02-17 2.9163 ## 2023-08-17 2.8687 ## 2024-02-17 2.9142 ## 2024-08-17 2.8767 ## 2025-02-17 2.9103 ## 2025-08-17 2.8687 ## 2026-02-17 2.9163 ## 2026-08-17 2.8687 ## 2027-02-17 2.9163 ## 2027-02-17 100.0000 As we can see, the NPV of the CB is 105.8078, with an accrued coupon of 0.0475 and a Yield of 0.045. This implies that the CB has a value of 105.8078 given the assumptions made and the distributional characteristics of the B/S bond structure. The accrued coupon is the coupon adjusted for the exercising option. Further, the yield is calculated through the reverse formula for the bond price. We can take one step further and assess how the price of the CB depends on certain parameters through the sapply function. # For vola res_cb_vola &lt;- sapply(seq(0.01,0.9,0.01), function(s) { process$volatility = s ConvertibleFixedCouponBond(bondparams, coupon = 0.05785, process, dateparams)$NPV }) # For price res_cb_price &lt;- sapply(seq(1,40,1), function(s) { process$underlying = s ConvertibleFixedCouponBond(bondparams, coupon = 0.05785, process, dateparams)$NPV }) # For rf res_cb_rf &lt;- sapply(seq(0.01, 0.1, 0.01), function(s) { s = DiscountCurve(params, list(flat = s), times) process$rff = s ConvertibleFixedCouponBond(bondparams, coupon = 0.05785, process, dateparams)$NPV }) # For bond params credit spread res_cb_cs &lt;- sapply(seq(0.01, 0.1, 0.005), function(s) { bondparams$creditSpread = s ConvertibleFixedCouponBond(bondparams, coupon = 0.05785, process, dateparams)$NPV }) # For conversion ratio res_cb_cr &lt;- sapply(seq(1, 20, 1), function(s) { bondparams$conversionRatio = s ConvertibleFixedCouponBond(bondparams, coupon = 0.05785, process, dateparams)$NPV }) Based on those values, we can easily plot the NPV. We just do this for one but we could potentially enlarge this to multiple options at once. vola_CB &lt;- as.data.frame(cbind(seq(0.01,0.9,0.01), res_cb_vola)) colnames(vola_CB) &lt;- c(&quot;Volatility of Stock&quot;, &quot;NPV CB&quot;) vola_CB %&gt;% ggplot(aes(x=`Volatility of Stock`, y = `NPV CB`)) + geom_line() + ggtitle(&quot;CB NPV value based on volatility&quot;) + ylab(&quot;Value NPV&quot;) + xlab(&quot;Volatility&quot;) + scale_fill_manual(values=c(&quot;goldenrod&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_color_manual(values=c(&quot;violetred4&quot;, &quot;khaki3&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + labs(fill=&#39;Swiss Government Bonds&#39;) + labs(color=&#39;Difference in Yield&#39;) "],["copulas.html", "Chapter 6 Copulas 6.1 What on earth are Copulas? 6.2 Dependence Concepts and Measures 6.3 Normal Mixture Copulas 6.4 Archimedean Copulas 6.5 Applying Copulas with actual data", " Chapter 6 Copulas In the next chapter, we are going to focus on Copulas. Copulas are used to define dependency concepts for modelling a random vector of financial risk factors. 6.1 What on earth are Copulas? Copulas are a framework for modeling multivariate data and defining multivariate models. ACopulas isolate the description of the dependence structure of a joint distribution function for a random vector of risk factors. This is handy because it allows us to separate the joint dependence of risk from the marginal, individual risk. As such, they allow us to differentiate and quantify between idiosyncratic and systemic risk. Especially, the have three distinct advantages: Copulas show us how to define a number of useful alternative dependence measures to the correlation measures Copulas express dependence on a quantile scale, as such they are better suited to explain the behaviour of extreme events Copulas allow us to follow a bottom-up risk approach, in which we can combine the marginal behaviour of individual risk to obtain a general, overall risk structure Copulas let us combine the marginal models with a variety of dependene models to understand the sensitivity of risk to the specification of dependence Copulas are easily simulated. Thus, one can use Monte Carlo simulations to study them As such, they characterise the co-dependence of components of multivariate distributions and can be combined with any set of univariate marginal distributions to form a full joint distribution. In essence, the primary financial use case for copula models is the management of portfolios that contain assets which have a strong correlation in their tails. That is, assets which may be mildly correlated in normal times but exhibit strong losses at the same time. Let’s first consider the basic properties of Copulas 6.1.1 Copula Properties We define multivariate distribution functions that are copulas as \\(C(\\textbf{u}) = C(u_1,\\dots,u_d)\\). Mapping C to obtain: \\(X:[0,1]^d \\rightarrow [0,1]\\), we define three properties: \\(C(u_1,\\dots,u_d) = 0\\) if \\(u_i = 0\\) for any i \\(C(1,\\dots, 1,u_i,1,\\dots,1) = u_i\\) for all i \\(\\in [1,\\dots,d]\\) For all \\((a_1,\\dots,a_d), (b_1,\\dots,b_d) \\in [0,1^d\\) with \\(a_i \\leq b_i\\) it holds that: \\[ \\sum_{i_1=1}^2\\sum_{i_d=1}^2(-1)^{i_1 + \\dots + i_d}C(u_{1i}, \\dots, u_{di_d}) \\geq 0 \\] whereas \\(u_{j1} = a_j\\) and \\(u_{j2} = b_j\\) for all j \\(\\in\\) [1,d]. This equality is also called rectangle inequality and it ensures that \\(P(a_1 \\leq U_1 \\leq b_1, \\dots, a_d \\leq U_d \\leq b_d)\\) is non-negative. Any function which fulfills all three characteristics is a copula. 6.1.1.1 Quantile Transformation Properties In order to work with Copulas, we need to become familiar with quantile transformations as well as generalised inverses. Let’s define the properties. First, we assume that F is a distribution function and \\(F^{-1}\\) is its general inverse. That is: \\(F^{-1}(u) = inf[x:F(x)\\geq u]\\). Quantile Transformation: If \\(U \\sim U(0,1)\\) has a standard uniform distribution, then \\(P(F^{-1}(U) \\leq x) = F(x)\\) Proability Transformation: If X has a df F, where F is a continuous univariate df, then \\(F(X) \\sim U(0,1)\\) The first proposition is the key to stochastic simulation. This is because if we can generate a uniform variable U and compute the inverse of a distribution function F, we are able to sample from the distribution function. This implies that we can transform risks with a particular continuous distribution function to have any other continuous distribution. 6.1.1.2 Sklar’s Theorem Sklar’s theorem shows the importance of Copulas to study multivariate distributions. By the theorem it follows that all multivariate distributions contain copulas and that copulas may be used in conjunction with univariate dfs to construct multivariate distributions. Sklar states that if we let F be a joint distribution function with margins \\(F_1, \\dots, F_d\\), then there exists a Copula such that, for all \\(x_1, \\dots, d_d\\) in \\(\\mathcal{R} = [-\\infty, \\infty]\\): \\[ F(x_1,\\dots,x_d) = C(F_1(x_1), \\dots, F_d(x_d)) \\] If the margins are continuous, then C is unique - otherwise C is uniquely determined on \\(Ran F_1 \\times \\dots \\times Ran F_d\\) whereas \\(Ran F_i\\) denotes the range of \\(F_i\\). This states that the distribution of any continuous random vector can be expressed using copula and the marginal distribution. This states that the joint DF can be decomposed into two parts: The Copula C (containing all information about dependencies among random vectors) The univariate, marginal DFs F (containing all information about the univariate, marginal distributions) It is easy to estimate the marginals of a random vector, so all we need is to estimate the copula function and this would lead to an estimator of the joint distribution. We can visually explain Sklar’s theorem as well as the invariance property below. Doing so, we will take a sample from a t Copula whereas we define the following properties: # Setup library(nvmix) set.seed(271) # Sample from a t copula n &lt;- 1000 d &lt;- 2 # Create correlation matrix rho &lt;- 0.65 P &lt;- matrix(rho, nrow = d, ncol = d) diag(P) &lt;- 1 # Define the DOF nu &lt;- 3.5 set.seed(1996) # Create the distribution X &lt;- rStudent(n, df = nu, scale = P) # Create n IID realizations from the corresponding t copula U &lt;- pt(X, df = nu) # Transformation of U to Exp(1) margins Y &lt;- qexp(U) As we elaborated, Sklar’s Theorem tells us that we can write the joint CDF in terms of the marginal CDFs and the Copula. Consequently, the combination both CDFs should provide us with the same dependence structure. Thus, we first, generate two RVs with a t distribution. They have the scale of a correlation matrix with \\(\\rho = 0.65\\). We can plot their distribution and show three points: X %&gt;% as.data.frame() %&gt;% ggplot(aes(x = V1, y = V2)) + geom_point(alpha = 0.3) + geom_point(data = X %&gt;% as.data.frame() %&gt;% filter(V1 == X[ind[&quot;A&quot;],1] &amp; V2 == X[ind[&quot;A&quot;],2]), color = &quot;violetred&quot;, size = 2.7) + geom_point(data = X %&gt;% as.data.frame() %&gt;% filter(V1 == X[ind[&quot;B&quot;],1] &amp; V2 == X[ind[&quot;B&quot;],2]), color = &quot;darkgoldenrod2&quot;, size = 2.7) + geom_point(data = X %&gt;% as.data.frame() %&gt;% filter(V1 == X[ind[&quot;C&quot;],1] &amp; V2 == X[ind[&quot;C&quot;],2]), color = &quot;cyan3&quot;, size = 2.7) + ggtitle(&quot;Bivariate t distribution values&quot;) + ylab(&quot;X2&quot;) + xlab(&quot;X1&quot;) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) This is the distribution of the bivariate t-values. We have highlighted three points to show make the theorem clear. We can now create the Copula of the bivariate t distribution with the command above. This will transform each RV based on the formula for the t-distribution Copula. In other words, we perform the first probability and quantile transformation to obtain different margins. Once we plot this, we obtain the following structure: U %&gt;% as.data.frame() %&gt;% ggplot(aes(x = V1, y = V2)) + geom_point(alpha = 0.3) + geom_point(data = U %&gt;% as.data.frame() %&gt;% filter(V1 == U[ind[&quot;A&quot;],1] &amp; V2 == U[ind[&quot;A&quot;],2]), color = &quot;violetred&quot;, size = 2.7) + geom_point(data = U %&gt;% as.data.frame() %&gt;% filter(V1 == U[ind[&quot;B&quot;],1] &amp; V2 == U[ind[&quot;B&quot;],2]), color = &quot;darkgoldenrod2&quot;, size = 2.7) + geom_point(data = U %&gt;% as.data.frame() %&gt;% filter(V1 == U[ind[&quot;C&quot;],1] &amp; V2 == U[ind[&quot;C&quot;],2]), color = &quot;cyan3&quot;, size = 2.7) + ggtitle(&quot;Copula of Bivariate t distribution values&quot;) + ylab(&quot;U2&quot;) + xlab(&quot;U1&quot;) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) Transformed to the Copula, we can now proof the first part of the proof of Sklar. This tells us that each distribution can be expressed with a copula. That is, the relative locations of the points is the same as before, which shows the first connection of the bivariate distribution and its Copula. Next, we can plot the second meta distribution (also known as t-meta distribution with Exp(1) margins) in order to set the margins according to the original t distribution and change the relative density to the original distribution. This is the second probability and quantile transformation. Y %&gt;% as.data.frame() %&gt;% ggplot(aes(x = V1, y = V2)) + geom_point(alpha = 0.3) + geom_point(data = Y %&gt;% as.data.frame() %&gt;% filter(V1 == Y[ind[&quot;A&quot;],1] &amp; V2 == Y[ind[&quot;A&quot;],2]), color = &quot;violetred&quot;, size = 2.7) + geom_point(data = Y %&gt;% as.data.frame() %&gt;% filter(V1 == Y[ind[&quot;B&quot;],1] &amp; V2 == Y[ind[&quot;B&quot;],2]), color = &quot;darkgoldenrod2&quot;, size = 2.7) + geom_point(data = Y %&gt;% as.data.frame() %&gt;% filter(V1 == Y[ind[&quot;C&quot;],1] &amp; V2 == Y[ind[&quot;C&quot;],2]), color = &quot;cyan3&quot;, size = 2.7) + ggtitle(&quot;t-meta distribution with Exp(1) margins&quot;) + ylab(&quot;Y2&quot;) + xlab(&quot;Y1&quot;) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) We see that the relative locations of all points remains the same still. As such, applying the probability and quantile transformations, we only change the marginal distributions, but not the probability, of the individual observations. This proves that the combination of a univariate CDF and a Copula follows results in an expression for a joint CDF. 6.1.1.3 Strictly increasing functions We can further state that if \\(X_1, \\dots, X_d\\) is a random vector with continuous margins and a copula C and \\(T_1, \\dots, T_d\\) are strictly increasing functions, then \\(T_1(X_1) \\dots, T_d(X_d)\\) also has Copulas. This states that Copulas are invariant to strictly increasing transformations of the component variables. This can be proved by obtaining: \\[ \\begin{align} C(u_1, \\dots, u_d) &amp;= P(X_1 \\leq x_1, \\dots, X_d \\leq x_d) \\\\ &amp;= P(X_1 \\leq F_1^{-1}(u_1), \\dots, X_d \\leq F_d^{-1}(u_d)) \\\\ &amp;= P(T_1(X_1) \\leq T_1 \\cdot F_1&#39;{-1}(u_1), \\dots, T_d(D_x) \\leq T_D \\cdot F_d^{-1}(u_d)) \\\\ &amp;= P(T_1(X_1) \\leq F_{T_1(X_1)}^{-1}(u_1), \\dots, T_d(D_x) \\leq F_{T_d(X_d)}^{-1}(u_d)) \\end{align} \\] 6.1.1.4 Fréchet Bounds Fréchet Bounds are important concepts for Copulas as they have important dependence interpretations. Let’s define these bounds. For each copula we have the bounds: \\[ max(\\sum_{i=1}^d u_i + 1 - d, 0) \\leq C(\\textbf{u}) \\leq \\min(u_1, \\dots, u_d) \\] 6.1.1.5 Meta Distribution of Copulas The Meta Distribution of Copulas essentially constructs multivariate distributions from univariate and copulas while it allows for arbitrary margins. As such, it constitutes the second part of the Sklar’s Theorem proof that we showed visually, where we stated the identity of the relative positions of three points and in the third plot extended the margins. 6.1.2 Motivation for Copulas Let’s quickly show why Copulas are handy tools to define the co-dependence structure of assets in risky scenarios. For that, we use a pre-defined two simulated datasets which have an X1 and X2 variable. a &lt;- X %&gt;% as.data.frame() %&gt;% ggplot(aes(x = V1, y = V2)) + geom_point(color = &quot;goldenrod&quot;, shape = 1) + ggtitle(&quot;Copula Distribution of X1 and X2&quot;) + ylab(&quot;X1&quot;) + xlab(&quot;X2&quot;) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) b &lt;- Y %&gt;% as.data.frame() %&gt;% ggplot(aes(x = V1, y = V2)) + geom_point(color = &quot;goldenrod&quot;, shape = 1) + ggtitle(&quot;Copula Distribution of Y1 and Y2&quot;) + ylab(&quot;Y1&quot;) + xlab(&quot;Y2&quot;) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) a + b + plot_layout(ncol = 1) We may now be inclined to ask for which data the dependence between both variables is larger. This is difficult to answer, as both have different scales and ranges. We can circumvent this by transforming the data using to have the same marginals. Doing so, we estimate the df by their empirical dfs (edfs) and then apply these marginal empirical dfs to the respective data columns. The function pobs() does this. U &lt;- pobs(X) U_d &lt;- pobs(Y) c &lt;- U %&gt;% as.data.frame() %&gt;% ggplot(aes(x = V1, y = V2)) + geom_point(color = &quot;goldenrod&quot;, shape = 1) + ggtitle(&quot;Copula Distribution of X1 and X2, scaled&quot;) + ylab(&quot;X1&quot;) + xlab(&quot;X2&quot;) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) d &lt;- U_d %&gt;% as.data.frame() %&gt;% ggplot(aes(x = V1, y = V2)) + geom_point(color = &quot;goldenrod&quot;, shape = 1) + ggtitle(&quot;Copula Distribution of Y1 and Y2, scaled&quot;) + ylab(&quot;Y1&quot;) + xlab(&quot;Y2&quot;) + scale_color_manual(name=&quot;Est. Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;dodgerblue4&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + scale_fill_manual(name=&quot;Actual Variables&quot;, values=c(&quot;lightgrey&quot;, &quot;lightgrey&quot;, &quot;lightsteelblue3&quot;, &quot;dodgerblue4&quot;, &quot;violetred4&quot;)) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.5, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) c + d + plot_layout(ncol = 1) Having transformed these distributions, we can see that both factors have the same dependence structure. As such, if we want to study the dependence independently of the margins, we need to study the distributions of random vectors with U(0,1) marginals, which are also called copulas. 6.1.3 Copula Examples In general, we can distinguish between three forms of Copulas. fundamental copulas implicit copulas (taken from well-known multivariate distributions using Sklar’s Theorem) explicit copulas We will introduce each copula and plot distinct plots to show you the behaviour of these copulas. Specially, we show Perspective plots Contour plots Wire frames Scatter Plots To show the joint dependent behaviour of each Copula. 6.1.3.1 Fundamental Copulas We define three Copulas in this section. 6.1.3.1.1 The independence copula The independence copula is given by: \\[ \\prod(u_1, \\dots, u_d) = \\prod_{i=1}^du_i \\] Let0s show their distributional properties. First, let’s look at the wire frame and level curves (the countour plot). ## Define the independence copula object indec &lt;- indepCopula() ## Copula (wire frame and level curves) a &lt;- wireframe2(indec, FUN = pCopula) b &lt;- contourplot2(indec, FUN = pCopula) a b Note that both show the same dependency structure, just once in 2D and once in 3D. Importantly, we understand that the value of the copula is zero if either \\(u_1\\) or \\(u_2\\) are zero. As such, we obtain that the value of the copula (the dependence measure) increases in an eliptic fashion in both parameters. As such, there is only a limited combination of both parameters. Consequently, the independence copula is a copula for two or more RVs which are largely independent. Now, let’s look at scatterplots to show the combination of up to five random variables which can be defined by the independence copula. Doing so, we define random variables with runif(). ## Scatter plots U &lt;- matrix(runif(n*d), ncol = 5) ## Plot the 2D scatterplot for independent data plot(U[,1:2], xlab = expression(U[1]), ylab = expression(U[2])) # d = 2 ## Plot the 3D scatterplot for independent data cloud2(U[,1:3], xlab = expression(U[1]), ylab = expression(U[2]), zlab = expression(U[3])) ## Plot different the 2D scatterplots for independent data pairs2(U) # d = 5 As we can see, the data has no dependence structure. If this is the case for multivariate data, then we know that it can be modelled by a independent copula. 6.1.3.1.2 Comonotonicity Copula The comonotonicity copula is the Fréchet upper bound copula, also given as: \\[ M(u_1, \\dots, u_d) = min(u_1, \\dots, u_d) \\] This copula is also the joint df of the random vector (U,…,U), whereas \\(U \\sim U(0,1)\\). If \\(X_1\\) and \\(X_2\\): have continuous dfs are perfectly positively dependent (\\(X_2\\) is almost surely a strict increasing function of \\(X_1\\)) then the Comonotonicity Copula is their Copula. ## Copulas (wire frame and level curves) n.grid &lt;- 26 # number of grid points u &lt;- seq(0, 1, length.out = n.grid) # subdivison points in each dimension grid &lt;- expand.grid(&quot;u[1]&quot; = u, &quot;u[2]&quot; = u) # build a grid # Get the upper bound Fréchet Copula W &lt;- pmax(grid[,1] + grid[,2] - 1, 0) # values of W on grid val.W &lt;- cbind(grid, &quot;W(u[1],u[2])&quot; = W) # append grid wireframe2(val.W) # wire frame plot of W contourplot2(val.W, xlim = 0:1, ylim = 0:1) # level curves of W Here, we can see the value distribution of the comonotonicity copula. The first non-zero value is at (0.5,0.5) and then increases monotonically. This is why it is called monotonicity copula and any data which is monotonically decreasing and continuous can be modelled accordingly. We can plot the 2-D Scatterplot (remember it is only defined for 2D). plot(cbind(U, 1-U), xlab = expression(U[1]), ylab = expression(U[2]), col = tblack(0.5)) # sample of W for d = 2 Here we can see the monotonically decreasing functional form of the data which includes the Copula above. 6.1.3.1.3 Countermonotonicity Copula The countermonotonicity copula is the two-dimensional Fre ́chet lower bound copula from: \\[ W(u_1, u_2) = max(u_1, + u_2 - 1,0) \\] This copula is the joint df of the random vector (U,1 − U), where \\(U \\sim U(0,1)\\). If \\(X_1\\) and \\(X_2\\): have continuous dfs are perfectly negatively dependent (\\(X_2\\) is almost surely a strict decreasing function of \\(X_1\\)) then the Countermonotonicity Copula is their Copula. M &lt;- pmin(grid[,1], grid[,2]) # values of M on grid val.M &lt;- cbind(grid, &quot;M(u[1],u[2])&quot; = M) # append grid wireframe2(val.M) # wire frame plot of M contourplot2(val.M, xlim = 0:1, ylim = 0:1) # level curves of M As opposed to the comonotonicity, we have here a more direct and stronger connection for the copula. That is, the max value incorporates that the copula value is sooner different from zero for a given correlation of the assets. Also, we can plot the distribution for strict monotonically increasing functions in more than a 2D scatterplot. ## Scatter plots U &lt;- runif(n) plot(cbind(U, U), xlab = expression(U[1]), ylab = expression(U[2]), col = tblack(0.5)) # sample of M for d = 2 cloud2(do.call(cbind, rep(list(U), 3)), col = tblack(0.05), # sample of M for d = 3 xlab = expression(U[1]), ylab = expression(U[2]), zlab = expression(U[3])) pairs2(do.call(cbind, rep(list(U), d)), col = tblack(0.05)) # sample of M for d = 5 Here, we can clearly see the distributional properties for which such a copula form is appropriate. 6.1.3.2 Implicit Copulas 6.1.3.2.1 Gauss Copula If \\(X \\sim N(\\mu, sigma^2)\\) is a multivariate normal random vector, then its copula is a so-called Gauss copula (or Gaussian copula). By definition, this is given as: \\[ C_P^{Ga}(\\textbf{u}) = \\Phi_P(\\phi^{-1}(u_1), \\dots, \\phi^{-1}(u_d)) \\] whereas \\(\\phi\\) denotes the standard univariate normal distribution and \\(\\Phi_P\\) is the joint density function. This Copula is automatically parametarised by the the d(d − 1)/2 parameters of the correlation matrix. The Gauss copula does not have a simple closed form, but can be expressed as an integral over the density of \\(\\textbf{X}\\). In two dimensions the Gauss copula can be thought of as a dependence structure that interpolates between perfect positive and negative dependence, where the parameter \\(\\rho\\) represents the strength of dependence. ## Define the normal copula object th &lt;- iTau(normalCopula(), tau = tau) nc &lt;- normalCopula(th) ## Copula (wire frame and level curves) wireframe2(nc, FUN = pCopula) contourplot2(nc, FUN = pCopula) We can also plot the densities of the copula ## Copula density (wire frame and level curves) wireframe2(nc, FUN = dCopula, delta = 0.02) contourplot2(nc, FUN = dCopula) and show the multidimensional structure ## Scatter plots nc. &lt;- normalCopula(th, dim = 5) U &lt;- rCopula(n, copula = nc.) plot(U[,1:2], xlab = expression(U[1]), ylab = expression(U[2])) # d = 2 cloud2(U[,1:3], # d = 3 xlab = expression(U[1]), ylab = expression(U[2]), zlab = expression(U[3])) pairs2(U, cex = 0.4, col = tblack(0.5)) # d = 5 6.1.3.2.2 t Copula We can extract a Copula from any other continuous distribution in the same way aas we did for the Gaussian Copula. In this case, we obtain the following parametric form: \\[ c_{v,P}^t(\\textbf{u}) = t_{v,P}(t_v^{-1}(u_1), \\dots, t_v^{-1}(u_d)) \\] whereas \\(t_v\\) is the distribution of a standard univariate t distribution with ν degrees of freedom, \\(t_{v,P)\\) is the joint distribution of \\(\\textbf{X}\\) and P is the correlation matrix. ## Define the t copula object nu &lt;- 3 # degrees of freedom th &lt;- iTau(tCopula(, df = nu), tau = tau) # correlation parameter tc &lt;- tCopula(th, df = nu) ## Copula (wire frame and level curves) ## Note: pCopula() is only available for integer degrees of freedom wireframe2(tc, FUN = pCopula) contourplot2(tc, FUN = pCopula) We can plot the densities and realise their larger dependence on the tails. ## Copula density (wire frame and level curves) wireframe2(tc, FUN = dCopula, delta = 0.02) contourplot2(tc, FUN = dCopula) Also, the scatter plots of the t-Copula are defined by this structure: ## Scatter plots tc. &lt;- tCopula(th, dim = 5, df = nu) U &lt;- rCopula(n, copula = tc.) plot(U[,1:2], xlab = expression(U[1]), ylab = expression(U[2])) # d = 2 cloud2(U[,1:3], # d = 3 xlab = expression(U[1]), ylab = expression(U[2]), zlab = expression(U[3])) pairs2(U, cex = 0.4, col = tblack(0.5)) # d = 5 As we can see, the t-Copula incorporates nicely the dependence structure on the individual tail distributions. 6.1.3.3 Explicit Copulas Explicit Copulas are Copulas which have a closed form solution. We will encounter four such Copulas. 6.1.3.3.1 Gumbel Copula The Gumbel Copula is a bivariate Copula with form: \\[ C_\\theta^{Gu} = exp(-((-\\ln u_1)^\\theta + (-\\ln u_2)^\\theta)^{1/\\theta}) \\] whereas \\(1 \\leq \\theta \\leq \\infty\\). The Copula has following specifications: If \\(\\theta = 1\\), we obtain the independence Copula If \\(\\theta \\rightarrow \\infty\\), we obtain the two-dimensional comonotonicity copula (= lower Fréchet Copula) As such, the Gumbel Copula is also a swing copula, which varies between independence and perfect dependence, with the parameter \\(\\theta\\) quantifying the strength of the dependence. Let’s look at the Gumbel Copula more closely. ## Define the Gumbel copula object th &lt;- iTau(gumbelCopula(), tau = tau) gc &lt;- gumbelCopula(th) ## Create the frame and contour plot ## Copula (wire frame and level curves) wireframe2(gc, FUN = pCopula) contourplot2(gc, FUN = pCopula) Compared to the Gaussian copula, the Gumble copula is slightly “wavier”, implying its contours are smoother. Given the logarithmic scales, this is to be expected. ## Copula density (wire frame and level curves) wireframe2(gc, FUN = dCopula, delta = 0.02) contourplot2(gc, FUN = dCopula) We can further see that the density of the Copula is far higher compared to the Gaussian Copula, but the highest densities have a lower concentration at both edges. ## Scatter plots gc. &lt;- gumbelCopula(th, dim = 5) U &lt;- rCopula(n, copula = gc.) plot(U[,1:2], xlab = expression(U[1]), ylab = expression(U[2])) # d = 2 cloud2(U[,1:3], # d = 3 xlab = expression(U[1]), ylab = expression(U[2]), zlab = expression(U[3])) pairs2(U, cex = 0.4, col = tblack(0.5)) # d = 5 The concentration in the edges of the two factors is especially prominent when looking at the scatterplot matrix. Also the multidimensional dependency plots show a continuous tail dependency which is strong for all components. Another interesting Copula is the survival Gumbel Compula. This is defined as: ## Scatter plot of a survival Gumbel copula pairs2(1-U, cex = 0.4, col = tblack(0.5)) A survival Gumbel Copula has even larger tail dependencies and can thus represent even better catastrophic events. 6.1.3.3.2 Clayton copula The Clayton Copula is also a bivariate Copula represented by: \\[ C_\\theta^{Cl}(u_1, u_2) = (u_1^{-\\theta} + u_2^{-\\theta} - 1)^{-1/\\theta} \\] Whereas \\(0 \\leq \\theta \\leq \\infty\\). Also for this Copula, we have that: If \\(\\theta = 1\\), we obtain the independence Copula If \\(\\theta \\rightarrow \\infty\\), we obtain the two-dimensional comonotonicity copula (= lower Fréchet Copula) Both Gumbel and Clayton belong to the Archimedean Copula Family. Let’s look at the Clayton Copula ## Define the Clayton copula object th &lt;- iTau(claytonCopula(), tau = 0.5) cc &lt;- claytonCopula(th) ## Copula (wire frame and level curves) wireframe2(cc, FUN = pCopula) contourplot2(cc, FUN = pCopula) As we can see, the Contour shows us that the ranges are smoother and their smoothness increases with increasing dependency. ## Copula density (wire frame and level curves) wireframe2(cc, FUN = dCopula, delta = 0.02) contourplot2(cc, FUN = dCopula) The density plot shows an even larger concentration of the Copula values in the extremes. As such, if both RVs have either very low or high values, we see a strong level of the Copula value. However, it quickly decays and is practically zero in central areas. ## Scatter plots cc. &lt;- claytonCopula(th, dim = 5) U &lt;- rCopula(n, copula = cc.) plot(U[,1:2], xlab = expression(U[1]), ylab = expression(U[2])) # d = 2 cloud2(U[,1:3], # d = 3 xlab = expression(U[1]), ylab = expression(U[2]), zlab = expression(U[3])) pairs2(U, cex = 0.4, col = tblack(0.5)) # d = 5 Interestingly enough, the Clayton copula is not symmetric in the sense that both extremes share the same concentration and thus you would see an elliptic form. Rather they appear to be fairly concentrated at the bottom and spread out, in the same way as you would see it in a heteroskedastictiy scenario. Let’s quickly make a comparison to show you the effects depending on \\(\\theta\\). For that we set the factor to 0.1 as well as 0.9 th1 &lt;- iTau(claytonCopula(), tau = 0.1) th9 &lt;- iTau(claytonCopula(), tau = 0.9) cc.1 &lt;- claytonCopula(th1, dim = 5) U1 &lt;- rCopula(n, copula = cc.1) cc.9 &lt;- claytonCopula(th9, dim = 5) U9 &lt;- rCopula(n, copula = cc.9) pairs2(U1, cex = 0.4, col = tblack(0.5)) # d = 5 pairs2(U9, cex = 0.4, col = tblack(0.5)) # d = 5 As we can see, the Copula greatly differentiates depending on \\(\\theta\\). As such, the larger \\(\\theta\\), the larger the comonotonicity. 6.1.3.4 Summary of the usual Copulas We give you a small overview of the most common copulas: The Normal, t, Gumbel and Clayton Copula. Therein, we show you again the (I) Copula distribution with fixed margins (II) Meta Copula distribution (= with arbitrary margins) (III) Meta Copula density with N(0,1) margin and the (IV) Contour plots # Create the data library(gridExtra) # Sample size and seed n &lt;- 500 set.seed(271) # Get the correlation parameters and Copulas ## Normal Copula gauss_cop &lt;- normalCopula(0.6) ## t Copula t_cop &lt;- tCopula(0.71) ## Gumbel Copula gumbel_cop &lt;- gumbelCopula(2) ## Clayton Copula clayton_cop &lt;- claytonCopula(2.2) # Generate Copula Data ## Normal Copula U_gauss &lt;- rCopula(n, copula = gauss_cop) ## t Copula U_t &lt;- rCopula(n, copula = t_cop) ## Gumbel Copula U_gumb &lt;- rCopula(n, copula = gumbel_cop) ## Clayton Copula U_clay &lt;- rCopula(n, copula = clayton_cop) # Generate the mapping to N(0,1) for Meta Copula X_gauss &lt;- qnorm(U_gauss) X_t &lt;- qnorm(U_t) X_gumb &lt;- qnorm(U_gumb) X_clay &lt;- qnorm(U_clay) # Generate Mapping for Density plots n.grid &lt;- 26 # number of grid points lim &lt;- c(-2.5, 2.5) s &lt;- seq(lim[1], lim[2], length.out = n.grid) grid &lt;- as.matrix(expand.grid(&quot;x[1]&quot; = s, &quot;x[2]&quot; = s)) V_gauss &lt;- cbind(grid, &quot;f(x[1],x[2])&quot; = dMetaCopulaN01(grid, copula = gauss_cop)) V_t &lt;- cbind(grid, &quot;f(x[1],x[2])&quot; = dMetaCopulaN01(grid, copula = t_cop)) V_gumb &lt;- cbind(grid, &quot;f(x[1],x[2])&quot; = dMetaCopulaN01(grid, copula = gumbel_cop)) V_clay &lt;- cbind(grid, &quot;f(x[1],x[2])&quot; = dMetaCopulaN01(grid, copula = clayton_cop)) zlim &lt;- c(0, max(val.n[,3], val.g[,3], val.c[,3], val.t[,3])) Based on the setting, we can now create the different plots. # Plot the copulas ## First, the Copula distribution with fixed margins opar &lt;- par(pty = &quot;s&quot;, mar = c(5.1, 4.1, 4.1, 2.1) - 1) lay &lt;- matrix(1:4, ncol = 2, byrow = TRUE) # layout matrix layout(lay) # layout plot(U_gauss[,1:2], xlab = expression(U_gauss[1]), ylab = expression(U_gauss[2])) ## t Copula plot(U_t[,1:2], xlab = expression(U_t[1]), ylab = expression(U_t[2])) ## Gumbel Copula plot(U_gumb[,1:2], xlab = expression(U_gumb[1]), ylab = expression(U_gumb[2])) ## Clayton Copula plot(U_clay[,1:2], xlab = expression(U_clay[1]), ylab = expression(U_clay[2])) ## Then, the Meta Copula distribution m &lt;- max(abs(X_gauss), abs(X_t), abs(X_gumb), abs(X_clay)) lim &lt;- c(-m, m) plot(X_gauss, xlim = lim, ylim = lim, # meta-Gauss xlab = expression(X[1]), ylab = expression(X[2]), cex = 0.4, main = &quot;Meta-Gauss sample&quot;) mtext(&quot;N(0,1) margins&quot;, side = 4, line = 0.25, adj = 0, cex = 0.7) plot(X_t, xlim = lim, ylim = lim, xlab = expression(X[1]), ylab = expression(X[2]), # meta-Gumbel cex = 0.4, main = &quot;Meta-t sample&quot;) mtext(&quot;N(0,1) margins&quot;, side = 4, line = 0.25, adj = 0, cex = 0.7) plot(X_gumb, xlim = lim, ylim = lim, # meta-Clayton xlab = expression(X[1]), ylab = expression(X[2]), cex = 0.4, main = &quot;Meta-Gumbel sample&quot;) mtext(&quot;N(0,1) margins&quot;, side = 4, line = 0.25, adj = 0, cex = 0.7) plot(X_clay, xlim = lim, ylim = lim, # meta-t_4 xlab = expression(X[1]), ylab = expression(X[2]), cex = 0.4, main = expression(bold(&quot;Meta-Clayton sample&quot;))) mtext(&quot;N(0,1) margins&quot;, side = 4, line = 0.25, adj = 0, cex = 0.7) par(opar) # restore graphical parameters ## Next, the Meta density plots scs &lt;- list(arrows = FALSE, col = &quot;black&quot;, cex = 0.6) # scale down ticks tcx &lt;- 0.95 # scale back titles w.n &lt;- wireframe2(V_gauss, xlim = lim, ylim = lim, zlim = zlim, zoom = zm, scales = scs, main = list(label = &quot;Meta-Gauss density with N(0,1) margins&quot;, cex = tcx)) w.g &lt;- wireframe2(V_t, xlim = lim, ylim = lim, zlim = zlim, zoom = zm, scales = scs, main = list(label = &quot;Meta-t density with N(0,1) margins&quot;, cex = tcx)) w.c &lt;- wireframe2(V_gumb, xlim = lim, ylim = lim, zlim = zlim, zoom = zm, scales = scs, main = list(label = &quot;Meta-Clayton density with N(0,1) margins&quot;, cex = tcx)) w.t &lt;- wireframe2(V_clay, xlim = lim, ylim = lim, zlim = zlim, zoom = zm, scales = scs, main = list(label = expression(bold(&quot;Meta-Gumbel density with N(0,1) margins&quot;)), cex = tcx)) grid.arrange(w.n, w.g, w.c, w.t, ncol = 2) ## Lastly plot the contour plots tcx &lt;- 0.9 c.n &lt;- contourplot2(V_gauss, xlim = lim, ylim = lim, main = list(label = &quot;Meta-Gauss contours with N(0,1) margins&quot;, cex = tcx)) c.g &lt;- contourplot2(V_t, xlim = lim, ylim = lim, main = list(label = &quot;Meta-Gumbel contours with N(0,1) margins&quot;, cex = tcx)) c.c &lt;- contourplot2(V_gumb, xlim = lim, ylim = lim, main = list(label = &quot;Meta-Clayton contours with N(0,1) margins&quot;, cex = tcx)) c.t &lt;- contourplot2(V_clay, xlim = lim, ylim = lim, main = list(label = expression(bold(&quot;Meta-&quot;*italic(t)[4]~&quot;contours with N(0,1) margins&quot;)), cex = tcx)) grid.arrange(c.n, c.g, c.c, c.t, ncol = 2) 6.2 Dependence Concepts and Measures In this subchapter, we will introduce the concepts of perfect dependence, both positive and negative. Later on, we will focus on the three most common forms of dependence measures: Pearson linear correlation Rank correlation Coefficients of tail dependence All these dependence measures provide us with a scalar to quantify the strength of the co-dependence of two RVs. 6.2.1 Perfect Dependence We already defined the concepts of perfect negative and positive dependence when looking at the fundamental copulas. Therein, we saw the terms of comonotonicity and countermonotonicity. Let’s elaborate these two terms a little. comonotonicity are quasi undiversifiable RVs. Mathematically speaking, this means that the RVs \\(X_1, \\dots, X_d\\) are comonotonic if they have as a Copula the Fréchet upper bound \\(min(u_1, \\dots, u_d)\\). In other words, we can show that comonotonic RVs are monotonically increasing functions of a single RV. As such, we can propose that \\(X_1, \\dots, X_d\\) are comonotonic if and only if \\[ (X_1, \\dots, X_d) =^d (\\nu_1(Z), \\dots, \\nu_d(Z)) \\] for some RV Z and increasing functions \\(\\nu_i\\). An important result of comonotonicity is the additivity of the quantile functions. This concept applies to distortion risk measures, which we use to compute the Expected Shortfall (ES) of a distribution. As such we propose the following: Let \\(0 &lt; \\alpha &lt; 1\\) and \\(X_1, \\dots, X_d\\) be comonotonic RVs with distribution functions \\(F_1, \\dots, F_d\\). Then: \\[ F^{-1}_{X_1+\\dots+X_d}(\\alpha) = F^{-1}_1(\\alpha) + \\dots + F_d^{-1}(\\alpha) \\] With the same principles, we can also define the countermonotonicity. Two RVs are countermonotonic if their copula is the lower Fréchet Bound \\(max(u_1 + u_2 -1,0)\\). As such, we can propose the following: \\(_1\\) and \\(X_2\\) are countermonotonic if and only if: \\[ (X_1, X_2) =^d (\\nu_1(Z), \\nu_2(Z)) \\] for some RV Z with \\(\\nu_1\\) increasing and \\(\\nu_2\\) decreasing, or vice versa. The concept of countermonotonicity does not generalize to higher dimensions. The Frechet lower bound is not itself a copula for d &gt; 2 since it is not a proper distribution function. 6.2.2 Dependence Measures When we look at dependence measures, we most directly imply linear correlation measures. These are the most common tools used in finance. However, this dependence measure has certain important pitfalls when it comes to finance. This is because the concept of correlation is only really applicable in the concept of multivariate normal models. The reason for this is that only multivariate normal distributions are fully described by the first two moments. That is, the mean vector and the covariance matrix. Basically, the Copula from such models depends solely on the correlation matrix and the characteristics function. Because of that, the correlation matrix has a parametric role in such models, which it does not have in more general multivariate models. Based on this, using linear correlation measures has decisive pitfalls which we need to address once we are in non-multivariate Gaussian distributions. And the concepts of Copulas can help us to show these pitfalls. 6.2.2.1 Linear Correlation The correlation \\(\\rho(X_1,X_2)\\) between two RVs is a form of linear dependence taking values from -1 to 1. Further, linear dependence is invariant under strictly increasing linear transformations, which implies that: \\[ \\rho(\\alpha_1 + \\beta_1X_1, \\alpha_2 + \\beta_2X_2) = \\rho(X_1,X_2) \\] Furthermore, we need to stress that correlation is only defined if the variances of the RVs are finite. This restriction to finite-variance models is not ideal for a dependence measure and can cause problems when we work with heavy-tailed distributions. Based on these properties, let’s now see certain important fallacies of linear correlation. We believe these fallacies are worth highlighting because they illustrate the dangers of attempting to construct multivariate risk models starting from marginal distributions and estimates of the correlations between risks. 6.2.2.1.1 Fallacy 1: The marginal distributions and pairwise correlations of a random vector determine its joint distribution This is not the case. If we have two RVs \\(X_1, X_2\\) that have continuous marginal distributions \\(F_1, F_2\\) and joint CDF \\(C(F_1(x_1), F_2(x_2))\\) (=Sklar) for some Copula C with a correlation of \\(\\rho\\), then it will be possible to construct an alternative copula \\(C_2 \\neq C\\) and to construct a random vector with the same CDF as before such that we will again obtain as a correlation factor \\(\\rho\\). We can make an example below. Doing so, assum that we have two RVs with profits and losses on two portfolios. Suppose we are given the information that both risks have standard normal distributions and that their correlation is 0. We construct two random vectors that are consistent with this information. Model 1: \\(X\\sim N_2(0, I_2)\\) Model 2: P(V=1) = P(V=-1) = 0.5 \\(\\rightarrow (Y_1, Y_2) = (X_1, VX_1)\\) Based on the two apparently different models which still have the same standard normal distribution properties, we can show that the correlsation of the risk does not depend on their copula. ## Simple example with same margins, rho = 0, but (obviously) different models n &lt;- 1000 set.seed(271) Z &lt;- rnorm(n) U &lt;- runif(n) V &lt;- rep(1, n) V[U &lt; 1/2] &lt;- -1 # =&gt; V in {-1,1}, each with probability 1/2 X &lt;- cbind(Z, Z*V) # convex combination of W and M (each with prob. 1/2 =&gt; rho = 0) cor(X)[2,1] ## [1] -0.09244841 Y &lt;- matrix(rnorm(n * 2), ncol = 2) # independent N(0,1) (=&gt; rho = 0) cor(Y)[2,1] ## [1] -0.03559857 ## Plots plot(X, xlab = expression(X[1]), ylab = expression(X[2])) plot(Y, xlab = expression(Y[1]), ylab = expression(Y[2])) 6.2.2.1.2 or given univariate distributions \\(F_1\\) and \\(F_2\\) and any correlation \\(\\rho\\) in [-1,1] it is always possible to construct a joint distribution F with margins \\(F_1, F_2\\) and correlation \\(\\rho\\). This is only true in the case that \\(F_1\\) and \\(F_2\\) are margins of multivariate distributions. We can form a strict subset of [-1,1] for the correlation properties of two RVs when we have different distribution. This is known as Attainable Correlations. This can be shown by the following theorem. For that, assume that we have \\(X_1, X_2\\) that has joint distribution F and marginal distributions \\(F_1, F_2\\). Then, the covariance of \\(X_1, X_2\\), when finite, is given by: \\[ cov(X_1, X_2) = \\int^\\infty_{-\\infty}\\int^\\infty_{-\\infty}(F(x_1, x_2) - F_1(x_1)F_2(x_2))dx_1dx_2 \\] Consequently, it is not defined for the entire span of \\([-\\infty, \\infts]\\) if we deviate from multivariate normal distribution. In essence, attainable correlation is a fact which theorem stating that two RVs can only attain a finite and limited correlation between [-1,1], but never actually reach the entire possible spectrum, unless they follow a multivariate normal distribution. As such, the possible range of correlations: depend on the distribution depend on the type of each RV depend on the variance of the RV More precisely, they state: The attainable correlations form a closed interval with \\(\\rho_\\min &lt; 0 &lt; \\rho_\\max\\) The minimum correlation is only possible for countermonotonic RVs and the maximum only for comonotonic RVs \\(\\rho =-1\\) or \\(\\rho = 1\\) only if both RVs are of the same type Let’s look at lognormal distributions as a simple example. Let’s suppose that \\(X_1 \\sim N(0,1\\) and \\(X_2 \\sim N(0, \\sigma^2)\\). For \\(\\sigma \\neq 1\\), both RVs have a different type, so we will never reach the maximum or minimum correlation value. If both RVs are comonotonic, then we know that \\((X_1, X_2) =^d (e^Z, e^{\\sigma Z})\\). As such, we obtain \\(\\rho_\\min = \\rho(e^Z, e^{\\sigma Z})\\) and \\(\\rho_\\max = \\rho(e^Z, e^{-\\sigma Z})\\). We can analytically insert this relation into the RVs and obtain minimum and maximum values for the log-normal variable: \\[ \\rho_\\min = \\frac{e^{-\\sigma} - 1}{\\sqrt{(e-1)(e^{\\sigma^2} - 1)}} \\] \\[ \\rho_\\max = \\frac{e^{\\sigma} - 1}{\\sqrt{(e-1)(e^{\\sigma^2} - 1)}} \\] Consequently, we can see that the bound of the correlations depends on the variance of both RVs. 6.2.2.2 Rank Correlation Rank correlations are simple scalar measures of dependence that depend only on the copula of a bivariate distribution and not on the marginal distributions, unlike linear correlation, which depends on both. To quantify these correlations, we only need to know the ordering of the sample for each variable of interest and not the actual numerical values. The main practical reason for looking at rank correlations is that they can be used to calibrate copulas to empirical data. There are two main varieties of rank correlation, Kendall’s and Spearman’s, and both can be understood as a measure of concordance for bivariate random vectors. Let’s quickly define this term. Two points defined by (\\(x_1, x_2\\)) and \\((y_1,y_2)\\) are concordant if \\((x_1, x_2)(y_1,y_2) &gt; 0\\). In other words, they are concordant if the ranking of \\(x_1\\) relative to \\(y_1\\) is the same as for \\(x_2\\) and \\(y_2\\). Similarily, they are discordant if \\((x_1, x_2)(y_1,y_2) &lt; 0\\). 6.2.2.2.1 Kendall’s Tau Based on this, we can define the term Kendall’s Tau. Kendall’s tau is the probability of a concordant pair minus the probability of a discordant pair. Therefore, it is given by: \\[ \\rho_\\tau(X_1, X_2) = E(sign((x_1-y_1)(x_2-y_2))) \\] In other word,s if \\(x_1\\) tends to increase with \\(x_2\\), then we expect the probability of concordance to be high relative to the probability of discordance, and vice versa. Further, we can show that Kendall’s tau is invariant to monotonically increasing transformations. If g and h are the marginal CDFs of \\(X_1\\) and \\(X_2\\) then \\(\\rho\\tau(g(X_1), h(X_2))\\) value of Kendall’s tau for a pair of random variables distributed according to the copula of \\(C(X_1, X_2)\\). This shows that Kendall’s tau depends only on the *copula of a bivariate random vector. 6.2.2.2.2 Spearman’s rho For a sample, Spearman’s correlation coefficient is simply the usual Pearson correlation calculated from the marginal ranks of the data. Consequently, the coefficient for a bivariate random vector is denoted as \\(\\rho_s(X_1, X_2)\\) and is defined as: \\[ \\rho_s(X_1, X_2) = corr(F_{X_1}(X_1), F_{X_2}(X_2)) \\] which is the Pearson coefficient. Since the joint CDF of \\((F_{X_1}(X_1), F_{X_2}(X_2)\\) is the Copula of \\((X_1, X_2)\\), rho also depends only on the copula function. 6.2.2.3 Tail Dependence Tail dependence measures association between the extreme values of two random variables and depends only on their copula. The first definition is lower tail dependence. We look at these measures to quantify the strength of dependence in the tails of a bivariate distribution. In the case of upper (lower) tail dependence we consider the probability that \\(X_2\\) exceeds its q-quantile (1-q quantile), given that \\(X_1\\) exceeds its q-quantile (1-q quantile). Then we consider the limit as q approaches one. For instance, we obtain the coefficient of lower tail dependence, which is denoted by \\(\\lambda_l\\) and is defined as: \\[ \\begin{align} \\lambda_l &amp;= \\lim_{q \\downarrow 0}P(X_2 \\leq F_{X_2}^{-1}(q)|X_1 \\leq F_{X_1}^{-1}(q))\\\\ &amp;= \\lim_{q \\downarrow 0}\\frac{P(X_2 \\leq F_{X_2}^{-1}(q), X_1 \\leq F_{X_1}^{-1}(q))}{P(X_1 \\leq F_{X_1}^{-1}(q))} \\\\ &amp;= \\lim_{q \\downarrow 0}\\frac{P(X_2 F_{X_2}\\leq q, X_1F_{X_1} \\leq q}{P(X_1F_{X_1} \\leq q)} \\\\ &amp;= \\lim_{q \\downarrow 0} \\frac{C_x(q,q)}{q} \\end{align} \\] We simply derive the functional value of the lower tail risk as the probability that \\(X_2\\) is less than or equal its q’th quantile, conditional on that \\(X_1\\) is less than or equal its q’th quantile. We then transform this to a conditional probability statement and finally figure that the numerator is, by definition, the copula, as it gives us a quantile value for the specific RVs, conditional on the other RV. The coefficient of upper tail dependence can be derived accordingly. It is given by: \\[ \\begin{align} \\lambda_u &amp;= \\lim_{q \\uparrow 1} \\frac{P(X_2F_{X_2} \\geq q, P(X_1F_{X_1} \\geq q)}{P(X_1F_{X_1} \\geq q)} \\\\ &amp;= \\lim_{q \\uparrow 1} \\frac{\\hat C_x(1-q, 1-q)}{1-q} \\end{align} \\] whereas \\(\\hat C\\) is the survival copula of C. 6.3 Normal Mixture Copulas We understand that each multivariate distribution with continuous marginal distributions contains a unique copula. Instead of a multivariate normal distribution, we have also encountered different multivariate distributions, which we labelled as multivariate mixture distributions. As such, we can also create copulas from these distributions. Whenever we fit normal mixture distributions to multivariate returns or use them in multivariate time-series models, we use normal mixture copulas. 6.3.1 Tail Dependence The tail dependence coefficients of normal mixture copulas the importance of a joint quantile exceedance probability. That is, the probability that d returns exceed a certain threshold at one given trading period. In other words, it can show us in how many trading periods we can expect to obtain such an event on average. Why do we consider mixture models here? Remember, we showed that the multivariate normal distribution is not likely to accurately reflect security returns in the tails. As such, we used different (symmetric and skewed) multivariate distributions which better suit the requirement. Some of the models considered were called Normal Mixture Models. Since Copulas define the conditional likelihood of two RVs exceeding a given threshold, and since these models have also Copulas, we may assume that these Copulas are better suited to quantify said probability of exceeding a given threshold. Since we have reasoned the use of these copulas, we can define the coefficient of tail dependence for normal mixture copulas. This is given by: \\[ \\lambda = lim_{q \\downarrow 0} \\frac{dC(q,q)}{dq} = lim_{q \\downarrow 0} P(U_2 \\leq q | U_1 = q) + lim_{q \\downarrow 0} P(U_1 \\leq q | U_2 = q) = 2 lim_{q \\downarrow 0} P(U_2 \\leq q | U_1 = q) \\] Let’s consider now two important normal mixture copulas: The Gaussian and the t Copula. 6.3.1.1 asymptotic independence of Gauss Copula and asymptotic dependence of t Copula We can show that the Gaussian Copula is asymptotically independent in the tails. This is theoretically intuitive, as we state that the Gaussian Copula does not assume tail dependence,long as \\(\\rho &lt; 1\\). Regardless of how high a correlation we choose, if we go far enough into the tail, extreme events appear to occur independently in each margin. We can show this by the following definitions. We let \\((X_1, X_2) = m(\\phi^{-1}(U_1),\\phi^{-1}(U_2))\\). As such, \\(X_1, X_2\\) has a bivariate normal distribution with standard margins and correlation \\(\\rho\\). Then we have: \\[ \\begin{align} \\lambda &amp;= \\lim_{x \\rightarrow -\\infty} P(X_2 \\leq x| X_1 = x) \\end{align} \\] Using that \\(X_2|X_1 = x \\sim N(\\rho x, 1- \\rho^2)\\), we can calculate: \\[ \\lambda = 2 \\lim_{x \\rightarrow \\infty \\phi(x\\sqrt{1-\\rho})/\\sqrt{1-\\rho}} = 0 \\] And, as such, there is no tail dependence even for increasing \\(\\rho\\). As opposed we can show that the t Copula with a univariate t distribution and \\(\\nu\\) DOF, has the following tail dependence: \\[ \\lambda = 2t_{\\nu+1}(-\\sqrt{(\\nu + 1)(1-\\rho)}{1+\\rho}) \\] We deliberately only quantify the t and Gauss here because it can be shown that most other normal mixture model copulas have the same tail properties as the Gaussian (such as hyperbolic or NIG). That is, they are asymptotically independent in the tails. Interestingly, we can claim the following: The decision whether a normal mixture variable has asymptotic tail dependence depends on the distribution of W. If W has a distribution with a power tail, then we get tail dependence, otherwise we get asymptotic independence. # Let&#39;s compute the tail probabilities. That is, the probability that, at any given day, the value of each individual asset will be below its 1% quantile value of its underlying distribution. Since we model the common part of the marginal continuous distributions of an overall joint distribution with Copulas, we can use them to compare t and normal distributions. ## Make the set up to comparison d &lt;- 2:80 u &lt;- 0.99 # quantile to exceed rho &lt;- c(0.9, 0.6, 0.4) nu &lt;- c(3,5,9, 10000) # DOF len &lt;- length(rho) * length(nu) ## Create tail probs tail_probs &lt;- matrix(, nrow = length(d), ncol = len + 1, dimnames = list(rownames = seq_along(d), colnames = c(&quot;d&quot;, &quot;rho=0.9-nu=3&quot;, &quot;rho=0.9-nu=5&quot;, &quot;rho=0.9-nu=9&quot;, &quot;rho=0.9-nu=10000&quot;, &quot;rho=0.6-nu=3&quot;, &quot;rho=0.6-nu=5&quot;, &quot;rho=0.6-nu=9&quot;, &quot;rho=0.6-nu=10000&quot;, &quot;rho=0.3-nu=3&quot;, &quot;rho=0.3-nu=5&quot;, &quot;rho=0.3-nu=9&quot;, &quot;rho=0.3-nu=10000&quot;))) tail_probs[,1] &lt;- d expr &lt;- vector(&quot;expression&quot;, len) # vector of expressions ltys &lt;- numeric(len) # line types cols &lt;- numeric(len) # colors ## Now creation of double loop in order to fill the matrix with the different values for(i in seq_along(rho)) { # rho for(j in seq_along(nu)) { # degrees of freedom k &lt;- length(nu)*(i-1)+j tail_probs &lt;- cbind(tail_probs, rep(NA, length(d))) for(l in seq_along(d)) { # dimension ## Create the copula cop &lt;- ellipCopula(&quot;t&quot;, param=rho[i], dim=d[l], df=nu[j]) ## Evaluate P(U_1 &gt; u, ..., U_d &gt; u) = P(U_1 &lt;= 1-u, ..., U_d &lt;= 1-u) tail_probs[l,k+1] &lt;- pCopula(rep(1-u, d[l]), copula=cop) } ## Create plot information expr[k] &lt;- as.expression( substitute(group(&quot;(&quot;, list(rho, nu), &quot;)&quot;)==group(&quot;(&quot;, list(r., n.), &quot;)&quot;), list(r.=rho[i], n.=if(nu[j]==10000) bquote(infinity) else nu[j]))) ltys[k] &lt;- length(rho)-i+1 cols[k] &lt;- col[j] } } ## Standardize w.r.t. Gauss case: tail probabilities as factors in comparison to Gauss case tail_probs_fact &lt;- tail_probs tail_probs_fact[,2:5] &lt;- tail_probs_fact[,2:5]/tail_probs_fact[,5] tail_probs_fact[,6:9] &lt;- tail_probs_fact[,6:9]/tail_probs_fact[,9] tail_probs_fact[,10:13] &lt;- tail_probs_fact[,10:13]/tail_probs_fact[,13] ## Plot tail_probs_fact %&gt;% as.data.frame() %&gt;% select(2:13) %&gt;% gather(key = &quot;key&quot;, value = &quot;value&quot;) %&gt;% mutate(d = rep(seq(1,79,1), 12)) %&gt;% ggplot(aes(x=d, y = value, color = key)) + geom_line() + scale_y_log10() + # Log scale ggtitle(&quot;Tail probability of t standardized by Gaussian distribution&quot;) + ylab(~log(P(U[1]&gt;u,..,U[d]&gt;u))) + xlab(&quot;Assets in Portfolio&quot;) + theme(plot.title= element_text(size=14, color=&quot;grey26&quot;, hjust=0.1, lineheight=1.2, margin=margin(0,15,15,15)), panel.background = element_rect(fill=&quot;#f7f7f7&quot;), panel.grid.major.y = element_line(size = 0.5, linetype = &quot;solid&quot;, color = &quot;grey&quot;), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), plot.background = element_rect(fill=&quot;#f7f7f7&quot;, color = &quot;#f7f7f7&quot;), axis.title.x = element_text(color=&quot;grey26&quot;, size=12), axis.title.y = element_text(color=&quot;grey26&quot;, size=12), axis.line = element_line(color = &quot;black&quot;)) + theme(plot.margin = margin(0.3,0.3, 0.3,0.3, &quot;cm&quot;)) The above example shows a plot with dimensions of the Copula on the x-axis and the tail probability standardised by Gauss. In essence, this table states us how many times more likely a tail probability is given different combinations of the t distribution, compared to the Copula indicated by the Gaussian distribution. In order to interpret this plot, let us assume that we have daily stock returns. Let’s now take that \\(\\rho = 0.6\\) and \\(\\nu = 5\\) as well as that d = 20. In this case, we assume that the correlation between each asset is 0.6 and we have 5 DOF and we have 10 securities. Based on this, the table tells us the following: When we assume that each return follows this t distribution configuration, we assign an approximately 10! times higher likelihood to the event that on any day all returns are below the 1% quantiles of their respective distributions, compared to modelling the returns as multivariate Gaussian. This shows us that t Copulas are far better equipped to measure tail risk, and the difference can be dramatic! As such, having Copulas for t distributions are more likely to better measure or estimate joint tail risks (respectively, the part of the distribution which represents the joint risk component). 6.4 Archimedean Copulas Besides Clayton and Gumbel, there are two further Copulas which are frequently used in credit risk management. In general, this family has proved useful for modelling portfolio credit risk. 6.4.1 Frank Copula and General Clayton Copula The first copula is the Frank copula. It is defined as: \\[ C_\\theta^{Fr}(u_1, u_2) = -\\frac{1}{\\theta}\\ln(1 + \\frac{(e^{-\\theta u_1}-1)(e^{\\theta u_2}-1)}{e^{-\\theta}-1}) \\] The second is called the General Clayton Copula. It is defined as: \\[ C_{\\theta, \\delta}^{GC}(u_1, u_2) = (((u_1^{-\\theta}-1)^\\delta + (u_2^{-\\delta} - 1)^\\delta)^{1/\\delta} + 1)^{-1/\\delta} \\] We can show that, if \\(\\theta\\) is within the ranges specified for each Copula, then all four examples of the Copulas have the form: \\[ C(u_1, u_2) = \\vega(\\vega^{-1}(u_1)+\\vega^{-1}(u_2)) \\] where \\(\\vega: [0,\\infty) \\rightarrow [0,1]\\) is a decreasing and continuous function with \\(\\vega(0) = 1\\) and the limit at 0. As such this is a function that is convex. This \\(\\vega\\) function is also known as th generator function. We need these generators in order to calculate the Kendall’s rank correlations pf the copulas by taking the inverse of each generator. We will provide you with a summary table which shows the generators, permissible parameter values and limiting special cases for the Archimedan copulas. Further, we will also provide you with Kendall’s rank correlations and coefficients of tail dependence for the copulas, in order to understand the critical values for calculating the risk correlation properties of these copulas. Figure 1: Archimedean Copulas: Table summarizing the generators, permissible parameter values and limiting special cases Figure 2: Kendall’s rank correlations and coefficients of tail dependence for the copulas 6.5 Applying Copulas with actual data We have now had a pretty extensive discussion on copulas and their advantages. We have shown their theoretical properties and their differences as well as given examples for distributions of multivariate data depending on different copulas. Now, it is time to finally set them into action for real-life data. For that we will look at financial returns of the big four companies. We also make the usual assumptions to form copulas. That is, we assume that X has a continuous distribution function with continuous margins F, such that, under sklar, we can represent \\(F(x) = C(F_1(x_1), \\dots, F_d(x_d))\\). We now attempt to find a model which can describe both the marginal behaviour of its individual constituents as well as the dependence structure of the underlying multivariate RV. We can separate both parts by using copulas. In order to do so, we need to estimate the factor \\(\\theta\\) from the Copula \\(C_\\theta\\). Doing so, we will use the Rank correlation coefficients as well as the Maximum Likelihood Method which we discussed in Chapter 4. 6.5.1 Estimating Copulas: Method-of-Moments using Rank Correlations Depending on which particular copula we want to fit, it may be easier to use empirical estimates of either Spearman’s or Kendall’s rank correlation to infer an estimate for the copula parameter. As such, we can either use sample rank correlation in order to calibrate the Copulas under consideration. 6.5.1.1 Spearman’s Rho Note that we stated we can estimate \\(\\rho_S(X_i, X_j)\\) by calculating the usual correlation coefficient for the pseudo-observations \\(F_{i,n}(X_{t,i), F_{j,n}(X_{t,j))\\). Since this is equal to the Spearman rank correlation coefficient when there are no tied observations, we estimate \\(\\rho_S(X_i, X_j)\\) by calculating the Spearman’s rank correlation coefficient. This rank is just the position of \\(X_{i,t}\\) in the ordered sample of observations. In the case of tied observations, we just assign them the average rank we would have if there were no tied observations. E.g.: [2, 3, 2, 1] would have ranks [2.5, 4, 2.5, 1]. Based on this, we obtain the usual formula for the Spearman Rank correlation coefficient. The copula calibrates are then just the ranks of the observations. 6.5.1.2 Kendall’s Tau Another way to calibrate the copulas is with the same idea but under usage of a different rank correlation coefficient: Kendall’s Tau. This will provide you with the same results, but with a different methodology, for finding the ranks of the distribution. Again, we can then collect pairwise Kendall’s rank correlation coefficients in a matrix. 6.5.2 Estimating Copulas: Maximum Likelihood Estimation (MLE) We can also estimate copulas through MLE. We usually require besides the copula estimate also the estimates of the margins to create a full multivariate model, since we need margins to estimate copulas. We usually do this by following two steps: Forming a Pseudo-sample from the Copula to estimate the margins Estimating the Copulas from the Pseudo-sample 6.5.2.1 Forming a Pseudo-sample from the Copula for Estimation of the Margins First, we need to create pseudo observations. That is due to the Sklar’s theorem (the backbone of the copula model). From Sklar’s theorem, the copula is a function of uniform margins. Hence, you need to transform the margins of your dataset to the standard uniform margins in order to obtain copula data. We let \\(\\hat F_1, \\dots, \\hat F_d\\) denote the estimates of the marginal distribution functions. Then the pseudo-sample from the copula consists of the vectors \\(\\hat U_1, \\dots, \\hat U_d\\), where: \\[ \\hat U_t = (\\hat F_1 (X_{t,1}), \\dots, \\hat F_d(X_{t,d})&#39; \\] As such, the pseudo observations are just the usual observations transformed such that they have uniform margins. To calculate the pseudo observations, we first need to estimate the marginal distribution functions. We have two ways of estimating \\(\\hat F_t\\): Parametric Estimation We choose an appropriate parametric model for the data in question and fit it by ML. for financial risk-factor return data: GH, NIG or t for insurance or operational loss data: Pareto or lognormal Non-Parametric Estimation We assume that we can estimate F using: \\[ F_{i,n}^*(x) = \\frac{1}{1+n}\\sum_{t=1}^n I_{X_{t,i} \\leq x} \\] 6.5.2.2 Estimating the Copulas from the Pseudo-sample Let \\(C_\\theta\\) be a parametric copula, where \\(\\theta\\) is the vector of parameters to be estimated. Then, the MLE is obtained by maximising: \\[ \\ln L(\\theta;\\hat U_1, \\dots, \\hat U_n) = \\sum_{t=1}^n \\ln c_\\theta(\\hat U_t) \\] whereas \\(c(u)\\) denotes the copula density and \\(\\hat U_t\\) denotes a pseudo-observation from the copula. Consequently, to implement the MLE technique we need to derive the density of the copula. For Archimedean copulas, we have numerical methods to find a closed form solution. These are given in Figure 2 above. For implicit Copulas like Gauss or t, we use the MLE and find the log-likelihood function. Note that, in both cases, we need to solve w.r.t. the correlation matrix as it is responsible for the part which quantifies the joint risk behaviour. 6.5.2.3 Applying MLE to the Big Four dataset to Estimate different Copulas Having discussed the theoretical approach to estimating different copulas, we now set this into motion by applying it with the respective functions on the Swiss Market data. # Let&#39;s load the data again and use it for our purposes all_stocks &lt;- read.csv(&quot;~/Desktop/Master UZH/Data/A1_dataset_01.txt&quot;, header = T, sep = &quot;\\t&quot;) bigfour &lt;- all_stocks %&gt;% select(c(Date, Nestle_PS, Novartis_N, Roche_Holding, UBS_N)) %&gt;% filter(Date &gt;= &quot;1996-12-31&quot;) bigfour_ts &lt;- as.xts(bigfour[,-1], order.by = ymd(bigfour$Date)) We can now create the Pseudo Observations (U) to estimate the margins and plot them. Note that this is estimates exactly the part of the joint risk which exists between the four companies. # Create negative log returns bigfour_ts_ret_neg &lt;- -1*Return.calculate(bigfour_ts, method = &quot;log&quot;)[-1,] # Compute the Pseudo Observations parametrically U_hat &lt;- as.matrix(pobs(bigfour_ts_ret_neg)) # Plot the bivariate copulas pairs2(U_hat, cex = 0.4, col = adjustcolor(&quot;black&quot;, alpha.f = 0.5)) As we can see, there appears to be a slight stronger dependency between novartis and Roche as well as Nestle. This implies that the three stocks are likely to behave similarly in the tail distribution. As such, we are more likely to see that they have joint negative returns. Now, we can fit the Copula on the Pseudo Observations of the negative log returns. Based on them, we can then fit individual copulas on the observations. We calculate these copulas either directly (because they have a closed form solution) or indirectly through MLE (for Gauss and t). # Take the appropriate dimensions n &lt;- nrow(U_hat) # sample size d &lt;- ncol(U_hat) # dimension ## Compare various bivariate copulas fit.N &lt;- fitCopula(normalCopula(dim = d), data = U_hat) fit.t &lt;- fitCopula(tCopula(dim = d, dispstr=&quot;un&quot;), data = U_hat, method = &quot;itau.mpl&quot;) # df of freedom are estimated, too fit.C &lt;- fitCopula(claytonCopula(dim = d), data = U_hat) fit.G &lt;- fitCopula(gumbelCopula(dim = d), data = U_hat, method = &quot;mpl&quot;) # Comparing the likelihoods sort(c(N = fit.N@loglik, t = fit.t@loglik, C = fit.C@loglik, G = fit.G@loglik), decreasing = TRUE) ## t N G C ## 118.08027 90.50829 85.42201 58.77965 As we can see, the t Copula delivers the best log likelihood score. This means that the t-Copula is likely the best model to capture the joint risk behaviour of the four assets. We can go further and calculate the correlation between the individual assets based on their respective copulas to understand that we can compute them identically compared to the MLE method. # Get the fitted copula parameters fit.NC &lt;- fit.N@copula fit.tC &lt;- fit.t@copula fit.CC &lt;- fit.C@copula fit.GC &lt;- fit.G@copula # Compute matrices of pairwise Kendall&#39;s tau and upper tail-dependence coefficients kendall_tau_P2P_NC &lt;- p2P(tau(fit.NC)) Upper_Tail_P2P_NC &lt;- p2P(lambda(fit.NC)[(choose(d,2)+1):(d*(d-1))]) kendall_tau_P2P_tC &lt;- p2P(tau(fit.tC)) Upper_Tail_P2P_tC &lt;- p2P(lambda(fit.tC)[(choose(d,2)+1):(d*(d-1))]) kendall_tau_P2P_CC &lt;- p2P(tau(fit.CC)) Upper_Tail_P2P_CC &lt;- p2P(lambda(fit.CC)[(choose(d,2)+1):(d*(d-1))]) kendall_tau_P2P_GC &lt;- p2P(tau(fit.GC)) Upper_Tail_P2P_GC &lt;- p2P(lambda(fit.GC)[(choose(d,2)+1):(d*(d-1))]) Following standard statistical practice we usually fit a number of copula models to data and compare the quality of the fitted models using tools like the Akaike information criterion. We may also carry out goodness-of-fit tests to assess the plausibility that the data come from any given copula. # Calculate the Goodness of Fit N &lt;- 100 # Should be larger, e.g. 100&#39;000 (but large runtime then) gof.NC &lt;- gofCopula(fit.NC, x = U_hat, N = N) ## Warning in .gofPB(copula, x, N = N, method = method, estim.method = estim.method, : argument &#39;ties&#39; set to TRUE ## =================================================================================================================================================== gof.CC &lt;- gofCopula(fit.CC, x = U_hat, N = N) ## Warning in .gofPB(copula, x, N = N, method = method, estim.method = estim.method, : argument &#39;ties&#39; set to TRUE ## ================================= ## Warning in fitCopula.ml(copula, u = data, method = method, start = start, : possible convergence problem: optim() gave code=52 ## ====================== ## Warning in fitCopula.ml(copula, u = data, method = method, start = start, : possible convergence problem: optim() gave code=52 ## ===================== ## Warning in fitCopula.ml(copula, u = data, method = method, start = start, : possible convergence problem: optim() gave code=52 ## ====================================== ## Warning in fitCopula.ml(copula, u = data, method = method, start = start, : possible convergence problem: optim() gave code=52 ## ================================= gof.GC &lt;- gofCopula(fit.GC, x = U_hat, N = N) ## Warning in .gofPB(copula, x, N = N, method = method, estim.method = estim.method, : argument &#39;ties&#39; set to TRUE ## ============= ## Warning in fitCopula.ml(copula, u = data, method = method, start = start, : possible convergence problem: optim() gave code=52 ## =============================================== ## Warning in fitCopula.ml(copula, u = data, method = method, start = start, : possible convergence problem: optim() gave code=52 ## ======================================================================================= ## For the t copula, we cannot use this feature yet in multivariate settings. As such, we need to calculate the Goodness of Fit test through a visual setting. U.Rsnbl &lt;- cCopula(U_hat, copula = fit.tC) pairs2(U.Rsnbl, cex = 0.4, col = adjustcolor(&quot;black&quot;, alpha.f = 0.5)) # looks ok "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
